Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CALLMETHOD
    CHARACTER
    CLASS
    COMMENT
    CONTINUE
    DICTIONARYTYPE
    ENUM
    FALSE
    FOR
    GUARD
    IMPORT
    IN
    INIT
    MINUSONE
    NUMBER
    OPTIONALVARIABLE
    PLUSONE
    PRIVATE
    PUBLIC
    RANGE
    REPEAT
    SETVARIABLE
    STATIC
    STRUCT
    TRUE
    TYPEALIAS
    VALUESTYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> function_general
Rule 8     statement -> while_statement
Rule 9     statement -> switch_statement
Rule 10    assignment_statement -> variable_declarator VARIABLE ASSIGN expression
Rule 11    assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
Rule 12    assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block
Rule 13    assignment_statement -> VARIABLE ASSIGN expression
Rule 14    collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET
Rule 15    print_statement -> PRINT LPAREN expression RPAREN
Rule 16    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES
Rule 17    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
Rule 18    while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES
Rule 19    switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES
Rule 20    caso -> CASE expression COLON cuerpo_caso caso
Rule 21    caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
Rule 22    cuerpo_caso -> expression
Rule 23    cuerpo_caso -> statement
Rule 24    function_general -> function_declaration
Rule 25    function_general -> function_declaration_empty
Rule 26    function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
Rule 27    function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES
Rule 28    function_parameters -> function_parameters COMMA VARIABLE COLON data_type
Rule 29    function_parameters -> VARIABLE COLON data_type
Rule 30    function_return_type -> ARROW data_type
Rule 31    function_return_type -> empty
Rule 32    return_statement -> RETURN expression
Rule 33    variable_declarator -> LET
Rule 34    variable_declarator -> VAR
Rule 35    data_type -> INTEGER
Rule 36    data_type -> STRING
Rule 37    data_type -> BOOLEAN
Rule 38    data_type -> DOUBLE
Rule 39    data_type -> FLOAT
Rule 40    data_type -> INT
Rule 41    data_collection_type -> COLLECTIONTYPE
Rule 42    break_statement -> BREAK
Rule 43    expression -> expression PLUS expression
Rule 44    expression -> expression MINUS expression
Rule 45    expression -> expression MULTIPLY expression
Rule 46    expression -> expression DIVIDE expression
Rule 47    expression -> expression GREATERTHAN expression
Rule 48    expression -> expression LESSTHAN expression
Rule 49    expression -> expression EQUALS expression
Rule 50    expression -> expression NOTEQUALS expression
Rule 51    expression -> expression AND expression
Rule 52    expression -> expression OR expression
Rule 53    expression -> expression COMMA expression
Rule 54    expression -> LPAREN expression RPAREN
Rule 55    expression -> NOT expression
Rule 56    expression -> VARIABLE
Rule 57    expression -> type
Rule 58    expression -> function_call
Rule 59    expression -> empty
Rule 60    type -> BOOL
Rule 61    type -> DECIMAL
Rule 62    type -> WSTRING
Rule 63    function_call -> VARIABLE LPAREN function_arguments RPAREN
Rule 64    function_arguments -> function_arguments COMMA expression
Rule 65    function_arguments -> expression
Rule 66    function_arguments -> empty
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ARRAY                : 
ARROW                : 30
ASSIGN               : 10 11 12 13
BOOL                 : 60
BOOLEAN              : 37
BREAK                : 42
CALLMETHOD           : 
CASE                 : 20 21
CHARACTER            : 
CLASS                : 
COLLECTIONTYPE       : 41
COLON                : 11 12 20 21 21 28 29
COMMA                : 28 53 64
COMMENT              : 
CONTINUE             : 
DECIMAL              : 61
DEFAULT              : 21
DICTIONARYTYPE       : 
DIVIDE               : 46
DOUBLE               : 38
ELSE                 : 17
ENUM                 : 
EQUALS               : 49
FALSE                : 
FLOAT                : 39
FOR                  : 
FUNC                 : 26 27
GREATERTHAN          : 47
GUARD                : 
IF                   : 16 17
IMPORT               : 
IN                   : 
INIT                 : 
INT                  : 40
INTEGER              : 35
LBRACES              : 16 17 17 18 19 26 27
LESSTHAN             : 48
LET                  : 33
LPAREN               : 15 16 17 18 26 27 54 63
LSQUAREBRACKET       : 14
MINUS                : 44
MINUSONE             : 
MULTIPLY             : 45
NOT                  : 55
NOTEQUALS            : 50
NUMBER               : 
OPTIONALVARIABLE     : 
OR                   : 52
PLUS                 : 43
PLUSONE              : 
PRINT                : 15
PRIVATE              : 
PUBLIC               : 
RANGE                : 
RBRACES              : 16 17 17 18 19 26 27
REPEAT               : 
RETURN               : 32
RPAREN               : 15 16 17 18 26 27 54 63
RSQUAREBRACKET       : 14
SET                  : 12
SETVARIABLE          : 
STATIC               : 
STRING               : 36
STRUCT               : 
SWITCH               : 19
TRUE                 : 
TYPEALIAS            : 
VALUESTYPE           : 
VAR                  : 34
VARIABLE             : 10 11 12 13 19 26 27 28 29 56 63
WHILE                : 18
WSTRING              : 62
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4
break_statement      : 
caso                 : 19 20
collection_block     : 11 12
cuerpo_caso          : 20 21 21
data_collection_type : 11
data_type            : 28 29 30
empty                : 27 31 59 66
expression           : 10 13 14 15 16 17 18 20 21 22 26 27 32 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 55 64 65
function_arguments   : 63 64
function_call        : 58
function_declaration : 24
function_declaration_empty : 25
function_general     : 7
function_parameters  : 26 28
function_return_type : 26 27
if_statement         : 6
print_statement      : 5
program              : 0
return_statement     : 26 27
statement            : 2 3 23
statements           : 1 2 16 17 17 18
switch_statement     : 9
type                 : 57
variable_declarator  : 10 11 12
while_statement      : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statement                      shift and go to state 21
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACES         reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment_statement .

    VARIABLE        reduce using rule 4 (statement -> assignment_statement .)
    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)
    SWITCH          reduce using rule 4 (statement -> assignment_statement .)
    LET             reduce using rule 4 (statement -> assignment_statement .)
    VAR             reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACES         reduce using rule 4 (statement -> assignment_statement .)
    DEFAULT         reduce using rule 4 (statement -> assignment_statement .)
    CASE            reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> print_statement .

    VARIABLE        reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    WHILE           reduce using rule 5 (statement -> print_statement .)
    SWITCH          reduce using rule 5 (statement -> print_statement .)
    LET             reduce using rule 5 (statement -> print_statement .)
    VAR             reduce using rule 5 (statement -> print_statement .)
    FUNC            reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACES         reduce using rule 5 (statement -> print_statement .)
    DEFAULT         reduce using rule 5 (statement -> print_statement .)
    CASE            reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    VARIABLE        reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    SWITCH          reduce using rule 6 (statement -> if_statement .)
    LET             reduce using rule 6 (statement -> if_statement .)
    VAR             reduce using rule 6 (statement -> if_statement .)
    FUNC            reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACES         reduce using rule 6 (statement -> if_statement .)
    DEFAULT         reduce using rule 6 (statement -> if_statement .)
    CASE            reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> function_general .

    VARIABLE        reduce using rule 7 (statement -> function_general .)
    PRINT           reduce using rule 7 (statement -> function_general .)
    IF              reduce using rule 7 (statement -> function_general .)
    WHILE           reduce using rule 7 (statement -> function_general .)
    SWITCH          reduce using rule 7 (statement -> function_general .)
    LET             reduce using rule 7 (statement -> function_general .)
    VAR             reduce using rule 7 (statement -> function_general .)
    FUNC            reduce using rule 7 (statement -> function_general .)
    $end            reduce using rule 7 (statement -> function_general .)
    RBRACES         reduce using rule 7 (statement -> function_general .)
    DEFAULT         reduce using rule 7 (statement -> function_general .)
    CASE            reduce using rule 7 (statement -> function_general .)


state 8

    (8) statement -> while_statement .

    VARIABLE        reduce using rule 8 (statement -> while_statement .)
    PRINT           reduce using rule 8 (statement -> while_statement .)
    IF              reduce using rule 8 (statement -> while_statement .)
    WHILE           reduce using rule 8 (statement -> while_statement .)
    SWITCH          reduce using rule 8 (statement -> while_statement .)
    LET             reduce using rule 8 (statement -> while_statement .)
    VAR             reduce using rule 8 (statement -> while_statement .)
    FUNC            reduce using rule 8 (statement -> while_statement .)
    $end            reduce using rule 8 (statement -> while_statement .)
    RBRACES         reduce using rule 8 (statement -> while_statement .)
    DEFAULT         reduce using rule 8 (statement -> while_statement .)
    CASE            reduce using rule 8 (statement -> while_statement .)


state 9

    (9) statement -> switch_statement .

    VARIABLE        reduce using rule 9 (statement -> switch_statement .)
    PRINT           reduce using rule 9 (statement -> switch_statement .)
    IF              reduce using rule 9 (statement -> switch_statement .)
    WHILE           reduce using rule 9 (statement -> switch_statement .)
    SWITCH          reduce using rule 9 (statement -> switch_statement .)
    LET             reduce using rule 9 (statement -> switch_statement .)
    VAR             reduce using rule 9 (statement -> switch_statement .)
    FUNC            reduce using rule 9 (statement -> switch_statement .)
    $end            reduce using rule 9 (statement -> switch_statement .)
    RBRACES         reduce using rule 9 (statement -> switch_statement .)
    DEFAULT         reduce using rule 9 (statement -> switch_statement .)
    CASE            reduce using rule 9 (statement -> switch_statement .)


state 10

    (10) assignment_statement -> variable_declarator . VARIABLE ASSIGN expression
    (11) assignment_statement -> variable_declarator . VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> variable_declarator . VARIABLE COLON SET ASSIGN collection_block

    VARIABLE        shift and go to state 22


state 11

    (13) assignment_statement -> VARIABLE . ASSIGN expression

    ASSIGN          shift and go to state 23


state 12

    (15) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 24


state 13

    (16) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LPAREN          shift and go to state 25


state 14

    (24) function_general -> function_declaration .

    VARIABLE        reduce using rule 24 (function_general -> function_declaration .)
    PRINT           reduce using rule 24 (function_general -> function_declaration .)
    IF              reduce using rule 24 (function_general -> function_declaration .)
    WHILE           reduce using rule 24 (function_general -> function_declaration .)
    SWITCH          reduce using rule 24 (function_general -> function_declaration .)
    LET             reduce using rule 24 (function_general -> function_declaration .)
    VAR             reduce using rule 24 (function_general -> function_declaration .)
    FUNC            reduce using rule 24 (function_general -> function_declaration .)
    $end            reduce using rule 24 (function_general -> function_declaration .)
    RBRACES         reduce using rule 24 (function_general -> function_declaration .)
    DEFAULT         reduce using rule 24 (function_general -> function_declaration .)
    CASE            reduce using rule 24 (function_general -> function_declaration .)


state 15

    (25) function_general -> function_declaration_empty .

    VARIABLE        reduce using rule 25 (function_general -> function_declaration_empty .)
    PRINT           reduce using rule 25 (function_general -> function_declaration_empty .)
    IF              reduce using rule 25 (function_general -> function_declaration_empty .)
    WHILE           reduce using rule 25 (function_general -> function_declaration_empty .)
    SWITCH          reduce using rule 25 (function_general -> function_declaration_empty .)
    LET             reduce using rule 25 (function_general -> function_declaration_empty .)
    VAR             reduce using rule 25 (function_general -> function_declaration_empty .)
    FUNC            reduce using rule 25 (function_general -> function_declaration_empty .)
    $end            reduce using rule 25 (function_general -> function_declaration_empty .)
    RBRACES         reduce using rule 25 (function_general -> function_declaration_empty .)
    DEFAULT         reduce using rule 25 (function_general -> function_declaration_empty .)
    CASE            reduce using rule 25 (function_general -> function_declaration_empty .)


state 16

    (18) while_statement -> WHILE . LPAREN expression RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 26


state 17

    (19) switch_statement -> SWITCH . VARIABLE LBRACES caso RBRACES

    VARIABLE        shift and go to state 27


state 18

    (33) variable_declarator -> LET .

    VARIABLE        reduce using rule 33 (variable_declarator -> LET .)


state 19

    (34) variable_declarator -> VAR .

    VARIABLE        reduce using rule 34 (variable_declarator -> VAR .)


state 20

    (26) function_declaration -> FUNC . VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> FUNC . VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 28


state 21

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACES         reduce using rule 2 (statements -> statements statement .)


state 22

    (10) assignment_statement -> variable_declarator VARIABLE . ASSIGN expression
    (11) assignment_statement -> variable_declarator VARIABLE . COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> variable_declarator VARIABLE . COLON SET ASSIGN collection_block

    ASSIGN          shift and go to state 29
    COLON           shift and go to state 30


state 23

    (13) assignment_statement -> VARIABLE ASSIGN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 32
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 24

    (15) print_statement -> PRINT LPAREN . expression RPAREN
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    RPAREN          reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 41
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 25

    (16) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    RPAREN          reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 42
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 26

    (18) while_statement -> WHILE LPAREN . expression RPAREN LBRACES statements RBRACES
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    RPAREN          reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 43
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 27

    (19) switch_statement -> SWITCH VARIABLE . LBRACES caso RBRACES

    LBRACES         shift and go to state 44


state 28

    (26) function_declaration -> FUNC VARIABLE . LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> FUNC VARIABLE . LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    LPAREN          shift and go to state 45


state 29

    (10) assignment_statement -> variable_declarator VARIABLE ASSIGN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 46
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 30

    (11) assignment_statement -> variable_declarator VARIABLE COLON . data_collection_type ASSIGN collection_block
    (12) assignment_statement -> variable_declarator VARIABLE COLON . SET ASSIGN collection_block
    (41) data_collection_type -> . COLLECTIONTYPE

    SET             shift and go to state 48
    COLLECTIONTYPE  shift and go to state 49

    data_collection_type           shift and go to state 47

state 31

    (56) expression -> VARIABLE .
    (63) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    PLUS            reduce using rule 56 (expression -> VARIABLE .)
    MINUS           reduce using rule 56 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 56 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 56 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 56 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 56 (expression -> VARIABLE .)
    EQUALS          reduce using rule 56 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 56 (expression -> VARIABLE .)
    AND             reduce using rule 56 (expression -> VARIABLE .)
    OR              reduce using rule 56 (expression -> VARIABLE .)
    COMMA           reduce using rule 56 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 56 (expression -> VARIABLE .)
    PRINT           reduce using rule 56 (expression -> VARIABLE .)
    IF              reduce using rule 56 (expression -> VARIABLE .)
    WHILE           reduce using rule 56 (expression -> VARIABLE .)
    SWITCH          reduce using rule 56 (expression -> VARIABLE .)
    LET             reduce using rule 56 (expression -> VARIABLE .)
    VAR             reduce using rule 56 (expression -> VARIABLE .)
    FUNC            reduce using rule 56 (expression -> VARIABLE .)
    $end            reduce using rule 56 (expression -> VARIABLE .)
    RBRACES         reduce using rule 56 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 56 (expression -> VARIABLE .)
    CASE            reduce using rule 56 (expression -> VARIABLE .)
    RPAREN          reduce using rule 56 (expression -> VARIABLE .)
    COLON           reduce using rule 56 (expression -> VARIABLE .)
    RSQUAREBRACKET  reduce using rule 56 (expression -> VARIABLE .)
    RETURN          reduce using rule 56 (expression -> VARIABLE .)
    LPAREN          shift and go to state 50


state 32

    (13) assignment_statement -> VARIABLE ASSIGN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    VARIABLE        reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    LET             reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    VAR             reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 13 (assignment_statement -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 33

    (54) expression -> LPAREN . expression RPAREN
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    RPAREN          reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 62
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 34

    (55) expression -> NOT . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 63
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 35

    (57) expression -> type .

    PLUS            reduce using rule 57 (expression -> type .)
    MINUS           reduce using rule 57 (expression -> type .)
    MULTIPLY        reduce using rule 57 (expression -> type .)
    DIVIDE          reduce using rule 57 (expression -> type .)
    GREATERTHAN     reduce using rule 57 (expression -> type .)
    LESSTHAN        reduce using rule 57 (expression -> type .)
    EQUALS          reduce using rule 57 (expression -> type .)
    NOTEQUALS       reduce using rule 57 (expression -> type .)
    AND             reduce using rule 57 (expression -> type .)
    OR              reduce using rule 57 (expression -> type .)
    COMMA           reduce using rule 57 (expression -> type .)
    VARIABLE        reduce using rule 57 (expression -> type .)
    PRINT           reduce using rule 57 (expression -> type .)
    IF              reduce using rule 57 (expression -> type .)
    WHILE           reduce using rule 57 (expression -> type .)
    SWITCH          reduce using rule 57 (expression -> type .)
    LET             reduce using rule 57 (expression -> type .)
    VAR             reduce using rule 57 (expression -> type .)
    FUNC            reduce using rule 57 (expression -> type .)
    $end            reduce using rule 57 (expression -> type .)
    RBRACES         reduce using rule 57 (expression -> type .)
    DEFAULT         reduce using rule 57 (expression -> type .)
    CASE            reduce using rule 57 (expression -> type .)
    RPAREN          reduce using rule 57 (expression -> type .)
    COLON           reduce using rule 57 (expression -> type .)
    RSQUAREBRACKET  reduce using rule 57 (expression -> type .)
    RETURN          reduce using rule 57 (expression -> type .)


state 36

    (58) expression -> function_call .

    PLUS            reduce using rule 58 (expression -> function_call .)
    MINUS           reduce using rule 58 (expression -> function_call .)
    MULTIPLY        reduce using rule 58 (expression -> function_call .)
    DIVIDE          reduce using rule 58 (expression -> function_call .)
    GREATERTHAN     reduce using rule 58 (expression -> function_call .)
    LESSTHAN        reduce using rule 58 (expression -> function_call .)
    EQUALS          reduce using rule 58 (expression -> function_call .)
    NOTEQUALS       reduce using rule 58 (expression -> function_call .)
    AND             reduce using rule 58 (expression -> function_call .)
    OR              reduce using rule 58 (expression -> function_call .)
    COMMA           reduce using rule 58 (expression -> function_call .)
    VARIABLE        reduce using rule 58 (expression -> function_call .)
    PRINT           reduce using rule 58 (expression -> function_call .)
    IF              reduce using rule 58 (expression -> function_call .)
    WHILE           reduce using rule 58 (expression -> function_call .)
    SWITCH          reduce using rule 58 (expression -> function_call .)
    LET             reduce using rule 58 (expression -> function_call .)
    VAR             reduce using rule 58 (expression -> function_call .)
    FUNC            reduce using rule 58 (expression -> function_call .)
    $end            reduce using rule 58 (expression -> function_call .)
    RBRACES         reduce using rule 58 (expression -> function_call .)
    DEFAULT         reduce using rule 58 (expression -> function_call .)
    CASE            reduce using rule 58 (expression -> function_call .)
    RPAREN          reduce using rule 58 (expression -> function_call .)
    COLON           reduce using rule 58 (expression -> function_call .)
    RSQUAREBRACKET  reduce using rule 58 (expression -> function_call .)
    RETURN          reduce using rule 58 (expression -> function_call .)


state 37

    (59) expression -> empty .

    PLUS            reduce using rule 59 (expression -> empty .)
    MINUS           reduce using rule 59 (expression -> empty .)
    MULTIPLY        reduce using rule 59 (expression -> empty .)
    DIVIDE          reduce using rule 59 (expression -> empty .)
    GREATERTHAN     reduce using rule 59 (expression -> empty .)
    LESSTHAN        reduce using rule 59 (expression -> empty .)
    EQUALS          reduce using rule 59 (expression -> empty .)
    NOTEQUALS       reduce using rule 59 (expression -> empty .)
    AND             reduce using rule 59 (expression -> empty .)
    OR              reduce using rule 59 (expression -> empty .)
    COMMA           reduce using rule 59 (expression -> empty .)
    VARIABLE        reduce using rule 59 (expression -> empty .)
    PRINT           reduce using rule 59 (expression -> empty .)
    IF              reduce using rule 59 (expression -> empty .)
    WHILE           reduce using rule 59 (expression -> empty .)
    SWITCH          reduce using rule 59 (expression -> empty .)
    LET             reduce using rule 59 (expression -> empty .)
    VAR             reduce using rule 59 (expression -> empty .)
    FUNC            reduce using rule 59 (expression -> empty .)
    $end            reduce using rule 59 (expression -> empty .)
    RBRACES         reduce using rule 59 (expression -> empty .)
    DEFAULT         reduce using rule 59 (expression -> empty .)
    CASE            reduce using rule 59 (expression -> empty .)
    RPAREN          reduce using rule 59 (expression -> empty .)
    COLON           reduce using rule 59 (expression -> empty .)
    RSQUAREBRACKET  reduce using rule 59 (expression -> empty .)
    RETURN          reduce using rule 59 (expression -> empty .)


state 38

    (60) type -> BOOL .

    PLUS            reduce using rule 60 (type -> BOOL .)
    MINUS           reduce using rule 60 (type -> BOOL .)
    MULTIPLY        reduce using rule 60 (type -> BOOL .)
    DIVIDE          reduce using rule 60 (type -> BOOL .)
    GREATERTHAN     reduce using rule 60 (type -> BOOL .)
    LESSTHAN        reduce using rule 60 (type -> BOOL .)
    EQUALS          reduce using rule 60 (type -> BOOL .)
    NOTEQUALS       reduce using rule 60 (type -> BOOL .)
    AND             reduce using rule 60 (type -> BOOL .)
    OR              reduce using rule 60 (type -> BOOL .)
    COMMA           reduce using rule 60 (type -> BOOL .)
    VARIABLE        reduce using rule 60 (type -> BOOL .)
    PRINT           reduce using rule 60 (type -> BOOL .)
    IF              reduce using rule 60 (type -> BOOL .)
    WHILE           reduce using rule 60 (type -> BOOL .)
    SWITCH          reduce using rule 60 (type -> BOOL .)
    LET             reduce using rule 60 (type -> BOOL .)
    VAR             reduce using rule 60 (type -> BOOL .)
    FUNC            reduce using rule 60 (type -> BOOL .)
    $end            reduce using rule 60 (type -> BOOL .)
    RBRACES         reduce using rule 60 (type -> BOOL .)
    DEFAULT         reduce using rule 60 (type -> BOOL .)
    CASE            reduce using rule 60 (type -> BOOL .)
    RPAREN          reduce using rule 60 (type -> BOOL .)
    COLON           reduce using rule 60 (type -> BOOL .)
    RSQUAREBRACKET  reduce using rule 60 (type -> BOOL .)
    RETURN          reduce using rule 60 (type -> BOOL .)


state 39

    (61) type -> DECIMAL .

    PLUS            reduce using rule 61 (type -> DECIMAL .)
    MINUS           reduce using rule 61 (type -> DECIMAL .)
    MULTIPLY        reduce using rule 61 (type -> DECIMAL .)
    DIVIDE          reduce using rule 61 (type -> DECIMAL .)
    GREATERTHAN     reduce using rule 61 (type -> DECIMAL .)
    LESSTHAN        reduce using rule 61 (type -> DECIMAL .)
    EQUALS          reduce using rule 61 (type -> DECIMAL .)
    NOTEQUALS       reduce using rule 61 (type -> DECIMAL .)
    AND             reduce using rule 61 (type -> DECIMAL .)
    OR              reduce using rule 61 (type -> DECIMAL .)
    COMMA           reduce using rule 61 (type -> DECIMAL .)
    VARIABLE        reduce using rule 61 (type -> DECIMAL .)
    PRINT           reduce using rule 61 (type -> DECIMAL .)
    IF              reduce using rule 61 (type -> DECIMAL .)
    WHILE           reduce using rule 61 (type -> DECIMAL .)
    SWITCH          reduce using rule 61 (type -> DECIMAL .)
    LET             reduce using rule 61 (type -> DECIMAL .)
    VAR             reduce using rule 61 (type -> DECIMAL .)
    FUNC            reduce using rule 61 (type -> DECIMAL .)
    $end            reduce using rule 61 (type -> DECIMAL .)
    RBRACES         reduce using rule 61 (type -> DECIMAL .)
    DEFAULT         reduce using rule 61 (type -> DECIMAL .)
    CASE            reduce using rule 61 (type -> DECIMAL .)
    RPAREN          reduce using rule 61 (type -> DECIMAL .)
    COLON           reduce using rule 61 (type -> DECIMAL .)
    RSQUAREBRACKET  reduce using rule 61 (type -> DECIMAL .)
    RETURN          reduce using rule 61 (type -> DECIMAL .)


state 40

    (62) type -> WSTRING .

    PLUS            reduce using rule 62 (type -> WSTRING .)
    MINUS           reduce using rule 62 (type -> WSTRING .)
    MULTIPLY        reduce using rule 62 (type -> WSTRING .)
    DIVIDE          reduce using rule 62 (type -> WSTRING .)
    GREATERTHAN     reduce using rule 62 (type -> WSTRING .)
    LESSTHAN        reduce using rule 62 (type -> WSTRING .)
    EQUALS          reduce using rule 62 (type -> WSTRING .)
    NOTEQUALS       reduce using rule 62 (type -> WSTRING .)
    AND             reduce using rule 62 (type -> WSTRING .)
    OR              reduce using rule 62 (type -> WSTRING .)
    COMMA           reduce using rule 62 (type -> WSTRING .)
    VARIABLE        reduce using rule 62 (type -> WSTRING .)
    PRINT           reduce using rule 62 (type -> WSTRING .)
    IF              reduce using rule 62 (type -> WSTRING .)
    WHILE           reduce using rule 62 (type -> WSTRING .)
    SWITCH          reduce using rule 62 (type -> WSTRING .)
    LET             reduce using rule 62 (type -> WSTRING .)
    VAR             reduce using rule 62 (type -> WSTRING .)
    FUNC            reduce using rule 62 (type -> WSTRING .)
    $end            reduce using rule 62 (type -> WSTRING .)
    RBRACES         reduce using rule 62 (type -> WSTRING .)
    DEFAULT         reduce using rule 62 (type -> WSTRING .)
    CASE            reduce using rule 62 (type -> WSTRING .)
    RPAREN          reduce using rule 62 (type -> WSTRING .)
    COLON           reduce using rule 62 (type -> WSTRING .)
    RSQUAREBRACKET  reduce using rule 62 (type -> WSTRING .)
    RETURN          reduce using rule 62 (type -> WSTRING .)


state 41

    (15) print_statement -> PRINT LPAREN expression . RPAREN
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    RPAREN          shift and go to state 64
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 42

    (16) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES
    (17) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    RPAREN          shift and go to state 65
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 43

    (18) while_statement -> WHILE LPAREN expression . RPAREN LBRACES statements RBRACES
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 44

    (19) switch_statement -> SWITCH VARIABLE LBRACES . caso RBRACES
    (20) caso -> . CASE expression COLON cuerpo_caso caso
    (21) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    CASE            shift and go to state 68

    caso                           shift and go to state 67

state 45

    (26) function_declaration -> FUNC VARIABLE LPAREN . function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> FUNC VARIABLE LPAREN . empty RPAREN function_return_type LBRACES expression return_statement RBRACES
    (28) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (29) function_parameters -> . VARIABLE COLON data_type
    (67) empty -> .

    VARIABLE        shift and go to state 69
    RPAREN          reduce using rule 67 (empty -> .)

    function_parameters            shift and go to state 70
    empty                          shift and go to state 71

state 46

    (10) assignment_statement -> variable_declarator VARIABLE ASSIGN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    VARIABLE        reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IF              reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    LET             reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    VAR             reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    $end            reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    CASE            reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 47

    (11) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type . ASSIGN collection_block

    ASSIGN          shift and go to state 72


state 48

    (12) assignment_statement -> variable_declarator VARIABLE COLON SET . ASSIGN collection_block

    ASSIGN          shift and go to state 73


state 49

    (41) data_collection_type -> COLLECTIONTYPE .

    ASSIGN          reduce using rule 41 (data_collection_type -> COLLECTIONTYPE .)


state 50

    (63) function_call -> VARIABLE LPAREN . function_arguments RPAREN
    (64) function_arguments -> . function_arguments COMMA expression
    (65) function_arguments -> . expression
    (66) function_arguments -> . empty
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (67) empty -> .
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    RPAREN          reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40

    function_arguments             shift and go to state 74
    expression                     shift and go to state 75
    empty                          shift and go to state 76
    type                           shift and go to state 35
    function_call                  shift and go to state 36

state 51

    (43) expression -> expression PLUS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 77
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 52

    (44) expression -> expression MINUS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 78
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 53

    (45) expression -> expression MULTIPLY . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 79
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 54

    (46) expression -> expression DIVIDE . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 80
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 55

    (47) expression -> expression GREATERTHAN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 81
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 56

    (48) expression -> expression LESSTHAN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 82
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 57

    (49) expression -> expression EQUALS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 83
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 58

    (50) expression -> expression NOTEQUALS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 84
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 59

    (51) expression -> expression AND . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 85
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 60

    (52) expression -> expression OR . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 86
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 61

    (53) expression -> expression COMMA . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    PRINT           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    SWITCH          reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    VAR             reduce using rule 67 (empty -> .)
    FUNC            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    COLON           reduce using rule 67 (empty -> .)
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

  ! VARIABLE        [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 87
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 62

    (54) expression -> LPAREN expression . RPAREN
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 63

    (55) expression -> NOT expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 55 (expression -> NOT expression .)
    PRINT           reduce using rule 55 (expression -> NOT expression .)
    IF              reduce using rule 55 (expression -> NOT expression .)
    WHILE           reduce using rule 55 (expression -> NOT expression .)
    SWITCH          reduce using rule 55 (expression -> NOT expression .)
    LET             reduce using rule 55 (expression -> NOT expression .)
    VAR             reduce using rule 55 (expression -> NOT expression .)
    FUNC            reduce using rule 55 (expression -> NOT expression .)
    $end            reduce using rule 55 (expression -> NOT expression .)
    RBRACES         reduce using rule 55 (expression -> NOT expression .)
    DEFAULT         reduce using rule 55 (expression -> NOT expression .)
    CASE            reduce using rule 55 (expression -> NOT expression .)
    RPAREN          reduce using rule 55 (expression -> NOT expression .)
    COLON           reduce using rule 55 (expression -> NOT expression .)
    RSQUAREBRACKET  reduce using rule 55 (expression -> NOT expression .)
    RETURN          reduce using rule 55 (expression -> NOT expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 55 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 55 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 55 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 55 (expression -> NOT expression .) ]
  ! NOTEQUALS       [ reduce using rule 55 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 55 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 55 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 55 (expression -> NOT expression .) ]


state 64

    (15) print_statement -> PRINT LPAREN expression RPAREN .

    VARIABLE        reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    SWITCH          reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    LET             reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUNC            reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACES         reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)
    CASE            reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN .)


state 65

    (16) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES
    (17) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LBRACES         shift and go to state 89


state 66

    (18) while_statement -> WHILE LPAREN expression RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 90


state 67

    (19) switch_statement -> SWITCH VARIABLE LBRACES caso . RBRACES

    RBRACES         shift and go to state 91


state 68

    (20) caso -> CASE . expression COLON cuerpo_caso caso
    (21) caso -> CASE . expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    COLON           reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 92
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 69

    (29) function_parameters -> VARIABLE . COLON data_type

    COLON           shift and go to state 93


state 70

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters . RPAREN function_return_type LBRACES expression return_statement RBRACES
    (28) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 94
    COMMA           shift and go to state 95


state 71

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty . RPAREN function_return_type LBRACES expression return_statement RBRACES

    RPAREN          shift and go to state 96


state 72

    (11) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN . collection_block
    (14) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 98

    collection_block               shift and go to state 97

state 73

    (12) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN . collection_block
    (14) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 98

    collection_block               shift and go to state 99

state 74

    (63) function_call -> VARIABLE LPAREN function_arguments . RPAREN
    (64) function_arguments -> function_arguments . COMMA expression

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 101


state 75

    (65) function_arguments -> expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 65 (function_arguments -> expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! COMMA           [ reduce using rule 65 (function_arguments -> expression .) ]


state 76

    (66) function_arguments -> empty .
    (59) expression -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 59 (expression -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 59 (expression -> empty .)
    PLUS            reduce using rule 59 (expression -> empty .)
    MINUS           reduce using rule 59 (expression -> empty .)
    MULTIPLY        reduce using rule 59 (expression -> empty .)
    DIVIDE          reduce using rule 59 (expression -> empty .)
    GREATERTHAN     reduce using rule 59 (expression -> empty .)
    LESSTHAN        reduce using rule 59 (expression -> empty .)
    EQUALS          reduce using rule 59 (expression -> empty .)
    NOTEQUALS       reduce using rule 59 (expression -> empty .)
    AND             reduce using rule 59 (expression -> empty .)
    OR              reduce using rule 59 (expression -> empty .)
    COMMA           reduce using rule 59 (expression -> empty .)
    RPAREN          reduce using rule 59 (expression -> empty .)

  ! RPAREN          [ reduce using rule 66 (function_arguments -> empty .) ]
  ! COMMA           [ reduce using rule 66 (function_arguments -> empty .) ]


state 77

    (43) expression -> expression PLUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 43 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 43 (expression -> expression PLUS expression .)
    IF              reduce using rule 43 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 43 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 43 (expression -> expression PLUS expression .)
    LET             reduce using rule 43 (expression -> expression PLUS expression .)
    VAR             reduce using rule 43 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 43 (expression -> expression PLUS expression .)
    $end            reduce using rule 43 (expression -> expression PLUS expression .)
    RBRACES         reduce using rule 43 (expression -> expression PLUS expression .)
    DEFAULT         reduce using rule 43 (expression -> expression PLUS expression .)
    CASE            reduce using rule 43 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 43 (expression -> expression PLUS expression .)
    COLON           reduce using rule 43 (expression -> expression PLUS expression .)
    RSQUAREBRACKET  reduce using rule 43 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 43 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 43 (expression -> expression PLUS expression .) ]


state 78

    (44) expression -> expression MINUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 44 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 44 (expression -> expression MINUS expression .)
    IF              reduce using rule 44 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 44 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 44 (expression -> expression MINUS expression .)
    LET             reduce using rule 44 (expression -> expression MINUS expression .)
    VAR             reduce using rule 44 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 44 (expression -> expression MINUS expression .)
    $end            reduce using rule 44 (expression -> expression MINUS expression .)
    RBRACES         reduce using rule 44 (expression -> expression MINUS expression .)
    DEFAULT         reduce using rule 44 (expression -> expression MINUS expression .)
    CASE            reduce using rule 44 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 44 (expression -> expression MINUS expression .)
    COLON           reduce using rule 44 (expression -> expression MINUS expression .)
    RSQUAREBRACKET  reduce using rule 44 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 44 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 44 (expression -> expression MINUS expression .) ]


state 79

    (45) expression -> expression MULTIPLY expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 45 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 45 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 45 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 45 (expression -> expression MULTIPLY expression .)
    SWITCH          reduce using rule 45 (expression -> expression MULTIPLY expression .)
    LET             reduce using rule 45 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 45 (expression -> expression MULTIPLY expression .)
    FUNC            reduce using rule 45 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RBRACES         reduce using rule 45 (expression -> expression MULTIPLY expression .)
    DEFAULT         reduce using rule 45 (expression -> expression MULTIPLY expression .)
    CASE            reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 45 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RSQUAREBRACKET  reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 45 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUALS       [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]


state 80

    (46) expression -> expression DIVIDE expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 46 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 46 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 46 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 46 (expression -> expression DIVIDE expression .)
    SWITCH          reduce using rule 46 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 46 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 46 (expression -> expression DIVIDE expression .)
    FUNC            reduce using rule 46 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 46 (expression -> expression DIVIDE expression .)
    RBRACES         reduce using rule 46 (expression -> expression DIVIDE expression .)
    DEFAULT         reduce using rule 46 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 46 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 46 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 46 (expression -> expression DIVIDE expression .)
    RSQUAREBRACKET  reduce using rule 46 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 46 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUALS       [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]


state 81

    (47) expression -> expression GREATERTHAN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    PRINT           reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    IF              reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    WHILE           reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    SWITCH          reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    LET             reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    VAR             reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    FUNC            reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    $end            reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    RBRACES         reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    DEFAULT         reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    CASE            reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    COLON           reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    RSQUAREBRACKET  reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    RETURN          reduce using rule 47 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! EQUALS          [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 47 (expression -> expression GREATERTHAN expression .) ]


state 82

    (48) expression -> expression LESSTHAN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 48 (expression -> expression LESSTHAN expression .)
    PRINT           reduce using rule 48 (expression -> expression LESSTHAN expression .)
    IF              reduce using rule 48 (expression -> expression LESSTHAN expression .)
    WHILE           reduce using rule 48 (expression -> expression LESSTHAN expression .)
    SWITCH          reduce using rule 48 (expression -> expression LESSTHAN expression .)
    LET             reduce using rule 48 (expression -> expression LESSTHAN expression .)
    VAR             reduce using rule 48 (expression -> expression LESSTHAN expression .)
    FUNC            reduce using rule 48 (expression -> expression LESSTHAN expression .)
    $end            reduce using rule 48 (expression -> expression LESSTHAN expression .)
    RBRACES         reduce using rule 48 (expression -> expression LESSTHAN expression .)
    DEFAULT         reduce using rule 48 (expression -> expression LESSTHAN expression .)
    CASE            reduce using rule 48 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 48 (expression -> expression LESSTHAN expression .)
    COLON           reduce using rule 48 (expression -> expression LESSTHAN expression .)
    RSQUAREBRACKET  reduce using rule 48 (expression -> expression LESSTHAN expression .)
    RETURN          reduce using rule 48 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! EQUALS          [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 48 (expression -> expression LESSTHAN expression .) ]


state 83

    (49) expression -> expression EQUALS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 49 (expression -> expression EQUALS expression .)
    PRINT           reduce using rule 49 (expression -> expression EQUALS expression .)
    IF              reduce using rule 49 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 49 (expression -> expression EQUALS expression .)
    SWITCH          reduce using rule 49 (expression -> expression EQUALS expression .)
    LET             reduce using rule 49 (expression -> expression EQUALS expression .)
    VAR             reduce using rule 49 (expression -> expression EQUALS expression .)
    FUNC            reduce using rule 49 (expression -> expression EQUALS expression .)
    $end            reduce using rule 49 (expression -> expression EQUALS expression .)
    RBRACES         reduce using rule 49 (expression -> expression EQUALS expression .)
    DEFAULT         reduce using rule 49 (expression -> expression EQUALS expression .)
    CASE            reduce using rule 49 (expression -> expression EQUALS expression .)
    RPAREN          reduce using rule 49 (expression -> expression EQUALS expression .)
    COLON           reduce using rule 49 (expression -> expression EQUALS expression .)
    RSQUAREBRACKET  reduce using rule 49 (expression -> expression EQUALS expression .)
    RETURN          reduce using rule 49 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression EQUALS expression .) ]
  ! COMMA           [ reduce using rule 49 (expression -> expression EQUALS expression .) ]


state 84

    (50) expression -> expression NOTEQUALS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    PRINT           reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    IF              reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    WHILE           reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    SWITCH          reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    LET             reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    VAR             reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    FUNC            reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    $end            reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    RBRACES         reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    DEFAULT         reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    CASE            reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    RPAREN          reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    COLON           reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    RSQUAREBRACKET  reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    RETURN          reduce using rule 50 (expression -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! EQUALS          [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]
  ! COMMA           [ reduce using rule 50 (expression -> expression NOTEQUALS expression .) ]


state 85

    (51) expression -> expression AND expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 51 (expression -> expression AND expression .)
    PRINT           reduce using rule 51 (expression -> expression AND expression .)
    IF              reduce using rule 51 (expression -> expression AND expression .)
    WHILE           reduce using rule 51 (expression -> expression AND expression .)
    SWITCH          reduce using rule 51 (expression -> expression AND expression .)
    LET             reduce using rule 51 (expression -> expression AND expression .)
    VAR             reduce using rule 51 (expression -> expression AND expression .)
    FUNC            reduce using rule 51 (expression -> expression AND expression .)
    $end            reduce using rule 51 (expression -> expression AND expression .)
    RBRACES         reduce using rule 51 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 51 (expression -> expression AND expression .)
    CASE            reduce using rule 51 (expression -> expression AND expression .)
    RPAREN          reduce using rule 51 (expression -> expression AND expression .)
    COLON           reduce using rule 51 (expression -> expression AND expression .)
    RSQUAREBRACKET  reduce using rule 51 (expression -> expression AND expression .)
    RETURN          reduce using rule 51 (expression -> expression AND expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! NOTEQUALS       [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 51 (expression -> expression AND expression .) ]


state 86

    (52) expression -> expression OR expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 52 (expression -> expression OR expression .)
    PRINT           reduce using rule 52 (expression -> expression OR expression .)
    IF              reduce using rule 52 (expression -> expression OR expression .)
    WHILE           reduce using rule 52 (expression -> expression OR expression .)
    SWITCH          reduce using rule 52 (expression -> expression OR expression .)
    LET             reduce using rule 52 (expression -> expression OR expression .)
    VAR             reduce using rule 52 (expression -> expression OR expression .)
    FUNC            reduce using rule 52 (expression -> expression OR expression .)
    $end            reduce using rule 52 (expression -> expression OR expression .)
    RBRACES         reduce using rule 52 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 52 (expression -> expression OR expression .)
    CASE            reduce using rule 52 (expression -> expression OR expression .)
    RPAREN          reduce using rule 52 (expression -> expression OR expression .)
    COLON           reduce using rule 52 (expression -> expression OR expression .)
    RSQUAREBRACKET  reduce using rule 52 (expression -> expression OR expression .)
    RETURN          reduce using rule 52 (expression -> expression OR expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! NOTEQUALS       [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 52 (expression -> expression OR expression .) ]


state 87

    (53) expression -> expression COMMA expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        reduce using rule 53 (expression -> expression COMMA expression .)
    PRINT           reduce using rule 53 (expression -> expression COMMA expression .)
    IF              reduce using rule 53 (expression -> expression COMMA expression .)
    WHILE           reduce using rule 53 (expression -> expression COMMA expression .)
    SWITCH          reduce using rule 53 (expression -> expression COMMA expression .)
    LET             reduce using rule 53 (expression -> expression COMMA expression .)
    VAR             reduce using rule 53 (expression -> expression COMMA expression .)
    FUNC            reduce using rule 53 (expression -> expression COMMA expression .)
    $end            reduce using rule 53 (expression -> expression COMMA expression .)
    RBRACES         reduce using rule 53 (expression -> expression COMMA expression .)
    DEFAULT         reduce using rule 53 (expression -> expression COMMA expression .)
    CASE            reduce using rule 53 (expression -> expression COMMA expression .)
    RPAREN          reduce using rule 53 (expression -> expression COMMA expression .)
    COLON           reduce using rule 53 (expression -> expression COMMA expression .)
    RSQUAREBRACKET  reduce using rule 53 (expression -> expression COMMA expression .)
    RETURN          reduce using rule 53 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! PLUS            [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! NOTEQUALS       [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 53 (expression -> expression COMMA expression .) ]


state 88

    (54) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RSQUAREBRACKET  reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 54 (expression -> LPAREN expression RPAREN .)


state 89

    (16) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES
    (17) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statements                     shift and go to state 102
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 90

    (18) while_statement -> WHILE LPAREN expression RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statements                     shift and go to state 103
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 91

    (19) switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .

    VARIABLE        reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    PRINT           reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IF              reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    WHILE           reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    SWITCH          reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    LET             reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    VAR             reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FUNC            reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    $end            reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RBRACES         reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    DEFAULT         reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    CASE            reduce using rule 19 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)


state 92

    (20) caso -> CASE expression . COLON cuerpo_caso caso
    (21) caso -> CASE expression . COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    COLON           shift and go to state 104
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 93

    (29) function_parameters -> VARIABLE COLON . data_type
    (35) data_type -> . INTEGER
    (36) data_type -> . STRING
    (37) data_type -> . BOOLEAN
    (38) data_type -> . DOUBLE
    (39) data_type -> . FLOAT
    (40) data_type -> . INT

    INTEGER         shift and go to state 106
    STRING          shift and go to state 107
    BOOLEAN         shift and go to state 108
    DOUBLE          shift and go to state 109
    FLOAT           shift and go to state 110
    INT             shift and go to state 111

    data_type                      shift and go to state 105

state 94

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN . function_return_type LBRACES expression return_statement RBRACES
    (30) function_return_type -> . ARROW data_type
    (31) function_return_type -> . empty
    (67) empty -> .

    ARROW           shift and go to state 113
    LBRACES         reduce using rule 67 (empty -> .)

    function_return_type           shift and go to state 112
    empty                          shift and go to state 114

state 95

    (28) function_parameters -> function_parameters COMMA . VARIABLE COLON data_type

    VARIABLE        shift and go to state 115


state 96

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN . function_return_type LBRACES expression return_statement RBRACES
    (30) function_return_type -> . ARROW data_type
    (31) function_return_type -> . empty
    (67) empty -> .

    ARROW           shift and go to state 113
    LBRACES         reduce using rule 67 (empty -> .)

    empty                          shift and go to state 114
    function_return_type           shift and go to state 116

state 97

    (11) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .

    VARIABLE        reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    PRINT           reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IF              reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    WHILE           reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    SWITCH          reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    LET             reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    VAR             reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FUNC            reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    $end            reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RBRACES         reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    DEFAULT         reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    CASE            reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)


state 98

    (14) collection_block -> LSQUAREBRACKET . expression RSQUAREBRACKET
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    RSQUAREBRACKET  reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 117
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 99

    (12) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .

    VARIABLE        reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    PRINT           reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    IF              reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    WHILE           reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    SWITCH          reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    LET             reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    VAR             reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    FUNC            reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    $end            reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    RBRACES         reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    DEFAULT         reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    CASE            reduce using rule 12 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)


state 100

    (63) function_call -> VARIABLE LPAREN function_arguments RPAREN .

    PLUS            reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MINUS           reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MULTIPLY        reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DIVIDE          reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    GREATERTHAN     reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LESSTHAN        reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    EQUALS          reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    NOTEQUALS       reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    AND             reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    OR              reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COMMA           reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VARIABLE        reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PRINT           reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IF              reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    WHILE           reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    SWITCH          reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LET             reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VAR             reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FUNC            reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    $end            reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RBRACES         reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DEFAULT         reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    CASE            reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RPAREN          reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COLON           reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RSQUAREBRACKET  reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RETURN          reduce using rule 63 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)


state 101

    (64) function_arguments -> function_arguments COMMA . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)

    expression                     shift and go to state 118
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 102

    (16) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES
    (17) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    RBRACES         shift and go to state 119
    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statement                      shift and go to state 21
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 103

    (18) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    RBRACES         shift and go to state 120
    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statement                      shift and go to state 21
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 104

    (20) caso -> CASE expression COLON . cuerpo_caso caso
    (21) caso -> CASE expression COLON . cuerpo_caso DEFAULT COLON cuerpo_caso
    (22) cuerpo_caso -> . expression
    (23) cuerpo_caso -> . statement
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 124
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    DEFAULT         reduce using rule 67 (empty -> .)
    CASE            reduce using rule 67 (empty -> .)
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    expression                     shift and go to state 121
    cuerpo_caso                    shift and go to state 122
    statement                      shift and go to state 123
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 105

    (29) function_parameters -> VARIABLE COLON data_type .

    RPAREN          reduce using rule 29 (function_parameters -> VARIABLE COLON data_type .)
    COMMA           reduce using rule 29 (function_parameters -> VARIABLE COLON data_type .)


state 106

    (35) data_type -> INTEGER .

    RPAREN          reduce using rule 35 (data_type -> INTEGER .)
    COMMA           reduce using rule 35 (data_type -> INTEGER .)
    LBRACES         reduce using rule 35 (data_type -> INTEGER .)


state 107

    (36) data_type -> STRING .

    RPAREN          reduce using rule 36 (data_type -> STRING .)
    COMMA           reduce using rule 36 (data_type -> STRING .)
    LBRACES         reduce using rule 36 (data_type -> STRING .)


state 108

    (37) data_type -> BOOLEAN .

    RPAREN          reduce using rule 37 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 37 (data_type -> BOOLEAN .)
    LBRACES         reduce using rule 37 (data_type -> BOOLEAN .)


state 109

    (38) data_type -> DOUBLE .

    RPAREN          reduce using rule 38 (data_type -> DOUBLE .)
    COMMA           reduce using rule 38 (data_type -> DOUBLE .)
    LBRACES         reduce using rule 38 (data_type -> DOUBLE .)


state 110

    (39) data_type -> FLOAT .

    RPAREN          reduce using rule 39 (data_type -> FLOAT .)
    COMMA           reduce using rule 39 (data_type -> FLOAT .)
    LBRACES         reduce using rule 39 (data_type -> FLOAT .)


state 111

    (40) data_type -> INT .

    RPAREN          reduce using rule 40 (data_type -> INT .)
    COMMA           reduce using rule 40 (data_type -> INT .)
    LBRACES         reduce using rule 40 (data_type -> INT .)


state 112

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type . LBRACES expression return_statement RBRACES

    LBRACES         shift and go to state 125


state 113

    (30) function_return_type -> ARROW . data_type
    (35) data_type -> . INTEGER
    (36) data_type -> . STRING
    (37) data_type -> . BOOLEAN
    (38) data_type -> . DOUBLE
    (39) data_type -> . FLOAT
    (40) data_type -> . INT

    INTEGER         shift and go to state 106
    STRING          shift and go to state 107
    BOOLEAN         shift and go to state 108
    DOUBLE          shift and go to state 109
    FLOAT           shift and go to state 110
    INT             shift and go to state 111

    data_type                      shift and go to state 126

state 114

    (31) function_return_type -> empty .

    LBRACES         reduce using rule 31 (function_return_type -> empty .)


state 115

    (28) function_parameters -> function_parameters COMMA VARIABLE . COLON data_type

    COLON           shift and go to state 127


state 116

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type . LBRACES expression return_statement RBRACES

    LBRACES         shift and go to state 128


state 117

    (14) collection_block -> LSQUAREBRACKET expression . RSQUAREBRACKET
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    RSQUAREBRACKET  shift and go to state 129
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 118

    (64) function_arguments -> function_arguments COMMA expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 64 (function_arguments -> function_arguments COMMA expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61

  ! COMMA           [ reduce using rule 64 (function_arguments -> function_arguments COMMA expression .) ]


state 119

    (16) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .
    (17) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES . ELSE LBRACES statements RBRACES

    VARIABLE        reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 16 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    ELSE            shift and go to state 130


state 120

    (18) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .

    VARIABLE        reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 18 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)


state 121

    (22) cuerpo_caso -> expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    DEFAULT         reduce using rule 22 (cuerpo_caso -> expression .)
    CASE            reduce using rule 22 (cuerpo_caso -> expression .)
    RBRACES         reduce using rule 22 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 122

    (20) caso -> CASE expression COLON cuerpo_caso . caso
    (21) caso -> CASE expression COLON cuerpo_caso . DEFAULT COLON cuerpo_caso
    (20) caso -> . CASE expression COLON cuerpo_caso caso
    (21) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    DEFAULT         shift and go to state 132
    CASE            shift and go to state 68

    caso                           shift and go to state 131

state 123

    (23) cuerpo_caso -> statement .

    DEFAULT         reduce using rule 23 (cuerpo_caso -> statement .)
    CASE            reduce using rule 23 (cuerpo_caso -> statement .)
    RBRACES         reduce using rule 23 (cuerpo_caso -> statement .)


state 124

    (56) expression -> VARIABLE .
    (63) function_call -> VARIABLE . LPAREN function_arguments RPAREN
    (13) assignment_statement -> VARIABLE . ASSIGN expression

    PLUS            reduce using rule 56 (expression -> VARIABLE .)
    MINUS           reduce using rule 56 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 56 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 56 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 56 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 56 (expression -> VARIABLE .)
    EQUALS          reduce using rule 56 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 56 (expression -> VARIABLE .)
    AND             reduce using rule 56 (expression -> VARIABLE .)
    OR              reduce using rule 56 (expression -> VARIABLE .)
    COMMA           reduce using rule 56 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 56 (expression -> VARIABLE .)
    CASE            reduce using rule 56 (expression -> VARIABLE .)
    RBRACES         reduce using rule 56 (expression -> VARIABLE .)
    LPAREN          shift and go to state 50
    ASSIGN          shift and go to state 23


state 125

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES . expression return_statement RBRACES
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

    expression                     shift and go to state 133
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 126

    (30) function_return_type -> ARROW data_type .

    LBRACES         reduce using rule 30 (function_return_type -> ARROW data_type .)


state 127

    (28) function_parameters -> function_parameters COMMA VARIABLE COLON . data_type
    (35) data_type -> . INTEGER
    (36) data_type -> . STRING
    (37) data_type -> . BOOLEAN
    (38) data_type -> . DOUBLE
    (39) data_type -> . FLOAT
    (40) data_type -> . INT

    INTEGER         shift and go to state 106
    STRING          shift and go to state 107
    BOOLEAN         shift and go to state 108
    DOUBLE          shift and go to state 109
    FLOAT           shift and go to state 110
    INT             shift and go to state 111

    data_type                      shift and go to state 134

state 128

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES . expression return_statement RBRACES
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    RETURN          reduce using rule 67 (empty -> .)

    empty                          shift and go to state 37
    expression                     shift and go to state 135
    type                           shift and go to state 35
    function_call                  shift and go to state 36

state 129

    (14) collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .

    VARIABLE        reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    PRINT           reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    IF              reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    WHILE           reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    SWITCH          reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    LET             reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    VAR             reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    FUNC            reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    $end            reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    RBRACES         reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    DEFAULT         reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    CASE            reduce using rule 14 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)


state 130

    (17) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE . LBRACES statements RBRACES

    LBRACES         shift and go to state 136


state 131

    (20) caso -> CASE expression COLON cuerpo_caso caso .

    RBRACES         reduce using rule 20 (caso -> CASE expression COLON cuerpo_caso caso .)


state 132

    (21) caso -> CASE expression COLON cuerpo_caso DEFAULT . COLON cuerpo_caso

    COLON           shift and go to state 137


state 133

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression . return_statement RBRACES
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression
    (32) return_statement -> . RETURN expression

    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61
    RETURN          shift and go to state 139

    return_statement               shift and go to state 138

state 134

    (28) function_parameters -> function_parameters COMMA VARIABLE COLON data_type .

    RPAREN          reduce using rule 28 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)
    COMMA           reduce using rule 28 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)


state 135

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression . return_statement RBRACES
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression
    (32) return_statement -> . RETURN expression

    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61
    RETURN          shift and go to state 139

    return_statement               shift and go to state 140

state 136

    (17) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statements                     shift and go to state 141
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 137

    (21) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON . cuerpo_caso
    (22) cuerpo_caso -> . expression
    (23) cuerpo_caso -> . statement
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 124
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    expression                     shift and go to state 121
    cuerpo_caso                    shift and go to state 142
    statement                      shift and go to state 123
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 138

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement . RBRACES

    RBRACES         shift and go to state 143


state 139

    (32) return_statement -> RETURN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression GREATERTHAN expression
    (48) expression -> . expression LESSTHAN expression
    (49) expression -> . expression EQUALS expression
    (50) expression -> . expression NOTEQUALS expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression COMMA expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . NOT expression
    (56) expression -> . VARIABLE
    (57) expression -> . type
    (58) expression -> . function_call
    (59) expression -> . empty
    (60) type -> . BOOL
    (61) type -> . DECIMAL
    (62) type -> . WSTRING
    (63) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (67) empty -> .

    LPAREN          shift and go to state 33
    NOT             shift and go to state 34
    VARIABLE        shift and go to state 31
    BOOL            shift and go to state 38
    DECIMAL         shift and go to state 39
    WSTRING         shift and go to state 40
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    MULTIPLY        reduce using rule 67 (empty -> .)
    DIVIDE          reduce using rule 67 (empty -> .)
    GREATERTHAN     reduce using rule 67 (empty -> .)
    LESSTHAN        reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    NOTEQUALS       reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    RBRACES         reduce using rule 67 (empty -> .)

    expression                     shift and go to state 144
    type                           shift and go to state 35
    function_call                  shift and go to state 36
    empty                          shift and go to state 37

state 140

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement . RBRACES

    RBRACES         shift and go to state 145


state 141

    (17) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) statement -> . switch_statement
    (10) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (11) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (12) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) assignment_statement -> . VARIABLE ASSIGN expression
    (15) print_statement -> . PRINT LPAREN expression RPAREN
    (16) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (24) function_general -> . function_declaration
    (25) function_general -> . function_declaration_empty
    (18) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (19) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (33) variable_declarator -> . LET
    (34) variable_declarator -> . VAR
    (26) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (27) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    RBRACES         shift and go to state 146
    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    FUNC            shift and go to state 20

    statement                      shift and go to state 21
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    switch_statement               shift and go to state 9
    variable_declarator            shift and go to state 10
    function_declaration           shift and go to state 14
    function_declaration_empty     shift and go to state 15

state 142

    (21) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .

    RBRACES         reduce using rule 21 (caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .)


state 143

    (26) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .

    VARIABLE        reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    PRINT           reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    IF              reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    WHILE           reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    SWITCH          reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    LET             reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    VAR             reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    FUNC            reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    $end            reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    RBRACES         reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    DEFAULT         reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    CASE            reduce using rule 26 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)


state 144

    (32) return_statement -> RETURN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . GREATERTHAN expression
    (48) expression -> expression . LESSTHAN expression
    (49) expression -> expression . EQUALS expression
    (50) expression -> expression . NOTEQUALS expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . COMMA expression

    RBRACES         reduce using rule 32 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    GREATERTHAN     shift and go to state 55
    LESSTHAN        shift and go to state 56
    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    COMMA           shift and go to state 61


state 145

    (27) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .

    VARIABLE        reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    PRINT           reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    IF              reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    WHILE           reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    SWITCH          reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    LET             reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    VAR             reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    FUNC            reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    $end            reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    RBRACES         reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    DEFAULT         reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    CASE            reduce using rule 27 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)


state 146

    (17) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .

    VARIABLE        reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    PRINT           reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IF              reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    WHILE           reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    LET             reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VAR             reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FUNC            reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    $end            reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    CASE            reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 23 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 29 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 34 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 51 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 52 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 53 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 54 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 55 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 56 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 57 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 58 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 59 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 60 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 63 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 77 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 77 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 77 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 78 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 78 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 79 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 79 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 80 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 81 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 81 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 82 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 82 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 83 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 83 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 84 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 84 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 84 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 87 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 118 resolved as shift
WARNING: reduce/reduce conflict in state 76 resolved using rule (expression -> empty)
WARNING: rejected rule (function_arguments -> empty) in state 76
WARNING: Rule (function_arguments -> empty) is never reduced
