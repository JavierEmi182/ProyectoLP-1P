Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CALLMETHOD
    CASE
    CHARACTER
    CLASS
    COMMENT
    CONTINUE
    DEFAULT
    DICTIONARYTYPE
    ENUM
    FALSE
    FOR
    GUARD
    IMPORT
    IN
    INIT
    MINUSONE
    NUMBER
    OPTIONALVARIABLE
    PLUSONE
    PRIVATE
    PUBLIC
    RANGE
    REPEAT
    SET
    SETVARIABLE
    STATIC
    STRUCT
    SWITCH
    TRUE
    TYPEALIAS
    VALUESTYPE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> function_declaration
Rule 8     assignment_statement -> variable_declarator VARIABLE ASSIGN expression
Rule 9     assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
Rule 10    collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET
Rule 11    print_statement -> PRINT LPAREN expression RPAREN
Rule 12    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES
Rule 13    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
Rule 14    function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
Rule 15    function_parameters -> function_parameters COMMA VARIABLE COLON data_type
Rule 16    function_parameters -> VARIABLE COLON data_type
Rule 17    function_parameters -> empty
Rule 18    function_return_type -> ARROW data_type
Rule 19    function_return_type -> empty
Rule 20    return_statement -> RETURN expression
Rule 21    variable_declarator -> LET
Rule 22    variable_declarator -> VAR
Rule 23    data_type -> INTEGER
Rule 24    data_type -> STRING
Rule 25    data_type -> BOOLEAN
Rule 26    data_type -> DOUBLE
Rule 27    data_type -> FLOAT
Rule 28    data_type -> INT
Rule 29    data_collection_type -> COLLECTIONTYPE
Rule 30    break_statement -> BREAK
Rule 31    expression -> expression PLUS expression
Rule 32    expression -> expression MINUS expression
Rule 33    expression -> expression MULTIPLY expression
Rule 34    expression -> expression DIVIDE expression
Rule 35    expression -> expression GREATERTHAN expression
Rule 36    expression -> expression LESSTHAN expression
Rule 37    expression -> expression EQUALS expression
Rule 38    expression -> expression NOTEQUALS expression
Rule 39    expression -> expression AND expression
Rule 40    expression -> expression OR expression
Rule 41    expression -> expression COMMA expression
Rule 42    expression -> LPAREN expression RPAREN
Rule 43    expression -> NOT expression
Rule 44    expression -> VARIABLE
Rule 45    expression -> type
Rule 46    expression -> function_call
Rule 47    expression -> empty
Rule 48    type -> BOOL
Rule 49    type -> DECIMAL
Rule 50    type -> WSTRING
Rule 51    function_call -> VARIABLE LPAREN function_arguments RPAREN
Rule 52    function_arguments -> function_arguments COMMA expression
Rule 53    function_arguments -> expression
Rule 54    function_arguments -> empty
Rule 55    empty -> <empty>

Terminals, with rules where they appear

AND                  : 39
ARRAY                : 
ARROW                : 18
ASSIGN               : 8 9
BOOL                 : 48
BOOLEAN              : 25
BREAK                : 30
CALLMETHOD           : 
CASE                 : 
CHARACTER            : 
CLASS                : 
COLLECTIONTYPE       : 29
COLON                : 9 15 16
COMMA                : 15 41 52
COMMENT              : 
CONTINUE             : 
DECIMAL              : 49
DEFAULT              : 
DICTIONARYTYPE       : 
DIVIDE               : 34
DOUBLE               : 26
ELSE                 : 13
ENUM                 : 
EQUALS               : 37
FALSE                : 
FLOAT                : 27
FOR                  : 
FUNC                 : 14
GREATERTHAN          : 35
GUARD                : 
IF                   : 12 13
IMPORT               : 
IN                   : 
INIT                 : 
INT                  : 28
INTEGER              : 23
LBRACES              : 12 13 13 14
LESSTHAN             : 36
LET                  : 21
LPAREN               : 11 12 13 14 42 51
LSQUAREBRACKET       : 10
MINUS                : 32
MINUSONE             : 
MULTIPLY             : 33
NOT                  : 43
NOTEQUALS            : 38
NUMBER               : 
OPTIONALVARIABLE     : 
OR                   : 40
PLUS                 : 31
PLUSONE              : 
PRINT                : 11
PRIVATE              : 
PUBLIC               : 
RANGE                : 
RBRACES              : 12 13 13 14
REPEAT               : 
RETURN               : 20
RPAREN               : 11 12 13 14 42 51
RSQUAREBRACKET       : 10
SET                  : 
SETVARIABLE          : 
STATIC               : 
STRING               : 24
STRUCT               : 
SWITCH               : 
TRUE                 : 
TYPEALIAS            : 
VALUESTYPE           : 
VAR                  : 22
VARIABLE             : 8 9 14 15 16 44 51
WHILE                : 
WSTRING              : 50
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4
break_statement      : 
collection_block     : 9
data_collection_type : 9
data_type            : 15 16 18
empty                : 17 19 47 54
expression           : 8 10 11 12 13 14 20 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 43 52 53
function_arguments   : 51 52
function_call        : 46
function_declaration : 7
function_parameters  : 14 15
function_return_type : 14
if_statement         : 6
print_statement      : 5
program              : 0
return_statement     : 14
statement            : 2 3
statements           : 1 2 12 13 13
type                 : 45
variable_declarator  : 8 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_declaration
    (8) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (9) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) print_statement -> . PRINT LPAREN expression RPAREN
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (14) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) variable_declarator -> . LET
    (22) variable_declarator -> . VAR

    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FUNC            shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_declaration           shift and go to state 7
    variable_declarator            shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_declaration
    (8) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (9) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) print_statement -> . PRINT LPAREN expression RPAREN
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (14) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) variable_declarator -> . LET
    (22) variable_declarator -> . VAR

    $end            reduce using rule 1 (program -> statements .)
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FUNC            shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13

    statement                      shift and go to state 14
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_declaration           shift and go to state 7
    variable_declarator            shift and go to state 8

state 3

    (3) statements -> statement .

    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACES         reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment_statement .

    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    LET             reduce using rule 4 (statement -> assignment_statement .)
    VAR             reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACES         reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> print_statement .

    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    FUNC            reduce using rule 5 (statement -> print_statement .)
    LET             reduce using rule 5 (statement -> print_statement .)
    VAR             reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACES         reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    FUNC            reduce using rule 6 (statement -> if_statement .)
    LET             reduce using rule 6 (statement -> if_statement .)
    VAR             reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACES         reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> function_declaration .

    PRINT           reduce using rule 7 (statement -> function_declaration .)
    IF              reduce using rule 7 (statement -> function_declaration .)
    FUNC            reduce using rule 7 (statement -> function_declaration .)
    LET             reduce using rule 7 (statement -> function_declaration .)
    VAR             reduce using rule 7 (statement -> function_declaration .)
    $end            reduce using rule 7 (statement -> function_declaration .)
    RBRACES         reduce using rule 7 (statement -> function_declaration .)


state 8

    (8) assignment_statement -> variable_declarator . VARIABLE ASSIGN expression
    (9) assignment_statement -> variable_declarator . VARIABLE COLON data_collection_type ASSIGN collection_block

    VARIABLE        shift and go to state 15


state 9

    (11) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 16


state 10

    (12) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LPAREN          shift and go to state 17


state 11

    (14) function_declaration -> FUNC . VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 18


state 12

    (21) variable_declarator -> LET .

    VARIABLE        reduce using rule 21 (variable_declarator -> LET .)


state 13

    (22) variable_declarator -> VAR .

    VARIABLE        reduce using rule 22 (variable_declarator -> VAR .)


state 14

    (2) statements -> statements statement .

    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACES         reduce using rule 2 (statements -> statements statement .)


state 15

    (8) assignment_statement -> variable_declarator VARIABLE . ASSIGN expression
    (9) assignment_statement -> variable_declarator VARIABLE . COLON data_collection_type ASSIGN collection_block

    ASSIGN          shift and go to state 19
    COLON           shift and go to state 20


state 16

    (11) print_statement -> PRINT LPAREN . expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    RPAREN          reduce using rule 55 (empty -> .)
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    expression                     shift and go to state 22
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 17

    (12) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    RPAREN          reduce using rule 55 (empty -> .)
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    expression                     shift and go to state 31
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 18

    (14) function_declaration -> FUNC VARIABLE . LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES

    LPAREN          shift and go to state 32


state 19

    (8) assignment_statement -> variable_declarator VARIABLE ASSIGN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)

    expression                     shift and go to state 33
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 20

    (9) assignment_statement -> variable_declarator VARIABLE COLON . data_collection_type ASSIGN collection_block
    (29) data_collection_type -> . COLLECTIONTYPE

    COLLECTIONTYPE  shift and go to state 35

    data_collection_type           shift and go to state 34

state 21

    (42) expression -> LPAREN . expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    RPAREN          reduce using rule 55 (empty -> .)
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    expression                     shift and go to state 36
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 22

    (11) print_statement -> PRINT LPAREN expression . RPAREN
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

    RPAREN          shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48


state 23

    (43) expression -> NOT . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 49
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 24

    (44) expression -> VARIABLE .
    (51) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    RPAREN          reduce using rule 44 (expression -> VARIABLE .)
    PLUS            reduce using rule 44 (expression -> VARIABLE .)
    MINUS           reduce using rule 44 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 44 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 44 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 44 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 44 (expression -> VARIABLE .)
    EQUALS          reduce using rule 44 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 44 (expression -> VARIABLE .)
    AND             reduce using rule 44 (expression -> VARIABLE .)
    OR              reduce using rule 44 (expression -> VARIABLE .)
    COMMA           reduce using rule 44 (expression -> VARIABLE .)
    PRINT           reduce using rule 44 (expression -> VARIABLE .)
    IF              reduce using rule 44 (expression -> VARIABLE .)
    FUNC            reduce using rule 44 (expression -> VARIABLE .)
    LET             reduce using rule 44 (expression -> VARIABLE .)
    VAR             reduce using rule 44 (expression -> VARIABLE .)
    $end            reduce using rule 44 (expression -> VARIABLE .)
    RBRACES         reduce using rule 44 (expression -> VARIABLE .)
    RSQUAREBRACKET  reduce using rule 44 (expression -> VARIABLE .)
    RETURN          reduce using rule 44 (expression -> VARIABLE .)
    LPAREN          shift and go to state 50


state 25

    (45) expression -> type .

    RPAREN          reduce using rule 45 (expression -> type .)
    PLUS            reduce using rule 45 (expression -> type .)
    MINUS           reduce using rule 45 (expression -> type .)
    MULTIPLY        reduce using rule 45 (expression -> type .)
    DIVIDE          reduce using rule 45 (expression -> type .)
    GREATERTHAN     reduce using rule 45 (expression -> type .)
    LESSTHAN        reduce using rule 45 (expression -> type .)
    EQUALS          reduce using rule 45 (expression -> type .)
    NOTEQUALS       reduce using rule 45 (expression -> type .)
    AND             reduce using rule 45 (expression -> type .)
    OR              reduce using rule 45 (expression -> type .)
    COMMA           reduce using rule 45 (expression -> type .)
    PRINT           reduce using rule 45 (expression -> type .)
    IF              reduce using rule 45 (expression -> type .)
    FUNC            reduce using rule 45 (expression -> type .)
    LET             reduce using rule 45 (expression -> type .)
    VAR             reduce using rule 45 (expression -> type .)
    $end            reduce using rule 45 (expression -> type .)
    RBRACES         reduce using rule 45 (expression -> type .)
    RSQUAREBRACKET  reduce using rule 45 (expression -> type .)
    RETURN          reduce using rule 45 (expression -> type .)


state 26

    (46) expression -> function_call .

    RPAREN          reduce using rule 46 (expression -> function_call .)
    PLUS            reduce using rule 46 (expression -> function_call .)
    MINUS           reduce using rule 46 (expression -> function_call .)
    MULTIPLY        reduce using rule 46 (expression -> function_call .)
    DIVIDE          reduce using rule 46 (expression -> function_call .)
    GREATERTHAN     reduce using rule 46 (expression -> function_call .)
    LESSTHAN        reduce using rule 46 (expression -> function_call .)
    EQUALS          reduce using rule 46 (expression -> function_call .)
    NOTEQUALS       reduce using rule 46 (expression -> function_call .)
    AND             reduce using rule 46 (expression -> function_call .)
    OR              reduce using rule 46 (expression -> function_call .)
    COMMA           reduce using rule 46 (expression -> function_call .)
    PRINT           reduce using rule 46 (expression -> function_call .)
    IF              reduce using rule 46 (expression -> function_call .)
    FUNC            reduce using rule 46 (expression -> function_call .)
    LET             reduce using rule 46 (expression -> function_call .)
    VAR             reduce using rule 46 (expression -> function_call .)
    $end            reduce using rule 46 (expression -> function_call .)
    RBRACES         reduce using rule 46 (expression -> function_call .)
    RSQUAREBRACKET  reduce using rule 46 (expression -> function_call .)
    RETURN          reduce using rule 46 (expression -> function_call .)


state 27

    (47) expression -> empty .

    RPAREN          reduce using rule 47 (expression -> empty .)
    PLUS            reduce using rule 47 (expression -> empty .)
    MINUS           reduce using rule 47 (expression -> empty .)
    MULTIPLY        reduce using rule 47 (expression -> empty .)
    DIVIDE          reduce using rule 47 (expression -> empty .)
    GREATERTHAN     reduce using rule 47 (expression -> empty .)
    LESSTHAN        reduce using rule 47 (expression -> empty .)
    EQUALS          reduce using rule 47 (expression -> empty .)
    NOTEQUALS       reduce using rule 47 (expression -> empty .)
    AND             reduce using rule 47 (expression -> empty .)
    OR              reduce using rule 47 (expression -> empty .)
    COMMA           reduce using rule 47 (expression -> empty .)
    PRINT           reduce using rule 47 (expression -> empty .)
    IF              reduce using rule 47 (expression -> empty .)
    FUNC            reduce using rule 47 (expression -> empty .)
    LET             reduce using rule 47 (expression -> empty .)
    VAR             reduce using rule 47 (expression -> empty .)
    $end            reduce using rule 47 (expression -> empty .)
    RBRACES         reduce using rule 47 (expression -> empty .)
    RSQUAREBRACKET  reduce using rule 47 (expression -> empty .)
    RETURN          reduce using rule 47 (expression -> empty .)


state 28

    (48) type -> BOOL .

    RPAREN          reduce using rule 48 (type -> BOOL .)
    PLUS            reduce using rule 48 (type -> BOOL .)
    MINUS           reduce using rule 48 (type -> BOOL .)
    MULTIPLY        reduce using rule 48 (type -> BOOL .)
    DIVIDE          reduce using rule 48 (type -> BOOL .)
    GREATERTHAN     reduce using rule 48 (type -> BOOL .)
    LESSTHAN        reduce using rule 48 (type -> BOOL .)
    EQUALS          reduce using rule 48 (type -> BOOL .)
    NOTEQUALS       reduce using rule 48 (type -> BOOL .)
    AND             reduce using rule 48 (type -> BOOL .)
    OR              reduce using rule 48 (type -> BOOL .)
    COMMA           reduce using rule 48 (type -> BOOL .)
    PRINT           reduce using rule 48 (type -> BOOL .)
    IF              reduce using rule 48 (type -> BOOL .)
    FUNC            reduce using rule 48 (type -> BOOL .)
    LET             reduce using rule 48 (type -> BOOL .)
    VAR             reduce using rule 48 (type -> BOOL .)
    $end            reduce using rule 48 (type -> BOOL .)
    RBRACES         reduce using rule 48 (type -> BOOL .)
    RSQUAREBRACKET  reduce using rule 48 (type -> BOOL .)
    RETURN          reduce using rule 48 (type -> BOOL .)


state 29

    (49) type -> DECIMAL .

    RPAREN          reduce using rule 49 (type -> DECIMAL .)
    PLUS            reduce using rule 49 (type -> DECIMAL .)
    MINUS           reduce using rule 49 (type -> DECIMAL .)
    MULTIPLY        reduce using rule 49 (type -> DECIMAL .)
    DIVIDE          reduce using rule 49 (type -> DECIMAL .)
    GREATERTHAN     reduce using rule 49 (type -> DECIMAL .)
    LESSTHAN        reduce using rule 49 (type -> DECIMAL .)
    EQUALS          reduce using rule 49 (type -> DECIMAL .)
    NOTEQUALS       reduce using rule 49 (type -> DECIMAL .)
    AND             reduce using rule 49 (type -> DECIMAL .)
    OR              reduce using rule 49 (type -> DECIMAL .)
    COMMA           reduce using rule 49 (type -> DECIMAL .)
    PRINT           reduce using rule 49 (type -> DECIMAL .)
    IF              reduce using rule 49 (type -> DECIMAL .)
    FUNC            reduce using rule 49 (type -> DECIMAL .)
    LET             reduce using rule 49 (type -> DECIMAL .)
    VAR             reduce using rule 49 (type -> DECIMAL .)
    $end            reduce using rule 49 (type -> DECIMAL .)
    RBRACES         reduce using rule 49 (type -> DECIMAL .)
    RSQUAREBRACKET  reduce using rule 49 (type -> DECIMAL .)
    RETURN          reduce using rule 49 (type -> DECIMAL .)


state 30

    (50) type -> WSTRING .

    RPAREN          reduce using rule 50 (type -> WSTRING .)
    PLUS            reduce using rule 50 (type -> WSTRING .)
    MINUS           reduce using rule 50 (type -> WSTRING .)
    MULTIPLY        reduce using rule 50 (type -> WSTRING .)
    DIVIDE          reduce using rule 50 (type -> WSTRING .)
    GREATERTHAN     reduce using rule 50 (type -> WSTRING .)
    LESSTHAN        reduce using rule 50 (type -> WSTRING .)
    EQUALS          reduce using rule 50 (type -> WSTRING .)
    NOTEQUALS       reduce using rule 50 (type -> WSTRING .)
    AND             reduce using rule 50 (type -> WSTRING .)
    OR              reduce using rule 50 (type -> WSTRING .)
    COMMA           reduce using rule 50 (type -> WSTRING .)
    PRINT           reduce using rule 50 (type -> WSTRING .)
    IF              reduce using rule 50 (type -> WSTRING .)
    FUNC            reduce using rule 50 (type -> WSTRING .)
    LET             reduce using rule 50 (type -> WSTRING .)
    VAR             reduce using rule 50 (type -> WSTRING .)
    $end            reduce using rule 50 (type -> WSTRING .)
    RBRACES         reduce using rule 50 (type -> WSTRING .)
    RSQUAREBRACKET  reduce using rule 50 (type -> WSTRING .)
    RETURN          reduce using rule 50 (type -> WSTRING .)


state 31

    (12) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES
    (13) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

    RPAREN          shift and go to state 51
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48


state 32

    (14) function_declaration -> FUNC VARIABLE LPAREN . function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (15) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (16) function_parameters -> . VARIABLE COLON data_type
    (17) function_parameters -> . empty
    (55) empty -> .

    VARIABLE        shift and go to state 52
    RPAREN          reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    function_parameters            shift and go to state 53
    empty                          shift and go to state 54

state 33

    (8) assignment_statement -> variable_declarator VARIABLE ASSIGN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

    PRINT           reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IF              reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    LET             reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    VAR             reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    $end            reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 8 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48


state 34

    (9) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type . ASSIGN collection_block

    ASSIGN          shift and go to state 55


state 35

    (29) data_collection_type -> COLLECTIONTYPE .

    ASSIGN          reduce using rule 29 (data_collection_type -> COLLECTIONTYPE .)


state 36

    (42) expression -> LPAREN expression . RPAREN
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

    RPAREN          shift and go to state 56
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48


state 37

    (11) print_statement -> PRINT LPAREN expression RPAREN .

    PRINT           reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUNC            reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)
    LET             reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACES         reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN .)


state 38

    (31) expression -> expression PLUS . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 57
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 39

    (32) expression -> expression MINUS . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 58
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 40

    (33) expression -> expression MULTIPLY . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 59
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 41

    (34) expression -> expression DIVIDE . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 60
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 42

    (35) expression -> expression GREATERTHAN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 61
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 43

    (36) expression -> expression LESSTHAN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 62
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 44

    (37) expression -> expression EQUALS . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 63
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 45

    (38) expression -> expression NOTEQUALS . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 64
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 46

    (39) expression -> expression AND . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 65
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 47

    (40) expression -> expression OR . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 66
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 48

    (41) expression -> expression COMMA . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    FUNC            reduce using rule 55 (empty -> .)
    LET             reduce using rule 55 (empty -> .)
    VAR             reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 67
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 49

    (43) expression -> NOT expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 43 (expression -> NOT expression .)
    PRINT           reduce using rule 43 (expression -> NOT expression .)
    IF              reduce using rule 43 (expression -> NOT expression .)
    FUNC            reduce using rule 43 (expression -> NOT expression .)
    LET             reduce using rule 43 (expression -> NOT expression .)
    VAR             reduce using rule 43 (expression -> NOT expression .)
    $end            reduce using rule 43 (expression -> NOT expression .)
    RBRACES         reduce using rule 43 (expression -> NOT expression .)
    RSQUAREBRACKET  reduce using rule 43 (expression -> NOT expression .)
    RETURN          reduce using rule 43 (expression -> NOT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 43 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 43 (expression -> NOT expression .) ]
  ! NOTEQUALS       [ reduce using rule 43 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 43 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 43 (expression -> NOT expression .) ]


state 50

    (51) function_call -> VARIABLE LPAREN . function_arguments RPAREN
    (52) function_arguments -> . function_arguments COMMA expression
    (53) function_arguments -> . expression
    (54) function_arguments -> . empty
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (55) empty -> .
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    RPAREN          reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30

    function_arguments             shift and go to state 68
    expression                     shift and go to state 69
    empty                          shift and go to state 70
    type                           shift and go to state 25
    function_call                  shift and go to state 26

state 51

    (12) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES
    (13) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LBRACES         shift and go to state 71


state 52

    (16) function_parameters -> VARIABLE . COLON data_type

    COLON           shift and go to state 72


state 53

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters . RPAREN function_return_type LBRACES expression return_statement RBRACES
    (15) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 73
    COMMA           shift and go to state 74


state 54

    (17) function_parameters -> empty .

    RPAREN          reduce using rule 17 (function_parameters -> empty .)
    COMMA           reduce using rule 17 (function_parameters -> empty .)


state 55

    (9) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN . collection_block
    (10) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 76

    collection_block               shift and go to state 75

state 56

    (42) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    RSQUAREBRACKET  reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 42 (expression -> LPAREN expression RPAREN .)


state 57

    (31) expression -> expression PLUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 31 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 31 (expression -> expression PLUS expression .)
    IF              reduce using rule 31 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 31 (expression -> expression PLUS expression .)
    LET             reduce using rule 31 (expression -> expression PLUS expression .)
    VAR             reduce using rule 31 (expression -> expression PLUS expression .)
    $end            reduce using rule 31 (expression -> expression PLUS expression .)
    RBRACES         reduce using rule 31 (expression -> expression PLUS expression .)
    RSQUAREBRACKET  reduce using rule 31 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 31 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 31 (expression -> expression PLUS expression .) ]


state 58

    (32) expression -> expression MINUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 32 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 32 (expression -> expression MINUS expression .)
    IF              reduce using rule 32 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 32 (expression -> expression MINUS expression .)
    LET             reduce using rule 32 (expression -> expression MINUS expression .)
    VAR             reduce using rule 32 (expression -> expression MINUS expression .)
    $end            reduce using rule 32 (expression -> expression MINUS expression .)
    RBRACES         reduce using rule 32 (expression -> expression MINUS expression .)
    RSQUAREBRACKET  reduce using rule 32 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 32 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 32 (expression -> expression MINUS expression .) ]


state 59

    (33) expression -> expression MULTIPLY expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 33 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 33 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 33 (expression -> expression MULTIPLY expression .)
    FUNC            reduce using rule 33 (expression -> expression MULTIPLY expression .)
    LET             reduce using rule 33 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 33 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 33 (expression -> expression MULTIPLY expression .)
    RBRACES         reduce using rule 33 (expression -> expression MULTIPLY expression .)
    RSQUAREBRACKET  reduce using rule 33 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 33 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUALS       [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 33 (expression -> expression MULTIPLY expression .) ]


state 60

    (34) expression -> expression DIVIDE expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 34 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 34 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 34 (expression -> expression DIVIDE expression .)
    FUNC            reduce using rule 34 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 34 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 34 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 34 (expression -> expression DIVIDE expression .)
    RBRACES         reduce using rule 34 (expression -> expression DIVIDE expression .)
    RSQUAREBRACKET  reduce using rule 34 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 34 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUALS       [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 34 (expression -> expression DIVIDE expression .) ]


state 61

    (35) expression -> expression GREATERTHAN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    PRINT           reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    IF              reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    FUNC            reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    LET             reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    VAR             reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    $end            reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    RBRACES         reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    RSQUAREBRACKET  reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    RETURN          reduce using rule 35 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! EQUALS          [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 35 (expression -> expression GREATERTHAN expression .) ]


state 62

    (36) expression -> expression LESSTHAN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 36 (expression -> expression LESSTHAN expression .)
    PRINT           reduce using rule 36 (expression -> expression LESSTHAN expression .)
    IF              reduce using rule 36 (expression -> expression LESSTHAN expression .)
    FUNC            reduce using rule 36 (expression -> expression LESSTHAN expression .)
    LET             reduce using rule 36 (expression -> expression LESSTHAN expression .)
    VAR             reduce using rule 36 (expression -> expression LESSTHAN expression .)
    $end            reduce using rule 36 (expression -> expression LESSTHAN expression .)
    RBRACES         reduce using rule 36 (expression -> expression LESSTHAN expression .)
    RSQUAREBRACKET  reduce using rule 36 (expression -> expression LESSTHAN expression .)
    RETURN          reduce using rule 36 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! EQUALS          [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 36 (expression -> expression LESSTHAN expression .) ]


state 63

    (37) expression -> expression EQUALS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 37 (expression -> expression EQUALS expression .)
    PRINT           reduce using rule 37 (expression -> expression EQUALS expression .)
    IF              reduce using rule 37 (expression -> expression EQUALS expression .)
    FUNC            reduce using rule 37 (expression -> expression EQUALS expression .)
    LET             reduce using rule 37 (expression -> expression EQUALS expression .)
    VAR             reduce using rule 37 (expression -> expression EQUALS expression .)
    $end            reduce using rule 37 (expression -> expression EQUALS expression .)
    RBRACES         reduce using rule 37 (expression -> expression EQUALS expression .)
    RSQUAREBRACKET  reduce using rule 37 (expression -> expression EQUALS expression .)
    RETURN          reduce using rule 37 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! COMMA           [ reduce using rule 37 (expression -> expression EQUALS expression .) ]


state 64

    (38) expression -> expression NOTEQUALS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    PRINT           reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    IF              reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    FUNC            reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    LET             reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    VAR             reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    $end            reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    RBRACES         reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    RSQUAREBRACKET  reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    RETURN          reduce using rule 38 (expression -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! EQUALS          [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]
  ! COMMA           [ reduce using rule 38 (expression -> expression NOTEQUALS expression .) ]


state 65

    (39) expression -> expression AND expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 39 (expression -> expression AND expression .)
    PRINT           reduce using rule 39 (expression -> expression AND expression .)
    IF              reduce using rule 39 (expression -> expression AND expression .)
    FUNC            reduce using rule 39 (expression -> expression AND expression .)
    LET             reduce using rule 39 (expression -> expression AND expression .)
    VAR             reduce using rule 39 (expression -> expression AND expression .)
    $end            reduce using rule 39 (expression -> expression AND expression .)
    RBRACES         reduce using rule 39 (expression -> expression AND expression .)
    RSQUAREBRACKET  reduce using rule 39 (expression -> expression AND expression .)
    RETURN          reduce using rule 39 (expression -> expression AND expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! NOTEQUALS       [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 39 (expression -> expression AND expression .) ]


state 66

    (40) expression -> expression OR expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 40 (expression -> expression OR expression .)
    PRINT           reduce using rule 40 (expression -> expression OR expression .)
    IF              reduce using rule 40 (expression -> expression OR expression .)
    FUNC            reduce using rule 40 (expression -> expression OR expression .)
    LET             reduce using rule 40 (expression -> expression OR expression .)
    VAR             reduce using rule 40 (expression -> expression OR expression .)
    $end            reduce using rule 40 (expression -> expression OR expression .)
    RBRACES         reduce using rule 40 (expression -> expression OR expression .)
    RSQUAREBRACKET  reduce using rule 40 (expression -> expression OR expression .)
    RETURN          reduce using rule 40 (expression -> expression OR expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! NOTEQUALS       [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 40 (expression -> expression OR expression .) ]


state 67

    (41) expression -> expression COMMA expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 41 (expression -> expression COMMA expression .)
    PRINT           reduce using rule 41 (expression -> expression COMMA expression .)
    IF              reduce using rule 41 (expression -> expression COMMA expression .)
    FUNC            reduce using rule 41 (expression -> expression COMMA expression .)
    LET             reduce using rule 41 (expression -> expression COMMA expression .)
    VAR             reduce using rule 41 (expression -> expression COMMA expression .)
    $end            reduce using rule 41 (expression -> expression COMMA expression .)
    RBRACES         reduce using rule 41 (expression -> expression COMMA expression .)
    RSQUAREBRACKET  reduce using rule 41 (expression -> expression COMMA expression .)
    RETURN          reduce using rule 41 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! PLUS            [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! NOTEQUALS       [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 41 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 41 (expression -> expression COMMA expression .) ]


state 68

    (51) function_call -> VARIABLE LPAREN function_arguments . RPAREN
    (52) function_arguments -> function_arguments . COMMA expression

    RPAREN          shift and go to state 77
    COMMA           shift and go to state 78


state 69

    (53) function_arguments -> expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 53 (function_arguments -> expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! COMMA           [ reduce using rule 53 (function_arguments -> expression .) ]


state 70

    (54) function_arguments -> empty .
    (47) expression -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 47 (expression -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (expression -> empty .)
    PLUS            reduce using rule 47 (expression -> empty .)
    MINUS           reduce using rule 47 (expression -> empty .)
    MULTIPLY        reduce using rule 47 (expression -> empty .)
    DIVIDE          reduce using rule 47 (expression -> empty .)
    GREATERTHAN     reduce using rule 47 (expression -> empty .)
    LESSTHAN        reduce using rule 47 (expression -> empty .)
    EQUALS          reduce using rule 47 (expression -> empty .)
    NOTEQUALS       reduce using rule 47 (expression -> empty .)
    AND             reduce using rule 47 (expression -> empty .)
    OR              reduce using rule 47 (expression -> empty .)
    COMMA           reduce using rule 47 (expression -> empty .)
    RPAREN          reduce using rule 47 (expression -> empty .)

  ! RPAREN          [ reduce using rule 54 (function_arguments -> empty .) ]
  ! COMMA           [ reduce using rule 54 (function_arguments -> empty .) ]


state 71

    (12) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES
    (13) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_declaration
    (8) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (9) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) print_statement -> . PRINT LPAREN expression RPAREN
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (14) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) variable_declarator -> . LET
    (22) variable_declarator -> . VAR

    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FUNC            shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13

    statements                     shift and go to state 79
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_declaration           shift and go to state 7
    variable_declarator            shift and go to state 8

state 72

    (16) function_parameters -> VARIABLE COLON . data_type
    (23) data_type -> . INTEGER
    (24) data_type -> . STRING
    (25) data_type -> . BOOLEAN
    (26) data_type -> . DOUBLE
    (27) data_type -> . FLOAT
    (28) data_type -> . INT

    INTEGER         shift and go to state 81
    STRING          shift and go to state 82
    BOOLEAN         shift and go to state 83
    DOUBLE          shift and go to state 84
    FLOAT           shift and go to state 85
    INT             shift and go to state 86

    data_type                      shift and go to state 80

state 73

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN . function_return_type LBRACES expression return_statement RBRACES
    (18) function_return_type -> . ARROW data_type
    (19) function_return_type -> . empty
    (55) empty -> .

    ARROW           shift and go to state 88
    LBRACES         reduce using rule 55 (empty -> .)

    function_return_type           shift and go to state 87
    empty                          shift and go to state 89

state 74

    (15) function_parameters -> function_parameters COMMA . VARIABLE COLON data_type

    VARIABLE        shift and go to state 90


state 75

    (9) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .

    PRINT           reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IF              reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FUNC            reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    LET             reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    VAR             reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    $end            reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RBRACES         reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)


state 76

    (10) collection_block -> LSQUAREBRACKET . expression RSQUAREBRACKET
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    RSQUAREBRACKET  reduce using rule 55 (empty -> .)
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)

    expression                     shift and go to state 91
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 77

    (51) function_call -> VARIABLE LPAREN function_arguments RPAREN .

    RPAREN          reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PLUS            reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MINUS           reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MULTIPLY        reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DIVIDE          reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    GREATERTHAN     reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LESSTHAN        reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    EQUALS          reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    NOTEQUALS       reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    AND             reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    OR              reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COMMA           reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PRINT           reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IF              reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FUNC            reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LET             reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VAR             reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    $end            reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RBRACES         reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RSQUAREBRACKET  reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RETURN          reduce using rule 51 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)


state 78

    (52) function_arguments -> function_arguments COMMA . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RPAREN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 92
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 79

    (12) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES
    (13) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_declaration
    (8) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (9) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) print_statement -> . PRINT LPAREN expression RPAREN
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (14) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) variable_declarator -> . LET
    (22) variable_declarator -> . VAR

    RBRACES         shift and go to state 93
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FUNC            shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13

    statement                      shift and go to state 14
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_declaration           shift and go to state 7
    variable_declarator            shift and go to state 8

state 80

    (16) function_parameters -> VARIABLE COLON data_type .

    RPAREN          reduce using rule 16 (function_parameters -> VARIABLE COLON data_type .)
    COMMA           reduce using rule 16 (function_parameters -> VARIABLE COLON data_type .)


state 81

    (23) data_type -> INTEGER .

    RPAREN          reduce using rule 23 (data_type -> INTEGER .)
    COMMA           reduce using rule 23 (data_type -> INTEGER .)
    LBRACES         reduce using rule 23 (data_type -> INTEGER .)


state 82

    (24) data_type -> STRING .

    RPAREN          reduce using rule 24 (data_type -> STRING .)
    COMMA           reduce using rule 24 (data_type -> STRING .)
    LBRACES         reduce using rule 24 (data_type -> STRING .)


state 83

    (25) data_type -> BOOLEAN .

    RPAREN          reduce using rule 25 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 25 (data_type -> BOOLEAN .)
    LBRACES         reduce using rule 25 (data_type -> BOOLEAN .)


state 84

    (26) data_type -> DOUBLE .

    RPAREN          reduce using rule 26 (data_type -> DOUBLE .)
    COMMA           reduce using rule 26 (data_type -> DOUBLE .)
    LBRACES         reduce using rule 26 (data_type -> DOUBLE .)


state 85

    (27) data_type -> FLOAT .

    RPAREN          reduce using rule 27 (data_type -> FLOAT .)
    COMMA           reduce using rule 27 (data_type -> FLOAT .)
    LBRACES         reduce using rule 27 (data_type -> FLOAT .)


state 86

    (28) data_type -> INT .

    RPAREN          reduce using rule 28 (data_type -> INT .)
    COMMA           reduce using rule 28 (data_type -> INT .)
    LBRACES         reduce using rule 28 (data_type -> INT .)


state 87

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type . LBRACES expression return_statement RBRACES

    LBRACES         shift and go to state 94


state 88

    (18) function_return_type -> ARROW . data_type
    (23) data_type -> . INTEGER
    (24) data_type -> . STRING
    (25) data_type -> . BOOLEAN
    (26) data_type -> . DOUBLE
    (27) data_type -> . FLOAT
    (28) data_type -> . INT

    INTEGER         shift and go to state 81
    STRING          shift and go to state 82
    BOOLEAN         shift and go to state 83
    DOUBLE          shift and go to state 84
    FLOAT           shift and go to state 85
    INT             shift and go to state 86

    data_type                      shift and go to state 95

state 89

    (19) function_return_type -> empty .

    LBRACES         reduce using rule 19 (function_return_type -> empty .)


state 90

    (15) function_parameters -> function_parameters COMMA VARIABLE . COLON data_type

    COLON           shift and go to state 96


state 91

    (10) collection_block -> LSQUAREBRACKET expression . RSQUAREBRACKET
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

    RSQUAREBRACKET  shift and go to state 97
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48


state 92

    (52) function_arguments -> function_arguments COMMA expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 52 (function_arguments -> function_arguments COMMA expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48

  ! COMMA           [ reduce using rule 52 (function_arguments -> function_arguments COMMA expression .) ]


state 93

    (12) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .
    (13) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES . ELSE LBRACES statements RBRACES

    PRINT           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    ELSE            shift and go to state 98


state 94

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES . expression return_statement RBRACES
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 99
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 95

    (18) function_return_type -> ARROW data_type .

    LBRACES         reduce using rule 18 (function_return_type -> ARROW data_type .)


state 96

    (15) function_parameters -> function_parameters COMMA VARIABLE COLON . data_type
    (23) data_type -> . INTEGER
    (24) data_type -> . STRING
    (25) data_type -> . BOOLEAN
    (26) data_type -> . DOUBLE
    (27) data_type -> . FLOAT
    (28) data_type -> . INT

    INTEGER         shift and go to state 81
    STRING          shift and go to state 82
    BOOLEAN         shift and go to state 83
    DOUBLE          shift and go to state 84
    FLOAT           shift and go to state 85
    INT             shift and go to state 86

    data_type                      shift and go to state 100

state 97

    (10) collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .

    PRINT           reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    IF              reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    FUNC            reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    LET             reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    VAR             reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    $end            reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    RBRACES         reduce using rule 10 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)


state 98

    (13) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE . LBRACES statements RBRACES

    LBRACES         shift and go to state 101


state 99

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression . return_statement RBRACES
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression
    (20) return_statement -> . RETURN expression

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48
    RETURN          shift and go to state 103

    return_statement               shift and go to state 102

state 100

    (15) function_parameters -> function_parameters COMMA VARIABLE COLON data_type .

    RPAREN          reduce using rule 15 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)
    COMMA           reduce using rule 15 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)


state 101

    (13) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_declaration
    (8) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (9) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) print_statement -> . PRINT LPAREN expression RPAREN
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (14) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) variable_declarator -> . LET
    (22) variable_declarator -> . VAR

    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FUNC            shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13

    statements                     shift and go to state 104
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_declaration           shift and go to state 7
    variable_declarator            shift and go to state 8

state 102

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement . RBRACES

    RBRACES         shift and go to state 105


state 103

    (20) return_statement -> RETURN . expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MULTIPLY expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression GREATERTHAN expression
    (36) expression -> . expression LESSTHAN expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression NOTEQUALS expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . expression COMMA expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . NOT expression
    (44) expression -> . VARIABLE
    (45) expression -> . type
    (46) expression -> . function_call
    (47) expression -> . empty
    (48) type -> . BOOL
    (49) type -> . DECIMAL
    (50) type -> . WSTRING
    (51) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (55) empty -> .

    LPAREN          shift and go to state 21
    NOT             shift and go to state 23
    VARIABLE        shift and go to state 24
    BOOL            shift and go to state 28
    DECIMAL         shift and go to state 29
    WSTRING         shift and go to state 30
    PLUS            reduce using rule 55 (empty -> .)
    MINUS           reduce using rule 55 (empty -> .)
    MULTIPLY        reduce using rule 55 (empty -> .)
    DIVIDE          reduce using rule 55 (empty -> .)
    GREATERTHAN     reduce using rule 55 (empty -> .)
    LESSTHAN        reduce using rule 55 (empty -> .)
    EQUALS          reduce using rule 55 (empty -> .)
    NOTEQUALS       reduce using rule 55 (empty -> .)
    AND             reduce using rule 55 (empty -> .)
    OR              reduce using rule 55 (empty -> .)
    COMMA           reduce using rule 55 (empty -> .)
    RBRACES         reduce using rule 55 (empty -> .)

    expression                     shift and go to state 106
    type                           shift and go to state 25
    function_call                  shift and go to state 26
    empty                          shift and go to state 27

state 104

    (13) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_declaration
    (8) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (9) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) print_statement -> . PRINT LPAREN expression RPAREN
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (13) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (14) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) variable_declarator -> . LET
    (22) variable_declarator -> . VAR

    RBRACES         shift and go to state 107
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FUNC            shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13

    statement                      shift and go to state 14
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_declaration           shift and go to state 7
    variable_declarator            shift and go to state 8

state 105

    (14) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .

    PRINT           reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    IF              reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    FUNC            reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    LET             reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    VAR             reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    $end            reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    RBRACES         reduce using rule 14 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)


state 106

    (20) return_statement -> RETURN expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MULTIPLY expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . GREATERTHAN expression
    (36) expression -> expression . LESSTHAN expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . NOTEQUALS expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (41) expression -> expression . COMMA expression

    RBRACES         reduce using rule 20 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULTIPLY        shift and go to state 40
    DIVIDE          shift and go to state 41
    GREATERTHAN     shift and go to state 42
    LESSTHAN        shift and go to state 43
    EQUALS          shift and go to state 44
    NOTEQUALS       shift and go to state 45
    AND             shift and go to state 46
    OR              shift and go to state 47
    COMMA           shift and go to state 48


state 107

    (13) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .

    PRINT           reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IF              reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FUNC            reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    LET             reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VAR             reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    $end            reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 49 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 49 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 49 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 49 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 49 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 49 resolved as shift
WARNING: shift/reduce conflict for OR in state 49 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 58 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 61 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 61 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 62 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 63 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 65 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 92 resolved as shift
WARNING: reduce/reduce conflict in state 70 resolved using rule (expression -> empty)
WARNING: rejected rule (function_arguments -> empty) in state 70
WARNING: Rule (function_arguments -> empty) is never reduced
