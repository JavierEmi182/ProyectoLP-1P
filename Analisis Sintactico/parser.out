Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CALLMETHOD
    CASE
    CHARACTER
    CLASS
    COMMENT
    CONTINUE
    DEFAULT
    DICTIONARYTYPE
    ENUM
    FALSE
    FOR
    GUARD
    IMPORT
    IN
    INIT
    MINUSONE
    NUMBER
    OPTIONALVARIABLE
    PLUSONE
    PRIVATE
    PUBLIC
    RANGE
    REPEAT
    SETVARIABLE
    STATIC
    STRUCT
    SWITCH
    TRUE
    TYPEALIAS
    VALUESTYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> function_general
Rule 8     statement -> while_statement
Rule 9     assignment_statement -> variable_declarator VARIABLE ASSIGN expression
Rule 10    assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
Rule 11    assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block
Rule 12    collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET
Rule 13    print_statement -> PRINT LPAREN expression RPAREN
Rule 14    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES
Rule 15    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
Rule 16    while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES
Rule 17    function_general -> function_declaration
Rule 18    function_general -> function_declaration_empty
Rule 19    function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
Rule 20    function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES
Rule 21    function_parameters -> function_parameters COMMA VARIABLE COLON data_type
Rule 22    function_parameters -> VARIABLE COLON data_type
Rule 23    function_return_type -> ARROW data_type
Rule 24    function_return_type -> empty
Rule 25    return_statement -> RETURN expression
Rule 26    variable_declarator -> LET
Rule 27    variable_declarator -> VAR
Rule 28    data_type -> INTEGER
Rule 29    data_type -> STRING
Rule 30    data_type -> BOOLEAN
Rule 31    data_type -> DOUBLE
Rule 32    data_type -> FLOAT
Rule 33    data_type -> INT
Rule 34    data_collection_type -> COLLECTIONTYPE
Rule 35    break_statement -> BREAK
Rule 36    expression -> expression PLUS expression
Rule 37    expression -> expression MINUS expression
Rule 38    expression -> expression MULTIPLY expression
Rule 39    expression -> expression DIVIDE expression
Rule 40    expression -> expression GREATERTHAN expression
Rule 41    expression -> expression LESSTHAN expression
Rule 42    expression -> expression EQUALS expression
Rule 43    expression -> expression NOTEQUALS expression
Rule 44    expression -> expression AND expression
Rule 45    expression -> expression OR expression
Rule 46    expression -> expression COMMA expression
Rule 47    expression -> LPAREN expression RPAREN
Rule 48    expression -> NOT expression
Rule 49    expression -> VARIABLE
Rule 50    expression -> type
Rule 51    expression -> function_call
Rule 52    expression -> empty
Rule 53    type -> BOOL
Rule 54    type -> DECIMAL
Rule 55    type -> WSTRING
Rule 56    function_call -> VARIABLE LPAREN function_arguments RPAREN
Rule 57    function_arguments -> function_arguments COMMA expression
Rule 58    function_arguments -> expression
Rule 59    function_arguments -> empty
Rule 60    empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
ARRAY                : 
ARROW                : 23
ASSIGN               : 9 10 11
BOOL                 : 53
BOOLEAN              : 30
BREAK                : 35
CALLMETHOD           : 
CASE                 : 
CHARACTER            : 
CLASS                : 
COLLECTIONTYPE       : 34
COLON                : 10 11 21 22
COMMA                : 21 46 57
COMMENT              : 
CONTINUE             : 
DECIMAL              : 54
DEFAULT              : 
DICTIONARYTYPE       : 
DIVIDE               : 39
DOUBLE               : 31
ELSE                 : 15
ENUM                 : 
EQUALS               : 42
FALSE                : 
FLOAT                : 32
FOR                  : 
FUNC                 : 19 20
GREATERTHAN          : 40
GUARD                : 
IF                   : 14 15
IMPORT               : 
IN                   : 
INIT                 : 
INT                  : 33
INTEGER              : 28
LBRACES              : 14 15 15 16 19 20
LESSTHAN             : 41
LET                  : 26
LPAREN               : 13 14 15 16 19 20 47 56
LSQUAREBRACKET       : 12
MINUS                : 37
MINUSONE             : 
MULTIPLY             : 38
NOT                  : 48
NOTEQUALS            : 43
NUMBER               : 
OPTIONALVARIABLE     : 
OR                   : 45
PLUS                 : 36
PLUSONE              : 
PRINT                : 13
PRIVATE              : 
PUBLIC               : 
RANGE                : 
RBRACES              : 14 15 15 16 19 20
REPEAT               : 
RETURN               : 25
RPAREN               : 13 14 15 16 19 20 47 56
RSQUAREBRACKET       : 12
SET                  : 11
SETVARIABLE          : 
STATIC               : 
STRING               : 29
STRUCT               : 
SWITCH               : 
TRUE                 : 
TYPEALIAS            : 
VALUESTYPE           : 
VAR                  : 27
VARIABLE             : 9 10 11 19 20 21 22 49 56
WHILE                : 16
WSTRING              : 55
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4
break_statement      : 
collection_block     : 10 11
data_collection_type : 10
data_type            : 21 22 23
empty                : 20 24 52 59
expression           : 9 12 13 14 15 16 19 20 25 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 48 57 58
function_arguments   : 56 57
function_call        : 51
function_declaration : 17
function_declaration_empty : 18
function_general     : 7
function_parameters  : 19 21
function_return_type : 19 20
if_statement         : 6
print_statement      : 5
program              : 0
return_statement     : 19 20
statement            : 2 3
statements           : 1 2 14 15 15 16
type                 : 50
variable_declarator  : 9 10 11
while_statement      : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    $end            reduce using rule 1 (program -> statements .)
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statement                      shift and go to state 18
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 3

    (3) statements -> statement .

    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACES         reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment_statement .

    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)
    LET             reduce using rule 4 (statement -> assignment_statement .)
    VAR             reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACES         reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> print_statement .

    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    WHILE           reduce using rule 5 (statement -> print_statement .)
    LET             reduce using rule 5 (statement -> print_statement .)
    VAR             reduce using rule 5 (statement -> print_statement .)
    FUNC            reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACES         reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    LET             reduce using rule 6 (statement -> if_statement .)
    VAR             reduce using rule 6 (statement -> if_statement .)
    FUNC            reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACES         reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> function_general .

    PRINT           reduce using rule 7 (statement -> function_general .)
    IF              reduce using rule 7 (statement -> function_general .)
    WHILE           reduce using rule 7 (statement -> function_general .)
    LET             reduce using rule 7 (statement -> function_general .)
    VAR             reduce using rule 7 (statement -> function_general .)
    FUNC            reduce using rule 7 (statement -> function_general .)
    $end            reduce using rule 7 (statement -> function_general .)
    RBRACES         reduce using rule 7 (statement -> function_general .)


state 8

    (8) statement -> while_statement .

    PRINT           reduce using rule 8 (statement -> while_statement .)
    IF              reduce using rule 8 (statement -> while_statement .)
    WHILE           reduce using rule 8 (statement -> while_statement .)
    LET             reduce using rule 8 (statement -> while_statement .)
    VAR             reduce using rule 8 (statement -> while_statement .)
    FUNC            reduce using rule 8 (statement -> while_statement .)
    $end            reduce using rule 8 (statement -> while_statement .)
    RBRACES         reduce using rule 8 (statement -> while_statement .)


state 9

    (9) assignment_statement -> variable_declarator . VARIABLE ASSIGN expression
    (10) assignment_statement -> variable_declarator . VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> variable_declarator . VARIABLE COLON SET ASSIGN collection_block

    VARIABLE        shift and go to state 19


state 10

    (13) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 20


state 11

    (14) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LPAREN          shift and go to state 21


state 12

    (17) function_general -> function_declaration .

    PRINT           reduce using rule 17 (function_general -> function_declaration .)
    IF              reduce using rule 17 (function_general -> function_declaration .)
    WHILE           reduce using rule 17 (function_general -> function_declaration .)
    LET             reduce using rule 17 (function_general -> function_declaration .)
    VAR             reduce using rule 17 (function_general -> function_declaration .)
    FUNC            reduce using rule 17 (function_general -> function_declaration .)
    $end            reduce using rule 17 (function_general -> function_declaration .)
    RBRACES         reduce using rule 17 (function_general -> function_declaration .)


state 13

    (18) function_general -> function_declaration_empty .

    PRINT           reduce using rule 18 (function_general -> function_declaration_empty .)
    IF              reduce using rule 18 (function_general -> function_declaration_empty .)
    WHILE           reduce using rule 18 (function_general -> function_declaration_empty .)
    LET             reduce using rule 18 (function_general -> function_declaration_empty .)
    VAR             reduce using rule 18 (function_general -> function_declaration_empty .)
    FUNC            reduce using rule 18 (function_general -> function_declaration_empty .)
    $end            reduce using rule 18 (function_general -> function_declaration_empty .)
    RBRACES         reduce using rule 18 (function_general -> function_declaration_empty .)


state 14

    (16) while_statement -> WHILE . LPAREN expression RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 22


state 15

    (26) variable_declarator -> LET .

    VARIABLE        reduce using rule 26 (variable_declarator -> LET .)


state 16

    (27) variable_declarator -> VAR .

    VARIABLE        reduce using rule 27 (variable_declarator -> VAR .)


state 17

    (19) function_declaration -> FUNC . VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> FUNC . VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    VARIABLE        shift and go to state 23


state 18

    (2) statements -> statements statement .

    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACES         reduce using rule 2 (statements -> statements statement .)


state 19

    (9) assignment_statement -> variable_declarator VARIABLE . ASSIGN expression
    (10) assignment_statement -> variable_declarator VARIABLE . COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> variable_declarator VARIABLE . COLON SET ASSIGN collection_block

    ASSIGN          shift and go to state 24
    COLON           shift and go to state 25


state 20

    (13) print_statement -> PRINT LPAREN . expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    RPAREN          reduce using rule 60 (empty -> .)
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    expression                     shift and go to state 27
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 21

    (14) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    RPAREN          reduce using rule 60 (empty -> .)
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    expression                     shift and go to state 36
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 22

    (16) while_statement -> WHILE LPAREN . expression RPAREN LBRACES statements RBRACES
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    RPAREN          reduce using rule 60 (empty -> .)
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    expression                     shift and go to state 37
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 23

    (19) function_declaration -> FUNC VARIABLE . LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> FUNC VARIABLE . LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    LPAREN          shift and go to state 38


state 24

    (9) assignment_statement -> variable_declarator VARIABLE ASSIGN . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)

    expression                     shift and go to state 39
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 25

    (10) assignment_statement -> variable_declarator VARIABLE COLON . data_collection_type ASSIGN collection_block
    (11) assignment_statement -> variable_declarator VARIABLE COLON . SET ASSIGN collection_block
    (34) data_collection_type -> . COLLECTIONTYPE

    SET             shift and go to state 41
    COLLECTIONTYPE  shift and go to state 42

    data_collection_type           shift and go to state 40

state 26

    (47) expression -> LPAREN . expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    RPAREN          reduce using rule 60 (empty -> .)
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    expression                     shift and go to state 43
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 27

    (13) print_statement -> PRINT LPAREN expression . RPAREN
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 28

    (48) expression -> NOT . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 56
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 29

    (49) expression -> VARIABLE .
    (56) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    RPAREN          reduce using rule 49 (expression -> VARIABLE .)
    PLUS            reduce using rule 49 (expression -> VARIABLE .)
    MINUS           reduce using rule 49 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 49 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 49 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 49 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 49 (expression -> VARIABLE .)
    EQUALS          reduce using rule 49 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 49 (expression -> VARIABLE .)
    AND             reduce using rule 49 (expression -> VARIABLE .)
    OR              reduce using rule 49 (expression -> VARIABLE .)
    COMMA           reduce using rule 49 (expression -> VARIABLE .)
    PRINT           reduce using rule 49 (expression -> VARIABLE .)
    IF              reduce using rule 49 (expression -> VARIABLE .)
    WHILE           reduce using rule 49 (expression -> VARIABLE .)
    LET             reduce using rule 49 (expression -> VARIABLE .)
    VAR             reduce using rule 49 (expression -> VARIABLE .)
    FUNC            reduce using rule 49 (expression -> VARIABLE .)
    $end            reduce using rule 49 (expression -> VARIABLE .)
    RBRACES         reduce using rule 49 (expression -> VARIABLE .)
    RSQUAREBRACKET  reduce using rule 49 (expression -> VARIABLE .)
    RETURN          reduce using rule 49 (expression -> VARIABLE .)
    LPAREN          shift and go to state 57


state 30

    (50) expression -> type .

    RPAREN          reduce using rule 50 (expression -> type .)
    PLUS            reduce using rule 50 (expression -> type .)
    MINUS           reduce using rule 50 (expression -> type .)
    MULTIPLY        reduce using rule 50 (expression -> type .)
    DIVIDE          reduce using rule 50 (expression -> type .)
    GREATERTHAN     reduce using rule 50 (expression -> type .)
    LESSTHAN        reduce using rule 50 (expression -> type .)
    EQUALS          reduce using rule 50 (expression -> type .)
    NOTEQUALS       reduce using rule 50 (expression -> type .)
    AND             reduce using rule 50 (expression -> type .)
    OR              reduce using rule 50 (expression -> type .)
    COMMA           reduce using rule 50 (expression -> type .)
    PRINT           reduce using rule 50 (expression -> type .)
    IF              reduce using rule 50 (expression -> type .)
    WHILE           reduce using rule 50 (expression -> type .)
    LET             reduce using rule 50 (expression -> type .)
    VAR             reduce using rule 50 (expression -> type .)
    FUNC            reduce using rule 50 (expression -> type .)
    $end            reduce using rule 50 (expression -> type .)
    RBRACES         reduce using rule 50 (expression -> type .)
    RSQUAREBRACKET  reduce using rule 50 (expression -> type .)
    RETURN          reduce using rule 50 (expression -> type .)


state 31

    (51) expression -> function_call .

    RPAREN          reduce using rule 51 (expression -> function_call .)
    PLUS            reduce using rule 51 (expression -> function_call .)
    MINUS           reduce using rule 51 (expression -> function_call .)
    MULTIPLY        reduce using rule 51 (expression -> function_call .)
    DIVIDE          reduce using rule 51 (expression -> function_call .)
    GREATERTHAN     reduce using rule 51 (expression -> function_call .)
    LESSTHAN        reduce using rule 51 (expression -> function_call .)
    EQUALS          reduce using rule 51 (expression -> function_call .)
    NOTEQUALS       reduce using rule 51 (expression -> function_call .)
    AND             reduce using rule 51 (expression -> function_call .)
    OR              reduce using rule 51 (expression -> function_call .)
    COMMA           reduce using rule 51 (expression -> function_call .)
    PRINT           reduce using rule 51 (expression -> function_call .)
    IF              reduce using rule 51 (expression -> function_call .)
    WHILE           reduce using rule 51 (expression -> function_call .)
    LET             reduce using rule 51 (expression -> function_call .)
    VAR             reduce using rule 51 (expression -> function_call .)
    FUNC            reduce using rule 51 (expression -> function_call .)
    $end            reduce using rule 51 (expression -> function_call .)
    RBRACES         reduce using rule 51 (expression -> function_call .)
    RSQUAREBRACKET  reduce using rule 51 (expression -> function_call .)
    RETURN          reduce using rule 51 (expression -> function_call .)


state 32

    (52) expression -> empty .

    RPAREN          reduce using rule 52 (expression -> empty .)
    PLUS            reduce using rule 52 (expression -> empty .)
    MINUS           reduce using rule 52 (expression -> empty .)
    MULTIPLY        reduce using rule 52 (expression -> empty .)
    DIVIDE          reduce using rule 52 (expression -> empty .)
    GREATERTHAN     reduce using rule 52 (expression -> empty .)
    LESSTHAN        reduce using rule 52 (expression -> empty .)
    EQUALS          reduce using rule 52 (expression -> empty .)
    NOTEQUALS       reduce using rule 52 (expression -> empty .)
    AND             reduce using rule 52 (expression -> empty .)
    OR              reduce using rule 52 (expression -> empty .)
    COMMA           reduce using rule 52 (expression -> empty .)
    PRINT           reduce using rule 52 (expression -> empty .)
    IF              reduce using rule 52 (expression -> empty .)
    WHILE           reduce using rule 52 (expression -> empty .)
    LET             reduce using rule 52 (expression -> empty .)
    VAR             reduce using rule 52 (expression -> empty .)
    FUNC            reduce using rule 52 (expression -> empty .)
    $end            reduce using rule 52 (expression -> empty .)
    RBRACES         reduce using rule 52 (expression -> empty .)
    RSQUAREBRACKET  reduce using rule 52 (expression -> empty .)
    RETURN          reduce using rule 52 (expression -> empty .)


state 33

    (53) type -> BOOL .

    RPAREN          reduce using rule 53 (type -> BOOL .)
    PLUS            reduce using rule 53 (type -> BOOL .)
    MINUS           reduce using rule 53 (type -> BOOL .)
    MULTIPLY        reduce using rule 53 (type -> BOOL .)
    DIVIDE          reduce using rule 53 (type -> BOOL .)
    GREATERTHAN     reduce using rule 53 (type -> BOOL .)
    LESSTHAN        reduce using rule 53 (type -> BOOL .)
    EQUALS          reduce using rule 53 (type -> BOOL .)
    NOTEQUALS       reduce using rule 53 (type -> BOOL .)
    AND             reduce using rule 53 (type -> BOOL .)
    OR              reduce using rule 53 (type -> BOOL .)
    COMMA           reduce using rule 53 (type -> BOOL .)
    PRINT           reduce using rule 53 (type -> BOOL .)
    IF              reduce using rule 53 (type -> BOOL .)
    WHILE           reduce using rule 53 (type -> BOOL .)
    LET             reduce using rule 53 (type -> BOOL .)
    VAR             reduce using rule 53 (type -> BOOL .)
    FUNC            reduce using rule 53 (type -> BOOL .)
    $end            reduce using rule 53 (type -> BOOL .)
    RBRACES         reduce using rule 53 (type -> BOOL .)
    RSQUAREBRACKET  reduce using rule 53 (type -> BOOL .)
    RETURN          reduce using rule 53 (type -> BOOL .)


state 34

    (54) type -> DECIMAL .

    RPAREN          reduce using rule 54 (type -> DECIMAL .)
    PLUS            reduce using rule 54 (type -> DECIMAL .)
    MINUS           reduce using rule 54 (type -> DECIMAL .)
    MULTIPLY        reduce using rule 54 (type -> DECIMAL .)
    DIVIDE          reduce using rule 54 (type -> DECIMAL .)
    GREATERTHAN     reduce using rule 54 (type -> DECIMAL .)
    LESSTHAN        reduce using rule 54 (type -> DECIMAL .)
    EQUALS          reduce using rule 54 (type -> DECIMAL .)
    NOTEQUALS       reduce using rule 54 (type -> DECIMAL .)
    AND             reduce using rule 54 (type -> DECIMAL .)
    OR              reduce using rule 54 (type -> DECIMAL .)
    COMMA           reduce using rule 54 (type -> DECIMAL .)
    PRINT           reduce using rule 54 (type -> DECIMAL .)
    IF              reduce using rule 54 (type -> DECIMAL .)
    WHILE           reduce using rule 54 (type -> DECIMAL .)
    LET             reduce using rule 54 (type -> DECIMAL .)
    VAR             reduce using rule 54 (type -> DECIMAL .)
    FUNC            reduce using rule 54 (type -> DECIMAL .)
    $end            reduce using rule 54 (type -> DECIMAL .)
    RBRACES         reduce using rule 54 (type -> DECIMAL .)
    RSQUAREBRACKET  reduce using rule 54 (type -> DECIMAL .)
    RETURN          reduce using rule 54 (type -> DECIMAL .)


state 35

    (55) type -> WSTRING .

    RPAREN          reduce using rule 55 (type -> WSTRING .)
    PLUS            reduce using rule 55 (type -> WSTRING .)
    MINUS           reduce using rule 55 (type -> WSTRING .)
    MULTIPLY        reduce using rule 55 (type -> WSTRING .)
    DIVIDE          reduce using rule 55 (type -> WSTRING .)
    GREATERTHAN     reduce using rule 55 (type -> WSTRING .)
    LESSTHAN        reduce using rule 55 (type -> WSTRING .)
    EQUALS          reduce using rule 55 (type -> WSTRING .)
    NOTEQUALS       reduce using rule 55 (type -> WSTRING .)
    AND             reduce using rule 55 (type -> WSTRING .)
    OR              reduce using rule 55 (type -> WSTRING .)
    COMMA           reduce using rule 55 (type -> WSTRING .)
    PRINT           reduce using rule 55 (type -> WSTRING .)
    IF              reduce using rule 55 (type -> WSTRING .)
    WHILE           reduce using rule 55 (type -> WSTRING .)
    LET             reduce using rule 55 (type -> WSTRING .)
    VAR             reduce using rule 55 (type -> WSTRING .)
    FUNC            reduce using rule 55 (type -> WSTRING .)
    $end            reduce using rule 55 (type -> WSTRING .)
    RBRACES         reduce using rule 55 (type -> WSTRING .)
    RSQUAREBRACKET  reduce using rule 55 (type -> WSTRING .)
    RETURN          reduce using rule 55 (type -> WSTRING .)


state 36

    (14) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES
    (15) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 37

    (16) while_statement -> WHILE LPAREN expression . RPAREN LBRACES statements RBRACES
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    RPAREN          shift and go to state 59
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 38

    (19) function_declaration -> FUNC VARIABLE LPAREN . function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> FUNC VARIABLE LPAREN . empty RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (22) function_parameters -> . VARIABLE COLON data_type
    (60) empty -> .

    VARIABLE        shift and go to state 60
    RPAREN          reduce using rule 60 (empty -> .)

    function_parameters            shift and go to state 61
    empty                          shift and go to state 62

state 39

    (9) assignment_statement -> variable_declarator VARIABLE ASSIGN expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    PRINT           reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IF              reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    LET             reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    VAR             reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    $end            reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 9 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 40

    (10) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type . ASSIGN collection_block

    ASSIGN          shift and go to state 63


state 41

    (11) assignment_statement -> variable_declarator VARIABLE COLON SET . ASSIGN collection_block

    ASSIGN          shift and go to state 64


state 42

    (34) data_collection_type -> COLLECTIONTYPE .

    ASSIGN          reduce using rule 34 (data_collection_type -> COLLECTIONTYPE .)


state 43

    (47) expression -> LPAREN expression . RPAREN
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    RPAREN          shift and go to state 65
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 44

    (13) print_statement -> PRINT LPAREN expression RPAREN .

    PRINT           reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    LET             reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUNC            reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACES         reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN .)


state 45

    (36) expression -> expression PLUS . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 66
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 46

    (37) expression -> expression MINUS . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 67
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 47

    (38) expression -> expression MULTIPLY . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 68
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 48

    (39) expression -> expression DIVIDE . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 69
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 49

    (40) expression -> expression GREATERTHAN . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 70
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 50

    (41) expression -> expression LESSTHAN . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 71
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 51

    (42) expression -> expression EQUALS . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 72
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 52

    (43) expression -> expression NOTEQUALS . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 73
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 53

    (44) expression -> expression AND . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 74
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 54

    (45) expression -> expression OR . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 75
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 55

    (46) expression -> expression COMMA . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    PRINT           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    LET             reduce using rule 60 (empty -> .)
    VAR             reduce using rule 60 (empty -> .)
    FUNC            reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 76
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 56

    (48) expression -> NOT expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 48 (expression -> NOT expression .)
    PRINT           reduce using rule 48 (expression -> NOT expression .)
    IF              reduce using rule 48 (expression -> NOT expression .)
    WHILE           reduce using rule 48 (expression -> NOT expression .)
    LET             reduce using rule 48 (expression -> NOT expression .)
    VAR             reduce using rule 48 (expression -> NOT expression .)
    FUNC            reduce using rule 48 (expression -> NOT expression .)
    $end            reduce using rule 48 (expression -> NOT expression .)
    RBRACES         reduce using rule 48 (expression -> NOT expression .)
    RSQUAREBRACKET  reduce using rule 48 (expression -> NOT expression .)
    RETURN          reduce using rule 48 (expression -> NOT expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 48 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 48 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 48 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 48 (expression -> NOT expression .) ]
  ! NOTEQUALS       [ reduce using rule 48 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 48 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 48 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 48 (expression -> NOT expression .) ]


state 57

    (56) function_call -> VARIABLE LPAREN . function_arguments RPAREN
    (57) function_arguments -> . function_arguments COMMA expression
    (58) function_arguments -> . expression
    (59) function_arguments -> . empty
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (60) empty -> .
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35

    function_arguments             shift and go to state 77
    expression                     shift and go to state 78
    empty                          shift and go to state 79
    type                           shift and go to state 30
    function_call                  shift and go to state 31

state 58

    (14) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES
    (15) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LBRACES         shift and go to state 80


state 59

    (16) while_statement -> WHILE LPAREN expression RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 81


state 60

    (22) function_parameters -> VARIABLE . COLON data_type

    COLON           shift and go to state 82


state 61

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters . RPAREN function_return_type LBRACES expression return_statement RBRACES
    (21) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 83
    COMMA           shift and go to state 84


state 62

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty . RPAREN function_return_type LBRACES expression return_statement RBRACES

    RPAREN          shift and go to state 85


state 63

    (10) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN . collection_block
    (12) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 87

    collection_block               shift and go to state 86

state 64

    (11) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN . collection_block
    (12) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 87

    collection_block               shift and go to state 88

state 65

    (47) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RSQUAREBRACKET  reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)


state 66

    (36) expression -> expression PLUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 36 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 36 (expression -> expression PLUS expression .)
    IF              reduce using rule 36 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 36 (expression -> expression PLUS expression .)
    LET             reduce using rule 36 (expression -> expression PLUS expression .)
    VAR             reduce using rule 36 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 36 (expression -> expression PLUS expression .)
    $end            reduce using rule 36 (expression -> expression PLUS expression .)
    RBRACES         reduce using rule 36 (expression -> expression PLUS expression .)
    RSQUAREBRACKET  reduce using rule 36 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 36 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 36 (expression -> expression PLUS expression .) ]


state 67

    (37) expression -> expression MINUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 37 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 37 (expression -> expression MINUS expression .)
    IF              reduce using rule 37 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 37 (expression -> expression MINUS expression .)
    LET             reduce using rule 37 (expression -> expression MINUS expression .)
    VAR             reduce using rule 37 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 37 (expression -> expression MINUS expression .)
    $end            reduce using rule 37 (expression -> expression MINUS expression .)
    RBRACES         reduce using rule 37 (expression -> expression MINUS expression .)
    RSQUAREBRACKET  reduce using rule 37 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 37 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 37 (expression -> expression MINUS expression .) ]


state 68

    (38) expression -> expression MULTIPLY expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 38 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 38 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 38 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 38 (expression -> expression MULTIPLY expression .)
    LET             reduce using rule 38 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 38 (expression -> expression MULTIPLY expression .)
    FUNC            reduce using rule 38 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 38 (expression -> expression MULTIPLY expression .)
    RBRACES         reduce using rule 38 (expression -> expression MULTIPLY expression .)
    RSQUAREBRACKET  reduce using rule 38 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 38 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUALS       [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 38 (expression -> expression MULTIPLY expression .) ]


state 69

    (39) expression -> expression DIVIDE expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 39 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 39 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 39 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 39 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 39 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 39 (expression -> expression DIVIDE expression .)
    FUNC            reduce using rule 39 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 39 (expression -> expression DIVIDE expression .)
    RBRACES         reduce using rule 39 (expression -> expression DIVIDE expression .)
    RSQUAREBRACKET  reduce using rule 39 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 39 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUALS       [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 39 (expression -> expression DIVIDE expression .) ]


state 70

    (40) expression -> expression GREATERTHAN expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    PRINT           reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    IF              reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    WHILE           reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    LET             reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    VAR             reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    FUNC            reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    $end            reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    RBRACES         reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    RSQUAREBRACKET  reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    RETURN          reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! EQUALS          [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]


state 71

    (41) expression -> expression LESSTHAN expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 41 (expression -> expression LESSTHAN expression .)
    PRINT           reduce using rule 41 (expression -> expression LESSTHAN expression .)
    IF              reduce using rule 41 (expression -> expression LESSTHAN expression .)
    WHILE           reduce using rule 41 (expression -> expression LESSTHAN expression .)
    LET             reduce using rule 41 (expression -> expression LESSTHAN expression .)
    VAR             reduce using rule 41 (expression -> expression LESSTHAN expression .)
    FUNC            reduce using rule 41 (expression -> expression LESSTHAN expression .)
    $end            reduce using rule 41 (expression -> expression LESSTHAN expression .)
    RBRACES         reduce using rule 41 (expression -> expression LESSTHAN expression .)
    RSQUAREBRACKET  reduce using rule 41 (expression -> expression LESSTHAN expression .)
    RETURN          reduce using rule 41 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! EQUALS          [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 41 (expression -> expression LESSTHAN expression .) ]


state 72

    (42) expression -> expression EQUALS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 42 (expression -> expression EQUALS expression .)
    PRINT           reduce using rule 42 (expression -> expression EQUALS expression .)
    IF              reduce using rule 42 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 42 (expression -> expression EQUALS expression .)
    LET             reduce using rule 42 (expression -> expression EQUALS expression .)
    VAR             reduce using rule 42 (expression -> expression EQUALS expression .)
    FUNC            reduce using rule 42 (expression -> expression EQUALS expression .)
    $end            reduce using rule 42 (expression -> expression EQUALS expression .)
    RBRACES         reduce using rule 42 (expression -> expression EQUALS expression .)
    RSQUAREBRACKET  reduce using rule 42 (expression -> expression EQUALS expression .)
    RETURN          reduce using rule 42 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! COMMA           [ reduce using rule 42 (expression -> expression EQUALS expression .) ]


state 73

    (43) expression -> expression NOTEQUALS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    PRINT           reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    IF              reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    WHILE           reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    LET             reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    VAR             reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    FUNC            reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    $end            reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    RBRACES         reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    RSQUAREBRACKET  reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    RETURN          reduce using rule 43 (expression -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! EQUALS          [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]
  ! COMMA           [ reduce using rule 43 (expression -> expression NOTEQUALS expression .) ]


state 74

    (44) expression -> expression AND expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 44 (expression -> expression AND expression .)
    PRINT           reduce using rule 44 (expression -> expression AND expression .)
    IF              reduce using rule 44 (expression -> expression AND expression .)
    WHILE           reduce using rule 44 (expression -> expression AND expression .)
    LET             reduce using rule 44 (expression -> expression AND expression .)
    VAR             reduce using rule 44 (expression -> expression AND expression .)
    FUNC            reduce using rule 44 (expression -> expression AND expression .)
    $end            reduce using rule 44 (expression -> expression AND expression .)
    RBRACES         reduce using rule 44 (expression -> expression AND expression .)
    RSQUAREBRACKET  reduce using rule 44 (expression -> expression AND expression .)
    RETURN          reduce using rule 44 (expression -> expression AND expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! NOTEQUALS       [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 44 (expression -> expression AND expression .) ]


state 75

    (45) expression -> expression OR expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 45 (expression -> expression OR expression .)
    PRINT           reduce using rule 45 (expression -> expression OR expression .)
    IF              reduce using rule 45 (expression -> expression OR expression .)
    WHILE           reduce using rule 45 (expression -> expression OR expression .)
    LET             reduce using rule 45 (expression -> expression OR expression .)
    VAR             reduce using rule 45 (expression -> expression OR expression .)
    FUNC            reduce using rule 45 (expression -> expression OR expression .)
    $end            reduce using rule 45 (expression -> expression OR expression .)
    RBRACES         reduce using rule 45 (expression -> expression OR expression .)
    RSQUAREBRACKET  reduce using rule 45 (expression -> expression OR expression .)
    RETURN          reduce using rule 45 (expression -> expression OR expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! NOTEQUALS       [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 45 (expression -> expression OR expression .) ]


state 76

    (46) expression -> expression COMMA expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 46 (expression -> expression COMMA expression .)
    PRINT           reduce using rule 46 (expression -> expression COMMA expression .)
    IF              reduce using rule 46 (expression -> expression COMMA expression .)
    WHILE           reduce using rule 46 (expression -> expression COMMA expression .)
    LET             reduce using rule 46 (expression -> expression COMMA expression .)
    VAR             reduce using rule 46 (expression -> expression COMMA expression .)
    FUNC            reduce using rule 46 (expression -> expression COMMA expression .)
    $end            reduce using rule 46 (expression -> expression COMMA expression .)
    RBRACES         reduce using rule 46 (expression -> expression COMMA expression .)
    RSQUAREBRACKET  reduce using rule 46 (expression -> expression COMMA expression .)
    RETURN          reduce using rule 46 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! PLUS            [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! NOTEQUALS       [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 46 (expression -> expression COMMA expression .) ]


state 77

    (56) function_call -> VARIABLE LPAREN function_arguments . RPAREN
    (57) function_arguments -> function_arguments . COMMA expression

    RPAREN          shift and go to state 89
    COMMA           shift and go to state 90


state 78

    (58) function_arguments -> expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 58 (function_arguments -> expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! COMMA           [ reduce using rule 58 (function_arguments -> expression .) ]


state 79

    (59) function_arguments -> empty .
    (52) expression -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 52 (expression -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (expression -> empty .)
    PLUS            reduce using rule 52 (expression -> empty .)
    MINUS           reduce using rule 52 (expression -> empty .)
    MULTIPLY        reduce using rule 52 (expression -> empty .)
    DIVIDE          reduce using rule 52 (expression -> empty .)
    GREATERTHAN     reduce using rule 52 (expression -> empty .)
    LESSTHAN        reduce using rule 52 (expression -> empty .)
    EQUALS          reduce using rule 52 (expression -> empty .)
    NOTEQUALS       reduce using rule 52 (expression -> empty .)
    AND             reduce using rule 52 (expression -> empty .)
    OR              reduce using rule 52 (expression -> empty .)
    COMMA           reduce using rule 52 (expression -> empty .)
    RPAREN          reduce using rule 52 (expression -> empty .)

  ! RPAREN          [ reduce using rule 59 (function_arguments -> empty .) ]
  ! COMMA           [ reduce using rule 59 (function_arguments -> empty .) ]


state 80

    (14) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES
    (15) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statements                     shift and go to state 91
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 81

    (16) while_statement -> WHILE LPAREN expression RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statements                     shift and go to state 92
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 82

    (22) function_parameters -> VARIABLE COLON . data_type
    (28) data_type -> . INTEGER
    (29) data_type -> . STRING
    (30) data_type -> . BOOLEAN
    (31) data_type -> . DOUBLE
    (32) data_type -> . FLOAT
    (33) data_type -> . INT

    INTEGER         shift and go to state 94
    STRING          shift and go to state 95
    BOOLEAN         shift and go to state 96
    DOUBLE          shift and go to state 97
    FLOAT           shift and go to state 98
    INT             shift and go to state 99

    data_type                      shift and go to state 93

state 83

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN . function_return_type LBRACES expression return_statement RBRACES
    (23) function_return_type -> . ARROW data_type
    (24) function_return_type -> . empty
    (60) empty -> .

    ARROW           shift and go to state 101
    LBRACES         reduce using rule 60 (empty -> .)

    function_return_type           shift and go to state 100
    empty                          shift and go to state 102

state 84

    (21) function_parameters -> function_parameters COMMA . VARIABLE COLON data_type

    VARIABLE        shift and go to state 103


state 85

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN . function_return_type LBRACES expression return_statement RBRACES
    (23) function_return_type -> . ARROW data_type
    (24) function_return_type -> . empty
    (60) empty -> .

    ARROW           shift and go to state 101
    LBRACES         reduce using rule 60 (empty -> .)

    empty                          shift and go to state 102
    function_return_type           shift and go to state 104

state 86

    (10) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .

    PRINT           reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IF              reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    WHILE           reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    LET             reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    VAR             reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FUNC            reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    $end            reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RBRACES         reduce using rule 10 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)


state 87

    (12) collection_block -> LSQUAREBRACKET . expression RSQUAREBRACKET
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    RSQUAREBRACKET  reduce using rule 60 (empty -> .)
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    expression                     shift and go to state 105
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 88

    (11) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .

    PRINT           reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    IF              reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    WHILE           reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    LET             reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    VAR             reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    FUNC            reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    $end            reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    RBRACES         reduce using rule 11 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)


state 89

    (56) function_call -> VARIABLE LPAREN function_arguments RPAREN .

    RPAREN          reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PLUS            reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MINUS           reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MULTIPLY        reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DIVIDE          reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    GREATERTHAN     reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LESSTHAN        reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    EQUALS          reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    NOTEQUALS       reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    AND             reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    OR              reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COMMA           reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PRINT           reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IF              reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    WHILE           reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LET             reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VAR             reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FUNC            reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    $end            reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RBRACES         reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RSQUAREBRACKET  reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RETURN          reduce using rule 56 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)


state 90

    (57) function_arguments -> function_arguments COMMA . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 106
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 91

    (14) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES
    (15) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    RBRACES         shift and go to state 107
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statement                      shift and go to state 18
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 92

    (16) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    RBRACES         shift and go to state 108
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statement                      shift and go to state 18
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 93

    (22) function_parameters -> VARIABLE COLON data_type .

    RPAREN          reduce using rule 22 (function_parameters -> VARIABLE COLON data_type .)
    COMMA           reduce using rule 22 (function_parameters -> VARIABLE COLON data_type .)


state 94

    (28) data_type -> INTEGER .

    RPAREN          reduce using rule 28 (data_type -> INTEGER .)
    COMMA           reduce using rule 28 (data_type -> INTEGER .)
    LBRACES         reduce using rule 28 (data_type -> INTEGER .)


state 95

    (29) data_type -> STRING .

    RPAREN          reduce using rule 29 (data_type -> STRING .)
    COMMA           reduce using rule 29 (data_type -> STRING .)
    LBRACES         reduce using rule 29 (data_type -> STRING .)


state 96

    (30) data_type -> BOOLEAN .

    RPAREN          reduce using rule 30 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 30 (data_type -> BOOLEAN .)
    LBRACES         reduce using rule 30 (data_type -> BOOLEAN .)


state 97

    (31) data_type -> DOUBLE .

    RPAREN          reduce using rule 31 (data_type -> DOUBLE .)
    COMMA           reduce using rule 31 (data_type -> DOUBLE .)
    LBRACES         reduce using rule 31 (data_type -> DOUBLE .)


state 98

    (32) data_type -> FLOAT .

    RPAREN          reduce using rule 32 (data_type -> FLOAT .)
    COMMA           reduce using rule 32 (data_type -> FLOAT .)
    LBRACES         reduce using rule 32 (data_type -> FLOAT .)


state 99

    (33) data_type -> INT .

    RPAREN          reduce using rule 33 (data_type -> INT .)
    COMMA           reduce using rule 33 (data_type -> INT .)
    LBRACES         reduce using rule 33 (data_type -> INT .)


state 100

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type . LBRACES expression return_statement RBRACES

    LBRACES         shift and go to state 109


state 101

    (23) function_return_type -> ARROW . data_type
    (28) data_type -> . INTEGER
    (29) data_type -> . STRING
    (30) data_type -> . BOOLEAN
    (31) data_type -> . DOUBLE
    (32) data_type -> . FLOAT
    (33) data_type -> . INT

    INTEGER         shift and go to state 94
    STRING          shift and go to state 95
    BOOLEAN         shift and go to state 96
    DOUBLE          shift and go to state 97
    FLOAT           shift and go to state 98
    INT             shift and go to state 99

    data_type                      shift and go to state 110

state 102

    (24) function_return_type -> empty .

    LBRACES         reduce using rule 24 (function_return_type -> empty .)


state 103

    (21) function_parameters -> function_parameters COMMA VARIABLE . COLON data_type

    COLON           shift and go to state 111


state 104

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type . LBRACES expression return_statement RBRACES

    LBRACES         shift and go to state 112


state 105

    (12) collection_block -> LSQUAREBRACKET expression . RSQUAREBRACKET
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    RSQUAREBRACKET  shift and go to state 113
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 106

    (57) function_arguments -> function_arguments COMMA expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 57 (function_arguments -> function_arguments COMMA expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55

  ! COMMA           [ reduce using rule 57 (function_arguments -> function_arguments COMMA expression .) ]


state 107

    (14) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .
    (15) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES . ELSE LBRACES statements RBRACES

    PRINT           reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    ELSE            shift and go to state 114


state 108

    (16) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .

    PRINT           reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 16 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)


state 109

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES . expression return_statement RBRACES
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    expression                     shift and go to state 115
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 110

    (23) function_return_type -> ARROW data_type .

    LBRACES         reduce using rule 23 (function_return_type -> ARROW data_type .)


state 111

    (21) function_parameters -> function_parameters COMMA VARIABLE COLON . data_type
    (28) data_type -> . INTEGER
    (29) data_type -> . STRING
    (30) data_type -> . BOOLEAN
    (31) data_type -> . DOUBLE
    (32) data_type -> . FLOAT
    (33) data_type -> . INT

    INTEGER         shift and go to state 94
    STRING          shift and go to state 95
    BOOLEAN         shift and go to state 96
    DOUBLE          shift and go to state 97
    FLOAT           shift and go to state 98
    INT             shift and go to state 99

    data_type                      shift and go to state 116

state 112

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES . expression return_statement RBRACES
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)

    empty                          shift and go to state 32
    expression                     shift and go to state 117
    type                           shift and go to state 30
    function_call                  shift and go to state 31

state 113

    (12) collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .

    PRINT           reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    IF              reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    WHILE           reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    LET             reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    VAR             reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    FUNC            reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    $end            reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    RBRACES         reduce using rule 12 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)


state 114

    (15) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE . LBRACES statements RBRACES

    LBRACES         shift and go to state 118


state 115

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression . return_statement RBRACES
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression
    (25) return_statement -> . RETURN expression

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55
    RETURN          shift and go to state 120

    return_statement               shift and go to state 119

state 116

    (21) function_parameters -> function_parameters COMMA VARIABLE COLON data_type .

    RPAREN          reduce using rule 21 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)
    COMMA           reduce using rule 21 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)


state 117

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression . return_statement RBRACES
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression
    (25) return_statement -> . RETURN expression

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55
    RETURN          shift and go to state 120

    return_statement               shift and go to state 121

state 118

    (15) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statements                     shift and go to state 122
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 119

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement . RBRACES

    RBRACES         shift and go to state 123


state 120

    (25) return_statement -> RETURN . expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSTHAN expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression NOTEQUALS expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . expression COMMA expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . NOT expression
    (49) expression -> . VARIABLE
    (50) expression -> . type
    (51) expression -> . function_call
    (52) expression -> . empty
    (53) type -> . BOOL
    (54) type -> . DECIMAL
    (55) type -> . WSTRING
    (56) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (60) empty -> .

    LPAREN          shift and go to state 26
    NOT             shift and go to state 28
    VARIABLE        shift and go to state 29
    BOOL            shift and go to state 33
    DECIMAL         shift and go to state 34
    WSTRING         shift and go to state 35
    PLUS            reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    MULTIPLY        reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    GREATERTHAN     reduce using rule 60 (empty -> .)
    LESSTHAN        reduce using rule 60 (empty -> .)
    EQUALS          reduce using rule 60 (empty -> .)
    NOTEQUALS       reduce using rule 60 (empty -> .)
    AND             reduce using rule 60 (empty -> .)
    OR              reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    RBRACES         reduce using rule 60 (empty -> .)

    expression                     shift and go to state 124
    type                           shift and go to state 30
    function_call                  shift and go to state 31
    empty                          shift and go to state 32

state 121

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement . RBRACES

    RBRACES         shift and go to state 125


state 122

    (15) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_general
    (8) statement -> . while_statement
    (9) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (10) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (11) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (13) print_statement -> . PRINT LPAREN expression RPAREN
    (14) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (15) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (17) function_general -> . function_declaration
    (18) function_general -> . function_declaration_empty
    (16) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (26) variable_declarator -> . LET
    (27) variable_declarator -> . VAR
    (19) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES
    (20) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES

    RBRACES         shift and go to state 126
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    VAR             shift and go to state 16
    FUNC            shift and go to state 17

    statement                      shift and go to state 18
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_general               shift and go to state 7
    while_statement                shift and go to state 8
    variable_declarator            shift and go to state 9
    function_declaration           shift and go to state 12
    function_declaration_empty     shift and go to state 13

state 123

    (19) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .

    PRINT           reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    IF              reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    WHILE           reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    LET             reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    VAR             reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    FUNC            reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    $end            reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    RBRACES         reduce using rule 19 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES expression return_statement RBRACES .)


state 124

    (25) return_statement -> RETURN expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSTHAN expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . NOTEQUALS expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (46) expression -> expression . COMMA expression

    RBRACES         reduce using rule 25 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GREATERTHAN     shift and go to state 49
    LESSTHAN        shift and go to state 50
    EQUALS          shift and go to state 51
    NOTEQUALS       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    COMMA           shift and go to state 55


state 125

    (20) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .

    PRINT           reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    IF              reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    WHILE           reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    LET             reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    VAR             reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    FUNC            reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    $end            reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)
    RBRACES         reduce using rule 20 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES expression return_statement RBRACES .)


state 126

    (15) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .

    PRINT           reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IF              reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    WHILE           reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    LET             reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VAR             reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FUNC            reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    $end            reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 15 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 56 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 56 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 56 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 56 resolved as shift
WARNING: shift/reduce conflict for AND in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 56 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 68 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 68 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 69 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 71 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 71 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 72 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 72 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 73 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 74 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 75 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 75 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 76 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 76 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 76 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 106 resolved as shift
WARNING: reduce/reduce conflict in state 79 resolved using rule (expression -> empty)
WARNING: rejected rule (function_arguments -> empty) in state 79
WARNING: Rule (function_arguments -> empty) is never reduced
