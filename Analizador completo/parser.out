Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    BOOL
    CALLMETHOD
    CHARACTER
    CLASS
    COLLECTIONTYPE
    COMMENT
    CONTINUE
    ENUM
    GUARD
    MINUSONE
    PLUSONE
    PRIVATE
    PUBLIC
    RESIDUE
    SETVARIABLE
    STATIC
    STRUCT
    TYPEALIAS
    VALUESTYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> assignment_statement_type
Rule 6     statement -> print_statement
Rule 7     statement -> if_statement
Rule 8     statement -> function_general
Rule 9     statement -> function_call
Rule 10    statement -> function_init
Rule 11    statement -> while_statement
Rule 12    statement -> switch_statement
Rule 13    statement -> import_statement
Rule 14    statement -> for_statement
Rule 15    functionstatements -> functionstatements functionbody
Rule 16    functionstatements -> functionbody
Rule 17    functionbody -> assignment_statement
Rule 18    functionbody -> assignment_statement_type
Rule 19    functionbody -> print_statement
Rule 20    functionbody -> if_statement
Rule 21    functionbody -> while_statement
Rule 22    functionbody -> switch_statement
Rule 23    functionbody -> import_statement
Rule 24    functionbody -> for_statement
Rule 25    functionbody -> empty
Rule 26    assignment_statement -> variable_declarator VARIABLE ASSIGN expression
Rule 27    assignment_statement -> variable_declarator VARIABLE ASSIGN READLN
Rule 28    assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
Rule 29    assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block
Rule 30    assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
Rule 31    assignment_statement -> VARIABLE ASSIGN expression
Rule 32    assignment_statement -> VARIABLE ASSIGN READLN
Rule 33    assignment_statement_type -> variable_declarator VARIABLE COLON data_type
Rule 34    assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
Rule 35    assignment_statement_type -> variable_declarator multiple_variables COLON data_type
Rule 36    assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression
Rule 37    assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN
Rule 38    multiple_assign -> multiple_assign assignment_statement
Rule 39    multiple_assign -> assignment_statement
Rule 40    import_statement -> IMPORT VARIABLE
Rule 41    for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
Rule 42    for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
Rule 43    multiple_variables -> multiple_variables COMMA VARIABLE
Rule 44    multiple_variables -> VARIABLE
Rule 45    collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET
Rule 46    print_statement -> PRINT LPAREN expression RPAREN
Rule 47    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES
Rule 48    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
Rule 49    while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES
Rule 50    while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
Rule 51    switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES
Rule 52    caso -> CASE expression COLON cuerpo_caso caso
Rule 53    caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
Rule 54    cuerpo_caso -> expression
Rule 55    cuerpo_caso -> statement
Rule 56    function_general -> function_declaration
Rule 57    function_general -> function_declaration_empty
Rule 58    function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
Rule 59    function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
Rule 60    function_parameters -> function_parameters COMMA VARIABLE COLON data_type
Rule 61    function_parameters -> VARIABLE COLON data_type
Rule 62    function_return_type -> ARROW data_type
Rule 63    function_return_type -> ARROW LPAREN function_parameters RPAREN
Rule 64    function_return_type -> empty
Rule 65    return_statement -> RETURN expression
Rule 66    function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
Rule 67    variable_declarator -> LET
Rule 68    variable_declarator -> VAR
Rule 69    data_type -> INTEGER
Rule 70    data_type -> STRING
Rule 71    data_type -> BOOLEAN
Rule 72    data_type -> DOUBLE
Rule 73    data_type -> FLOAT
Rule 74    data_type -> INT
Rule 75    data_collection_type -> LSQUAREBRACKET INTEGER RSQUAREBRACKET
Rule 76    data_collection_type -> LSQUAREBRACKET STRING RSQUAREBRACKET
Rule 77    data_collection_type -> LSQUAREBRACKET BOOLEAN RSQUAREBRACKET
Rule 78    data_collection_type -> LSQUAREBRACKET DOUBLE RSQUAREBRACKET
Rule 79    data_collection_type -> LSQUAREBRACKET INT RSQUAREBRACKET
Rule 80    break_statement -> BREAK
Rule 81    expression -> expression PLUS expression
Rule 82    expression -> expression MINUS expression
Rule 83    expression -> expression MULTIPLY expression
Rule 84    expression -> expression DIVIDE expression
Rule 85    expression -> expression GREATERTHAN expression
Rule 86    expression -> expression LESSTHAN expression
Rule 87    expression -> expression EQUALS expression
Rule 88    expression -> expression NOTEQUALS expression
Rule 89    expression -> expression AND expression
Rule 90    expression -> expression OR expression
Rule 91    expression -> expression COMMA expression
Rule 92    expression -> expression COLON expression
Rule 93    expression -> LPAREN expression RPAREN
Rule 94    expression -> NOT expression
Rule 95    expression -> VARIABLE
Rule 96    expression -> type
Rule 97    expression -> function_call
Rule 98    type -> TRUE
Rule 99    type -> FALSE
Rule 100   type -> DECIMAL
Rule 101   type -> WSTRING
Rule 102   type -> NUMBER
Rule 103   function_call -> VARIABLE LPAREN function_arguments RPAREN
Rule 104   function_arguments -> function_arguments COMMA expression
Rule 105   function_arguments -> expression
Rule 106   function_arguments -> empty
Rule 107   empty -> <empty>

Terminals, with rules where they appear

AND                  : 89
ARRAY                : 
ARROW                : 62 63
ASSIGN               : 26 27 28 29 30 31 32 36 37
BOOL                 : 
BOOLEAN              : 71 77
BREAK                : 80
CALLMETHOD           : 
CASE                 : 52 53
CHARACTER            : 
CLASS                : 
COLLECTIONTYPE       : 
COLON                : 28 29 30 33 34 35 36 37 52 53 53 60 61 92
COMMA                : 43 60 91 104
COMMENT              : 
CONTINUE             : 
DECIMAL              : 100
DEFAULT              : 53
DICTIONARYTYPE       : 30
DIVIDE               : 84
DOUBLE               : 72 78
ELSE                 : 48
ENUM                 : 
EQUALS               : 87
FALSE                : 99
FLOAT                : 73
FOR                  : 41 42
FUNC                 : 58 59
GREATERTHAN          : 85
GUARD                : 
IF                   : 47 48
IMPORT               : 40
IN                   : 41 42
INIT                 : 66
INT                  : 74 79
INTEGER              : 69 75
LBRACES              : 41 42 47 48 48 49 50 51 58 59 66
LESSTHAN             : 86
LET                  : 67
LPAREN               : 46 47 48 49 50 58 59 63 66 93 103
LSQUAREBRACKET       : 45 75 76 77 78 79
MINUS                : 82
MINUSONE             : 
MULTIPLY             : 83
NOT                  : 94
NOTEQUALS            : 88
NUMBER               : 41 41 102
OPTIONALVARIABLE     : 34
OR                   : 90
PLUS                 : 81
PLUSONE              : 
PRINT                : 46
PRIVATE              : 
PUBLIC               : 
RANGE                : 41
RBRACES              : 41 42 47 48 48 49 50 51 58 59 66
READLN               : 27 32 37
REPEAT               : 50
RESIDUE              : 
RETURN               : 65
RPAREN               : 46 47 48 49 50 58 59 63 66 93 103
RSQUAREBRACKET       : 45 75 76 77 78 79
SET                  : 29
SETVARIABLE          : 
STATIC               : 
STRING               : 70 76
STRUCT               : 
SWITCH               : 51
TRUE                 : 98
TYPEALIAS            : 
VALUESTYPE           : 
VAR                  : 68
VARIABLE             : 26 27 28 29 30 31 32 33 34 36 37 40 41 42 42 43 44 51 58 59 60 61 95 103
WHILE                : 49 50
WSTRING              : 101
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4 17 38 39
assignment_statement_type : 5 18
break_statement      : 
caso                 : 51 52
collection_block     : 28 29 30
cuerpo_caso          : 52 53 53
data_collection_type : 28
data_type            : 33 34 35 36 37 60 61 62
empty                : 25 59 64 106
expression           : 26 31 36 45 46 47 48 49 50 52 53 54 65 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 94 104 105
for_statement        : 14 24
function_arguments   : 103 104
function_call        : 9 97
function_declaration : 56
function_declaration_empty : 57
function_general     : 8
function_init        : 10
function_parameters  : 58 60 63 66
function_return_type : 58 59
functionbody         : 15 16
functionstatements   : 15 58 59
if_statement         : 7 20
import_statement     : 13 23
multiple_assign      : 38
multiple_variables   : 35 43
print_statement      : 6 19
program              : 0
return_statement     : 58 59
statement            : 2 3 55
statements           : 1 2 41 42 47 48 48 49 50 66
switch_statement     : 12 22
type                 : 96
variable_declarator  : 26 27 28 29 30 33 34 35 36 37
while_statement      : 11 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    INIT            reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    REPEAT          reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    IMPORT          reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACES         reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment_statement .

    VARIABLE        reduce using rule 4 (statement -> assignment_statement .)
    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    INIT            reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)
    REPEAT          reduce using rule 4 (statement -> assignment_statement .)
    SWITCH          reduce using rule 4 (statement -> assignment_statement .)
    IMPORT          reduce using rule 4 (statement -> assignment_statement .)
    FOR             reduce using rule 4 (statement -> assignment_statement .)
    LET             reduce using rule 4 (statement -> assignment_statement .)
    VAR             reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACES         reduce using rule 4 (statement -> assignment_statement .)
    DEFAULT         reduce using rule 4 (statement -> assignment_statement .)
    CASE            reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> assignment_statement_type .

    VARIABLE        reduce using rule 5 (statement -> assignment_statement_type .)
    PRINT           reduce using rule 5 (statement -> assignment_statement_type .)
    IF              reduce using rule 5 (statement -> assignment_statement_type .)
    INIT            reduce using rule 5 (statement -> assignment_statement_type .)
    WHILE           reduce using rule 5 (statement -> assignment_statement_type .)
    REPEAT          reduce using rule 5 (statement -> assignment_statement_type .)
    SWITCH          reduce using rule 5 (statement -> assignment_statement_type .)
    IMPORT          reduce using rule 5 (statement -> assignment_statement_type .)
    FOR             reduce using rule 5 (statement -> assignment_statement_type .)
    LET             reduce using rule 5 (statement -> assignment_statement_type .)
    VAR             reduce using rule 5 (statement -> assignment_statement_type .)
    FUNC            reduce using rule 5 (statement -> assignment_statement_type .)
    $end            reduce using rule 5 (statement -> assignment_statement_type .)
    RBRACES         reduce using rule 5 (statement -> assignment_statement_type .)
    DEFAULT         reduce using rule 5 (statement -> assignment_statement_type .)
    CASE            reduce using rule 5 (statement -> assignment_statement_type .)


state 6

    (6) statement -> print_statement .

    VARIABLE        reduce using rule 6 (statement -> print_statement .)
    PRINT           reduce using rule 6 (statement -> print_statement .)
    IF              reduce using rule 6 (statement -> print_statement .)
    INIT            reduce using rule 6 (statement -> print_statement .)
    WHILE           reduce using rule 6 (statement -> print_statement .)
    REPEAT          reduce using rule 6 (statement -> print_statement .)
    SWITCH          reduce using rule 6 (statement -> print_statement .)
    IMPORT          reduce using rule 6 (statement -> print_statement .)
    FOR             reduce using rule 6 (statement -> print_statement .)
    LET             reduce using rule 6 (statement -> print_statement .)
    VAR             reduce using rule 6 (statement -> print_statement .)
    FUNC            reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)
    RBRACES         reduce using rule 6 (statement -> print_statement .)
    DEFAULT         reduce using rule 6 (statement -> print_statement .)
    CASE            reduce using rule 6 (statement -> print_statement .)


state 7

    (7) statement -> if_statement .

    VARIABLE        reduce using rule 7 (statement -> if_statement .)
    PRINT           reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    INIT            reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    REPEAT          reduce using rule 7 (statement -> if_statement .)
    SWITCH          reduce using rule 7 (statement -> if_statement .)
    IMPORT          reduce using rule 7 (statement -> if_statement .)
    FOR             reduce using rule 7 (statement -> if_statement .)
    LET             reduce using rule 7 (statement -> if_statement .)
    VAR             reduce using rule 7 (statement -> if_statement .)
    FUNC            reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACES         reduce using rule 7 (statement -> if_statement .)
    DEFAULT         reduce using rule 7 (statement -> if_statement .)
    CASE            reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> function_general .

    VARIABLE        reduce using rule 8 (statement -> function_general .)
    PRINT           reduce using rule 8 (statement -> function_general .)
    IF              reduce using rule 8 (statement -> function_general .)
    INIT            reduce using rule 8 (statement -> function_general .)
    WHILE           reduce using rule 8 (statement -> function_general .)
    REPEAT          reduce using rule 8 (statement -> function_general .)
    SWITCH          reduce using rule 8 (statement -> function_general .)
    IMPORT          reduce using rule 8 (statement -> function_general .)
    FOR             reduce using rule 8 (statement -> function_general .)
    LET             reduce using rule 8 (statement -> function_general .)
    VAR             reduce using rule 8 (statement -> function_general .)
    FUNC            reduce using rule 8 (statement -> function_general .)
    $end            reduce using rule 8 (statement -> function_general .)
    RBRACES         reduce using rule 8 (statement -> function_general .)
    DEFAULT         reduce using rule 8 (statement -> function_general .)
    CASE            reduce using rule 8 (statement -> function_general .)


state 9

    (9) statement -> function_call .

    VARIABLE        reduce using rule 9 (statement -> function_call .)
    PRINT           reduce using rule 9 (statement -> function_call .)
    IF              reduce using rule 9 (statement -> function_call .)
    INIT            reduce using rule 9 (statement -> function_call .)
    WHILE           reduce using rule 9 (statement -> function_call .)
    REPEAT          reduce using rule 9 (statement -> function_call .)
    SWITCH          reduce using rule 9 (statement -> function_call .)
    IMPORT          reduce using rule 9 (statement -> function_call .)
    FOR             reduce using rule 9 (statement -> function_call .)
    LET             reduce using rule 9 (statement -> function_call .)
    VAR             reduce using rule 9 (statement -> function_call .)
    FUNC            reduce using rule 9 (statement -> function_call .)
    $end            reduce using rule 9 (statement -> function_call .)
    RBRACES         reduce using rule 9 (statement -> function_call .)


state 10

    (10) statement -> function_init .

    VARIABLE        reduce using rule 10 (statement -> function_init .)
    PRINT           reduce using rule 10 (statement -> function_init .)
    IF              reduce using rule 10 (statement -> function_init .)
    INIT            reduce using rule 10 (statement -> function_init .)
    WHILE           reduce using rule 10 (statement -> function_init .)
    REPEAT          reduce using rule 10 (statement -> function_init .)
    SWITCH          reduce using rule 10 (statement -> function_init .)
    IMPORT          reduce using rule 10 (statement -> function_init .)
    FOR             reduce using rule 10 (statement -> function_init .)
    LET             reduce using rule 10 (statement -> function_init .)
    VAR             reduce using rule 10 (statement -> function_init .)
    FUNC            reduce using rule 10 (statement -> function_init .)
    $end            reduce using rule 10 (statement -> function_init .)
    RBRACES         reduce using rule 10 (statement -> function_init .)
    DEFAULT         reduce using rule 10 (statement -> function_init .)
    CASE            reduce using rule 10 (statement -> function_init .)


state 11

    (11) statement -> while_statement .

    VARIABLE        reduce using rule 11 (statement -> while_statement .)
    PRINT           reduce using rule 11 (statement -> while_statement .)
    IF              reduce using rule 11 (statement -> while_statement .)
    INIT            reduce using rule 11 (statement -> while_statement .)
    WHILE           reduce using rule 11 (statement -> while_statement .)
    REPEAT          reduce using rule 11 (statement -> while_statement .)
    SWITCH          reduce using rule 11 (statement -> while_statement .)
    IMPORT          reduce using rule 11 (statement -> while_statement .)
    FOR             reduce using rule 11 (statement -> while_statement .)
    LET             reduce using rule 11 (statement -> while_statement .)
    VAR             reduce using rule 11 (statement -> while_statement .)
    FUNC            reduce using rule 11 (statement -> while_statement .)
    $end            reduce using rule 11 (statement -> while_statement .)
    RBRACES         reduce using rule 11 (statement -> while_statement .)
    DEFAULT         reduce using rule 11 (statement -> while_statement .)
    CASE            reduce using rule 11 (statement -> while_statement .)


state 12

    (12) statement -> switch_statement .

    VARIABLE        reduce using rule 12 (statement -> switch_statement .)
    PRINT           reduce using rule 12 (statement -> switch_statement .)
    IF              reduce using rule 12 (statement -> switch_statement .)
    INIT            reduce using rule 12 (statement -> switch_statement .)
    WHILE           reduce using rule 12 (statement -> switch_statement .)
    REPEAT          reduce using rule 12 (statement -> switch_statement .)
    SWITCH          reduce using rule 12 (statement -> switch_statement .)
    IMPORT          reduce using rule 12 (statement -> switch_statement .)
    FOR             reduce using rule 12 (statement -> switch_statement .)
    LET             reduce using rule 12 (statement -> switch_statement .)
    VAR             reduce using rule 12 (statement -> switch_statement .)
    FUNC            reduce using rule 12 (statement -> switch_statement .)
    $end            reduce using rule 12 (statement -> switch_statement .)
    RBRACES         reduce using rule 12 (statement -> switch_statement .)
    DEFAULT         reduce using rule 12 (statement -> switch_statement .)
    CASE            reduce using rule 12 (statement -> switch_statement .)


state 13

    (13) statement -> import_statement .

    VARIABLE        reduce using rule 13 (statement -> import_statement .)
    PRINT           reduce using rule 13 (statement -> import_statement .)
    IF              reduce using rule 13 (statement -> import_statement .)
    INIT            reduce using rule 13 (statement -> import_statement .)
    WHILE           reduce using rule 13 (statement -> import_statement .)
    REPEAT          reduce using rule 13 (statement -> import_statement .)
    SWITCH          reduce using rule 13 (statement -> import_statement .)
    IMPORT          reduce using rule 13 (statement -> import_statement .)
    FOR             reduce using rule 13 (statement -> import_statement .)
    LET             reduce using rule 13 (statement -> import_statement .)
    VAR             reduce using rule 13 (statement -> import_statement .)
    FUNC            reduce using rule 13 (statement -> import_statement .)
    $end            reduce using rule 13 (statement -> import_statement .)
    RBRACES         reduce using rule 13 (statement -> import_statement .)
    DEFAULT         reduce using rule 13 (statement -> import_statement .)
    CASE            reduce using rule 13 (statement -> import_statement .)


state 14

    (14) statement -> for_statement .

    VARIABLE        reduce using rule 14 (statement -> for_statement .)
    PRINT           reduce using rule 14 (statement -> for_statement .)
    IF              reduce using rule 14 (statement -> for_statement .)
    INIT            reduce using rule 14 (statement -> for_statement .)
    WHILE           reduce using rule 14 (statement -> for_statement .)
    REPEAT          reduce using rule 14 (statement -> for_statement .)
    SWITCH          reduce using rule 14 (statement -> for_statement .)
    IMPORT          reduce using rule 14 (statement -> for_statement .)
    FOR             reduce using rule 14 (statement -> for_statement .)
    LET             reduce using rule 14 (statement -> for_statement .)
    VAR             reduce using rule 14 (statement -> for_statement .)
    FUNC            reduce using rule 14 (statement -> for_statement .)
    $end            reduce using rule 14 (statement -> for_statement .)
    RBRACES         reduce using rule 14 (statement -> for_statement .)
    DEFAULT         reduce using rule 14 (statement -> for_statement .)
    CASE            reduce using rule 14 (statement -> for_statement .)


state 15

    (26) assignment_statement -> variable_declarator . VARIABLE ASSIGN expression
    (27) assignment_statement -> variable_declarator . VARIABLE ASSIGN READLN
    (28) assignment_statement -> variable_declarator . VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> variable_declarator . VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> variable_declarator . VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (33) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type
    (34) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> variable_declarator . multiple_variables COLON data_type
    (36) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type ASSIGN READLN
    (43) multiple_variables -> . multiple_variables COMMA VARIABLE
    (44) multiple_variables -> . VARIABLE

    VARIABLE        shift and go to state 31

    multiple_variables             shift and go to state 32

state 16

    (31) assignment_statement -> VARIABLE . ASSIGN expression
    (32) assignment_statement -> VARIABLE . ASSIGN READLN
    (103) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    ASSIGN          shift and go to state 33
    LPAREN          shift and go to state 34


state 17

    (46) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 35


state 18

    (47) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LPAREN          shift and go to state 36


state 19

    (56) function_general -> function_declaration .

    VARIABLE        reduce using rule 56 (function_general -> function_declaration .)
    PRINT           reduce using rule 56 (function_general -> function_declaration .)
    IF              reduce using rule 56 (function_general -> function_declaration .)
    INIT            reduce using rule 56 (function_general -> function_declaration .)
    WHILE           reduce using rule 56 (function_general -> function_declaration .)
    REPEAT          reduce using rule 56 (function_general -> function_declaration .)
    SWITCH          reduce using rule 56 (function_general -> function_declaration .)
    IMPORT          reduce using rule 56 (function_general -> function_declaration .)
    FOR             reduce using rule 56 (function_general -> function_declaration .)
    LET             reduce using rule 56 (function_general -> function_declaration .)
    VAR             reduce using rule 56 (function_general -> function_declaration .)
    FUNC            reduce using rule 56 (function_general -> function_declaration .)
    $end            reduce using rule 56 (function_general -> function_declaration .)
    RBRACES         reduce using rule 56 (function_general -> function_declaration .)
    DEFAULT         reduce using rule 56 (function_general -> function_declaration .)
    CASE            reduce using rule 56 (function_general -> function_declaration .)


state 20

    (57) function_general -> function_declaration_empty .

    VARIABLE        reduce using rule 57 (function_general -> function_declaration_empty .)
    PRINT           reduce using rule 57 (function_general -> function_declaration_empty .)
    IF              reduce using rule 57 (function_general -> function_declaration_empty .)
    INIT            reduce using rule 57 (function_general -> function_declaration_empty .)
    WHILE           reduce using rule 57 (function_general -> function_declaration_empty .)
    REPEAT          reduce using rule 57 (function_general -> function_declaration_empty .)
    SWITCH          reduce using rule 57 (function_general -> function_declaration_empty .)
    IMPORT          reduce using rule 57 (function_general -> function_declaration_empty .)
    FOR             reduce using rule 57 (function_general -> function_declaration_empty .)
    LET             reduce using rule 57 (function_general -> function_declaration_empty .)
    VAR             reduce using rule 57 (function_general -> function_declaration_empty .)
    FUNC            reduce using rule 57 (function_general -> function_declaration_empty .)
    $end            reduce using rule 57 (function_general -> function_declaration_empty .)
    RBRACES         reduce using rule 57 (function_general -> function_declaration_empty .)
    DEFAULT         reduce using rule 57 (function_general -> function_declaration_empty .)
    CASE            reduce using rule 57 (function_general -> function_declaration_empty .)


state 21

    (66) function_init -> INIT . LPAREN function_parameters RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 37


state 22

    (49) while_statement -> WHILE . LPAREN expression RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 38


state 23

    (50) while_statement -> REPEAT . LBRACES statements RBRACES WHILE LPAREN expression RPAREN

    LBRACES         shift and go to state 39


state 24

    (51) switch_statement -> SWITCH . VARIABLE LBRACES caso RBRACES

    VARIABLE        shift and go to state 40


state 25

    (40) import_statement -> IMPORT . VARIABLE

    VARIABLE        shift and go to state 41


state 26

    (41) for_statement -> FOR . VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> FOR . VARIABLE IN VARIABLE LBRACES statements RBRACES

    VARIABLE        shift and go to state 42


state 27

    (67) variable_declarator -> LET .

    VARIABLE        reduce using rule 67 (variable_declarator -> LET .)


state 28

    (68) variable_declarator -> VAR .

    VARIABLE        reduce using rule 68 (variable_declarator -> VAR .)


state 29

    (58) function_declaration -> FUNC . VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> FUNC . VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 43


state 30

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    INIT            reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACES         reduce using rule 2 (statements -> statements statement .)


state 31

    (26) assignment_statement -> variable_declarator VARIABLE . ASSIGN expression
    (27) assignment_statement -> variable_declarator VARIABLE . ASSIGN READLN
    (28) assignment_statement -> variable_declarator VARIABLE . COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> variable_declarator VARIABLE . COLON SET ASSIGN collection_block
    (30) assignment_statement -> variable_declarator VARIABLE . COLON DICTIONARYTYPE ASSIGN collection_block
    (33) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type
    (34) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type OPTIONALVARIABLE
    (36) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type ASSIGN expression
    (37) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type ASSIGN READLN
    (44) multiple_variables -> VARIABLE .

  ! shift/reduce conflict for COLON resolved as shift
    ASSIGN          shift and go to state 44
    COLON           shift and go to state 45
    COMMA           reduce using rule 44 (multiple_variables -> VARIABLE .)

  ! COLON           [ reduce using rule 44 (multiple_variables -> VARIABLE .) ]


state 32

    (35) assignment_statement_type -> variable_declarator multiple_variables . COLON data_type
    (43) multiple_variables -> multiple_variables . COMMA VARIABLE

    COLON           shift and go to state 46
    COMMA           shift and go to state 47


state 33

    (31) assignment_statement -> VARIABLE ASSIGN . expression
    (32) assignment_statement -> VARIABLE ASSIGN . READLN
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    READLN          shift and go to state 50
    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 49
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 34

    (103) function_call -> VARIABLE LPAREN . function_arguments RPAREN
    (104) function_arguments -> . function_arguments COMMA expression
    (105) function_arguments -> . expression
    (106) function_arguments -> . empty
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (107) empty -> .
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    RPAREN          reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    function_arguments             shift and go to state 60
    expression                     shift and go to state 61
    empty                          shift and go to state 62
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 35

    (46) print_statement -> PRINT LPAREN . expression RPAREN
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 63
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 36

    (47) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 64
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 37

    (66) function_init -> INIT LPAREN . function_parameters RPAREN LBRACES statements RBRACES
    (60) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (61) function_parameters -> . VARIABLE COLON data_type

    VARIABLE        shift and go to state 66

    function_parameters            shift and go to state 65

state 38

    (49) while_statement -> WHILE LPAREN . expression RPAREN LBRACES statements RBRACES
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 67
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 39

    (50) while_statement -> REPEAT LBRACES . statements RBRACES WHILE LPAREN expression RPAREN
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 68
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 40

    (51) switch_statement -> SWITCH VARIABLE . LBRACES caso RBRACES

    LBRACES         shift and go to state 69


state 41

    (40) import_statement -> IMPORT VARIABLE .

    VARIABLE        reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    PRINT           reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    IF              reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    INIT            reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    WHILE           reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    REPEAT          reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    SWITCH          reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    IMPORT          reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    FOR             reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    LET             reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    VAR             reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    FUNC            reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    $end            reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    RBRACES         reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    DEFAULT         reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    CASE            reduce using rule 40 (import_statement -> IMPORT VARIABLE .)
    RETURN          reduce using rule 40 (import_statement -> IMPORT VARIABLE .)


state 42

    (41) for_statement -> FOR VARIABLE . IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> FOR VARIABLE . IN VARIABLE LBRACES statements RBRACES

    IN              shift and go to state 70


state 43

    (58) function_declaration -> FUNC VARIABLE . LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> FUNC VARIABLE . LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 71


state 44

    (26) assignment_statement -> variable_declarator VARIABLE ASSIGN . expression
    (27) assignment_statement -> variable_declarator VARIABLE ASSIGN . READLN
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    READLN          shift and go to state 73
    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 72
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 45

    (28) assignment_statement -> variable_declarator VARIABLE COLON . data_collection_type ASSIGN collection_block
    (29) assignment_statement -> variable_declarator VARIABLE COLON . SET ASSIGN collection_block
    (30) assignment_statement -> variable_declarator VARIABLE COLON . DICTIONARYTYPE ASSIGN collection_block
    (33) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type
    (34) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type OPTIONALVARIABLE
    (36) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type ASSIGN expression
    (37) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type ASSIGN READLN
    (75) data_collection_type -> . LSQUAREBRACKET INTEGER RSQUAREBRACKET
    (76) data_collection_type -> . LSQUAREBRACKET STRING RSQUAREBRACKET
    (77) data_collection_type -> . LSQUAREBRACKET BOOLEAN RSQUAREBRACKET
    (78) data_collection_type -> . LSQUAREBRACKET DOUBLE RSQUAREBRACKET
    (79) data_collection_type -> . LSQUAREBRACKET INT RSQUAREBRACKET
    (69) data_type -> . INTEGER
    (70) data_type -> . STRING
    (71) data_type -> . BOOLEAN
    (72) data_type -> . DOUBLE
    (73) data_type -> . FLOAT
    (74) data_type -> . INT

    SET             shift and go to state 75
    DICTIONARYTYPE  shift and go to state 76
    LSQUAREBRACKET  shift and go to state 78
    INTEGER         shift and go to state 79
    STRING          shift and go to state 80
    BOOLEAN         shift and go to state 81
    DOUBLE          shift and go to state 82
    FLOAT           shift and go to state 84
    INT             shift and go to state 83

    data_collection_type           shift and go to state 74
    data_type                      shift and go to state 77

state 46

    (35) assignment_statement_type -> variable_declarator multiple_variables COLON . data_type
    (69) data_type -> . INTEGER
    (70) data_type -> . STRING
    (71) data_type -> . BOOLEAN
    (72) data_type -> . DOUBLE
    (73) data_type -> . FLOAT
    (74) data_type -> . INT

    INTEGER         shift and go to state 79
    STRING          shift and go to state 80
    BOOLEAN         shift and go to state 81
    DOUBLE          shift and go to state 82
    FLOAT           shift and go to state 84
    INT             shift and go to state 83

    data_type                      shift and go to state 85

state 47

    (43) multiple_variables -> multiple_variables COMMA . VARIABLE

    VARIABLE        shift and go to state 86


state 48

    (95) expression -> VARIABLE .
    (103) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    PLUS            reduce using rule 95 (expression -> VARIABLE .)
    MINUS           reduce using rule 95 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 95 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 95 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 95 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 95 (expression -> VARIABLE .)
    EQUALS          reduce using rule 95 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 95 (expression -> VARIABLE .)
    AND             reduce using rule 95 (expression -> VARIABLE .)
    OR              reduce using rule 95 (expression -> VARIABLE .)
    COMMA           reduce using rule 95 (expression -> VARIABLE .)
    COLON           reduce using rule 95 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 95 (expression -> VARIABLE .)
    PRINT           reduce using rule 95 (expression -> VARIABLE .)
    IF              reduce using rule 95 (expression -> VARIABLE .)
    INIT            reduce using rule 95 (expression -> VARIABLE .)
    WHILE           reduce using rule 95 (expression -> VARIABLE .)
    REPEAT          reduce using rule 95 (expression -> VARIABLE .)
    SWITCH          reduce using rule 95 (expression -> VARIABLE .)
    IMPORT          reduce using rule 95 (expression -> VARIABLE .)
    FOR             reduce using rule 95 (expression -> VARIABLE .)
    LET             reduce using rule 95 (expression -> VARIABLE .)
    VAR             reduce using rule 95 (expression -> VARIABLE .)
    FUNC            reduce using rule 95 (expression -> VARIABLE .)
    $end            reduce using rule 95 (expression -> VARIABLE .)
    RBRACES         reduce using rule 95 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 95 (expression -> VARIABLE .)
    CASE            reduce using rule 95 (expression -> VARIABLE .)
    RETURN          reduce using rule 95 (expression -> VARIABLE .)
    RPAREN          reduce using rule 95 (expression -> VARIABLE .)
    RSQUAREBRACKET  reduce using rule 95 (expression -> VARIABLE .)
    LPAREN          shift and go to state 34


state 49

    (31) assignment_statement -> VARIABLE ASSIGN expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    VARIABLE        reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    INIT            reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    REPEAT          reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    IMPORT          reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    FOR             reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    LET             reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    VAR             reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 31 (assignment_statement -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 50

    (32) assignment_statement -> VARIABLE ASSIGN READLN .

    VARIABLE        reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    PRINT           reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    IF              reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    INIT            reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    WHILE           reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    REPEAT          reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    SWITCH          reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    IMPORT          reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    FOR             reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    LET             reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    VAR             reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    FUNC            reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    $end            reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    RBRACES         reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    DEFAULT         reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    CASE            reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)
    RETURN          reduce using rule 32 (assignment_statement -> VARIABLE ASSIGN READLN .)


state 51

    (93) expression -> LPAREN . expression RPAREN
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 99
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 52

    (94) expression -> NOT . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 100
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 53

    (96) expression -> type .

    PLUS            reduce using rule 96 (expression -> type .)
    MINUS           reduce using rule 96 (expression -> type .)
    MULTIPLY        reduce using rule 96 (expression -> type .)
    DIVIDE          reduce using rule 96 (expression -> type .)
    GREATERTHAN     reduce using rule 96 (expression -> type .)
    LESSTHAN        reduce using rule 96 (expression -> type .)
    EQUALS          reduce using rule 96 (expression -> type .)
    NOTEQUALS       reduce using rule 96 (expression -> type .)
    AND             reduce using rule 96 (expression -> type .)
    OR              reduce using rule 96 (expression -> type .)
    COMMA           reduce using rule 96 (expression -> type .)
    COLON           reduce using rule 96 (expression -> type .)
    VARIABLE        reduce using rule 96 (expression -> type .)
    PRINT           reduce using rule 96 (expression -> type .)
    IF              reduce using rule 96 (expression -> type .)
    INIT            reduce using rule 96 (expression -> type .)
    WHILE           reduce using rule 96 (expression -> type .)
    REPEAT          reduce using rule 96 (expression -> type .)
    SWITCH          reduce using rule 96 (expression -> type .)
    IMPORT          reduce using rule 96 (expression -> type .)
    FOR             reduce using rule 96 (expression -> type .)
    LET             reduce using rule 96 (expression -> type .)
    VAR             reduce using rule 96 (expression -> type .)
    FUNC            reduce using rule 96 (expression -> type .)
    $end            reduce using rule 96 (expression -> type .)
    RBRACES         reduce using rule 96 (expression -> type .)
    DEFAULT         reduce using rule 96 (expression -> type .)
    CASE            reduce using rule 96 (expression -> type .)
    RETURN          reduce using rule 96 (expression -> type .)
    RPAREN          reduce using rule 96 (expression -> type .)
    RSQUAREBRACKET  reduce using rule 96 (expression -> type .)


state 54

    (97) expression -> function_call .

    PLUS            reduce using rule 97 (expression -> function_call .)
    MINUS           reduce using rule 97 (expression -> function_call .)
    MULTIPLY        reduce using rule 97 (expression -> function_call .)
    DIVIDE          reduce using rule 97 (expression -> function_call .)
    GREATERTHAN     reduce using rule 97 (expression -> function_call .)
    LESSTHAN        reduce using rule 97 (expression -> function_call .)
    EQUALS          reduce using rule 97 (expression -> function_call .)
    NOTEQUALS       reduce using rule 97 (expression -> function_call .)
    AND             reduce using rule 97 (expression -> function_call .)
    OR              reduce using rule 97 (expression -> function_call .)
    COMMA           reduce using rule 97 (expression -> function_call .)
    COLON           reduce using rule 97 (expression -> function_call .)
    VARIABLE        reduce using rule 97 (expression -> function_call .)
    PRINT           reduce using rule 97 (expression -> function_call .)
    IF              reduce using rule 97 (expression -> function_call .)
    INIT            reduce using rule 97 (expression -> function_call .)
    WHILE           reduce using rule 97 (expression -> function_call .)
    REPEAT          reduce using rule 97 (expression -> function_call .)
    SWITCH          reduce using rule 97 (expression -> function_call .)
    IMPORT          reduce using rule 97 (expression -> function_call .)
    FOR             reduce using rule 97 (expression -> function_call .)
    LET             reduce using rule 97 (expression -> function_call .)
    VAR             reduce using rule 97 (expression -> function_call .)
    FUNC            reduce using rule 97 (expression -> function_call .)
    $end            reduce using rule 97 (expression -> function_call .)
    RBRACES         reduce using rule 97 (expression -> function_call .)
    DEFAULT         reduce using rule 97 (expression -> function_call .)
    CASE            reduce using rule 97 (expression -> function_call .)
    RETURN          reduce using rule 97 (expression -> function_call .)
    RPAREN          reduce using rule 97 (expression -> function_call .)
    RSQUAREBRACKET  reduce using rule 97 (expression -> function_call .)


state 55

    (98) type -> TRUE .

    PLUS            reduce using rule 98 (type -> TRUE .)
    MINUS           reduce using rule 98 (type -> TRUE .)
    MULTIPLY        reduce using rule 98 (type -> TRUE .)
    DIVIDE          reduce using rule 98 (type -> TRUE .)
    GREATERTHAN     reduce using rule 98 (type -> TRUE .)
    LESSTHAN        reduce using rule 98 (type -> TRUE .)
    EQUALS          reduce using rule 98 (type -> TRUE .)
    NOTEQUALS       reduce using rule 98 (type -> TRUE .)
    AND             reduce using rule 98 (type -> TRUE .)
    OR              reduce using rule 98 (type -> TRUE .)
    COMMA           reduce using rule 98 (type -> TRUE .)
    COLON           reduce using rule 98 (type -> TRUE .)
    VARIABLE        reduce using rule 98 (type -> TRUE .)
    PRINT           reduce using rule 98 (type -> TRUE .)
    IF              reduce using rule 98 (type -> TRUE .)
    INIT            reduce using rule 98 (type -> TRUE .)
    WHILE           reduce using rule 98 (type -> TRUE .)
    REPEAT          reduce using rule 98 (type -> TRUE .)
    SWITCH          reduce using rule 98 (type -> TRUE .)
    IMPORT          reduce using rule 98 (type -> TRUE .)
    FOR             reduce using rule 98 (type -> TRUE .)
    LET             reduce using rule 98 (type -> TRUE .)
    VAR             reduce using rule 98 (type -> TRUE .)
    FUNC            reduce using rule 98 (type -> TRUE .)
    $end            reduce using rule 98 (type -> TRUE .)
    RBRACES         reduce using rule 98 (type -> TRUE .)
    DEFAULT         reduce using rule 98 (type -> TRUE .)
    CASE            reduce using rule 98 (type -> TRUE .)
    RETURN          reduce using rule 98 (type -> TRUE .)
    RPAREN          reduce using rule 98 (type -> TRUE .)
    RSQUAREBRACKET  reduce using rule 98 (type -> TRUE .)


state 56

    (99) type -> FALSE .

    PLUS            reduce using rule 99 (type -> FALSE .)
    MINUS           reduce using rule 99 (type -> FALSE .)
    MULTIPLY        reduce using rule 99 (type -> FALSE .)
    DIVIDE          reduce using rule 99 (type -> FALSE .)
    GREATERTHAN     reduce using rule 99 (type -> FALSE .)
    LESSTHAN        reduce using rule 99 (type -> FALSE .)
    EQUALS          reduce using rule 99 (type -> FALSE .)
    NOTEQUALS       reduce using rule 99 (type -> FALSE .)
    AND             reduce using rule 99 (type -> FALSE .)
    OR              reduce using rule 99 (type -> FALSE .)
    COMMA           reduce using rule 99 (type -> FALSE .)
    COLON           reduce using rule 99 (type -> FALSE .)
    VARIABLE        reduce using rule 99 (type -> FALSE .)
    PRINT           reduce using rule 99 (type -> FALSE .)
    IF              reduce using rule 99 (type -> FALSE .)
    INIT            reduce using rule 99 (type -> FALSE .)
    WHILE           reduce using rule 99 (type -> FALSE .)
    REPEAT          reduce using rule 99 (type -> FALSE .)
    SWITCH          reduce using rule 99 (type -> FALSE .)
    IMPORT          reduce using rule 99 (type -> FALSE .)
    FOR             reduce using rule 99 (type -> FALSE .)
    LET             reduce using rule 99 (type -> FALSE .)
    VAR             reduce using rule 99 (type -> FALSE .)
    FUNC            reduce using rule 99 (type -> FALSE .)
    $end            reduce using rule 99 (type -> FALSE .)
    RBRACES         reduce using rule 99 (type -> FALSE .)
    DEFAULT         reduce using rule 99 (type -> FALSE .)
    CASE            reduce using rule 99 (type -> FALSE .)
    RETURN          reduce using rule 99 (type -> FALSE .)
    RPAREN          reduce using rule 99 (type -> FALSE .)
    RSQUAREBRACKET  reduce using rule 99 (type -> FALSE .)


state 57

    (100) type -> DECIMAL .

    PLUS            reduce using rule 100 (type -> DECIMAL .)
    MINUS           reduce using rule 100 (type -> DECIMAL .)
    MULTIPLY        reduce using rule 100 (type -> DECIMAL .)
    DIVIDE          reduce using rule 100 (type -> DECIMAL .)
    GREATERTHAN     reduce using rule 100 (type -> DECIMAL .)
    LESSTHAN        reduce using rule 100 (type -> DECIMAL .)
    EQUALS          reduce using rule 100 (type -> DECIMAL .)
    NOTEQUALS       reduce using rule 100 (type -> DECIMAL .)
    AND             reduce using rule 100 (type -> DECIMAL .)
    OR              reduce using rule 100 (type -> DECIMAL .)
    COMMA           reduce using rule 100 (type -> DECIMAL .)
    COLON           reduce using rule 100 (type -> DECIMAL .)
    VARIABLE        reduce using rule 100 (type -> DECIMAL .)
    PRINT           reduce using rule 100 (type -> DECIMAL .)
    IF              reduce using rule 100 (type -> DECIMAL .)
    INIT            reduce using rule 100 (type -> DECIMAL .)
    WHILE           reduce using rule 100 (type -> DECIMAL .)
    REPEAT          reduce using rule 100 (type -> DECIMAL .)
    SWITCH          reduce using rule 100 (type -> DECIMAL .)
    IMPORT          reduce using rule 100 (type -> DECIMAL .)
    FOR             reduce using rule 100 (type -> DECIMAL .)
    LET             reduce using rule 100 (type -> DECIMAL .)
    VAR             reduce using rule 100 (type -> DECIMAL .)
    FUNC            reduce using rule 100 (type -> DECIMAL .)
    $end            reduce using rule 100 (type -> DECIMAL .)
    RBRACES         reduce using rule 100 (type -> DECIMAL .)
    DEFAULT         reduce using rule 100 (type -> DECIMAL .)
    CASE            reduce using rule 100 (type -> DECIMAL .)
    RETURN          reduce using rule 100 (type -> DECIMAL .)
    RPAREN          reduce using rule 100 (type -> DECIMAL .)
    RSQUAREBRACKET  reduce using rule 100 (type -> DECIMAL .)


state 58

    (101) type -> WSTRING .

    PLUS            reduce using rule 101 (type -> WSTRING .)
    MINUS           reduce using rule 101 (type -> WSTRING .)
    MULTIPLY        reduce using rule 101 (type -> WSTRING .)
    DIVIDE          reduce using rule 101 (type -> WSTRING .)
    GREATERTHAN     reduce using rule 101 (type -> WSTRING .)
    LESSTHAN        reduce using rule 101 (type -> WSTRING .)
    EQUALS          reduce using rule 101 (type -> WSTRING .)
    NOTEQUALS       reduce using rule 101 (type -> WSTRING .)
    AND             reduce using rule 101 (type -> WSTRING .)
    OR              reduce using rule 101 (type -> WSTRING .)
    COMMA           reduce using rule 101 (type -> WSTRING .)
    COLON           reduce using rule 101 (type -> WSTRING .)
    VARIABLE        reduce using rule 101 (type -> WSTRING .)
    PRINT           reduce using rule 101 (type -> WSTRING .)
    IF              reduce using rule 101 (type -> WSTRING .)
    INIT            reduce using rule 101 (type -> WSTRING .)
    WHILE           reduce using rule 101 (type -> WSTRING .)
    REPEAT          reduce using rule 101 (type -> WSTRING .)
    SWITCH          reduce using rule 101 (type -> WSTRING .)
    IMPORT          reduce using rule 101 (type -> WSTRING .)
    FOR             reduce using rule 101 (type -> WSTRING .)
    LET             reduce using rule 101 (type -> WSTRING .)
    VAR             reduce using rule 101 (type -> WSTRING .)
    FUNC            reduce using rule 101 (type -> WSTRING .)
    $end            reduce using rule 101 (type -> WSTRING .)
    RBRACES         reduce using rule 101 (type -> WSTRING .)
    DEFAULT         reduce using rule 101 (type -> WSTRING .)
    CASE            reduce using rule 101 (type -> WSTRING .)
    RETURN          reduce using rule 101 (type -> WSTRING .)
    RPAREN          reduce using rule 101 (type -> WSTRING .)
    RSQUAREBRACKET  reduce using rule 101 (type -> WSTRING .)


state 59

    (102) type -> NUMBER .

    PLUS            reduce using rule 102 (type -> NUMBER .)
    MINUS           reduce using rule 102 (type -> NUMBER .)
    MULTIPLY        reduce using rule 102 (type -> NUMBER .)
    DIVIDE          reduce using rule 102 (type -> NUMBER .)
    GREATERTHAN     reduce using rule 102 (type -> NUMBER .)
    LESSTHAN        reduce using rule 102 (type -> NUMBER .)
    EQUALS          reduce using rule 102 (type -> NUMBER .)
    NOTEQUALS       reduce using rule 102 (type -> NUMBER .)
    AND             reduce using rule 102 (type -> NUMBER .)
    OR              reduce using rule 102 (type -> NUMBER .)
    COMMA           reduce using rule 102 (type -> NUMBER .)
    COLON           reduce using rule 102 (type -> NUMBER .)
    VARIABLE        reduce using rule 102 (type -> NUMBER .)
    PRINT           reduce using rule 102 (type -> NUMBER .)
    IF              reduce using rule 102 (type -> NUMBER .)
    INIT            reduce using rule 102 (type -> NUMBER .)
    WHILE           reduce using rule 102 (type -> NUMBER .)
    REPEAT          reduce using rule 102 (type -> NUMBER .)
    SWITCH          reduce using rule 102 (type -> NUMBER .)
    IMPORT          reduce using rule 102 (type -> NUMBER .)
    FOR             reduce using rule 102 (type -> NUMBER .)
    LET             reduce using rule 102 (type -> NUMBER .)
    VAR             reduce using rule 102 (type -> NUMBER .)
    FUNC            reduce using rule 102 (type -> NUMBER .)
    $end            reduce using rule 102 (type -> NUMBER .)
    RBRACES         reduce using rule 102 (type -> NUMBER .)
    DEFAULT         reduce using rule 102 (type -> NUMBER .)
    CASE            reduce using rule 102 (type -> NUMBER .)
    RETURN          reduce using rule 102 (type -> NUMBER .)
    RPAREN          reduce using rule 102 (type -> NUMBER .)
    RSQUAREBRACKET  reduce using rule 102 (type -> NUMBER .)


state 60

    (103) function_call -> VARIABLE LPAREN function_arguments . RPAREN
    (104) function_arguments -> function_arguments . COMMA expression

    RPAREN          shift and go to state 101
    COMMA           shift and go to state 102


state 61

    (105) function_arguments -> expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 105 (function_arguments -> expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! COMMA           [ reduce using rule 105 (function_arguments -> expression .) ]


state 62

    (106) function_arguments -> empty .

    RPAREN          reduce using rule 106 (function_arguments -> empty .)
    COMMA           reduce using rule 106 (function_arguments -> empty .)


state 63

    (46) print_statement -> PRINT LPAREN expression . RPAREN
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 64

    (47) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES
    (48) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RPAREN          shift and go to state 104
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 65

    (66) function_init -> INIT LPAREN function_parameters . RPAREN LBRACES statements RBRACES
    (60) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 106


state 66

    (61) function_parameters -> VARIABLE . COLON data_type

    COLON           shift and go to state 107


state 67

    (49) while_statement -> WHILE LPAREN expression . RPAREN LBRACES statements RBRACES
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RPAREN          shift and go to state 108
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 68

    (50) while_statement -> REPEAT LBRACES statements . RBRACES WHILE LPAREN expression RPAREN
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 109
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 69

    (51) switch_statement -> SWITCH VARIABLE LBRACES . caso RBRACES
    (52) caso -> . CASE expression COLON cuerpo_caso caso
    (53) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    CASE            shift and go to state 111

    caso                           shift and go to state 110

state 70

    (41) for_statement -> FOR VARIABLE IN . NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> FOR VARIABLE IN . VARIABLE LBRACES statements RBRACES

    NUMBER          shift and go to state 113
    VARIABLE        shift and go to state 112


state 71

    (58) function_declaration -> FUNC VARIABLE LPAREN . function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> FUNC VARIABLE LPAREN . empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (60) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (61) function_parameters -> . VARIABLE COLON data_type
    (107) empty -> .

    VARIABLE        shift and go to state 66
    RPAREN          reduce using rule 107 (empty -> .)

    function_parameters            shift and go to state 114
    empty                          shift and go to state 115

state 72

    (26) assignment_statement -> variable_declarator VARIABLE ASSIGN expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    VARIABLE        reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IF              reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    INIT            reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    REPEAT          reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IMPORT          reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FOR             reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    LET             reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    VAR             reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    $end            reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    CASE            reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 26 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 73

    (27) assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .

    VARIABLE        reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    PRINT           reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    IF              reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    INIT            reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    WHILE           reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    REPEAT          reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    SWITCH          reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    IMPORT          reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    FOR             reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    LET             reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    VAR             reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    FUNC            reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    $end            reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    RBRACES         reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    DEFAULT         reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    CASE            reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    RETURN          reduce using rule 27 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)


state 74

    (28) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type . ASSIGN collection_block

    ASSIGN          shift and go to state 116


state 75

    (29) assignment_statement -> variable_declarator VARIABLE COLON SET . ASSIGN collection_block

    ASSIGN          shift and go to state 117


state 76

    (30) assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE . ASSIGN collection_block

    ASSIGN          shift and go to state 118


state 77

    (33) assignment_statement_type -> variable_declarator VARIABLE COLON data_type .
    (34) assignment_statement_type -> variable_declarator VARIABLE COLON data_type . OPTIONALVARIABLE
    (36) assignment_statement_type -> variable_declarator VARIABLE COLON data_type . ASSIGN expression
    (37) assignment_statement_type -> variable_declarator VARIABLE COLON data_type . ASSIGN READLN

    VARIABLE        reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    PRINT           reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    IF              reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    INIT            reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    WHILE           reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    REPEAT          reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    SWITCH          reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    IMPORT          reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    FOR             reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    LET             reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    VAR             reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    FUNC            reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    $end            reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    RBRACES         reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    DEFAULT         reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    CASE            reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    RETURN          reduce using rule 33 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    OPTIONALVARIABLE shift and go to state 119
    ASSIGN          shift and go to state 120


state 78

    (75) data_collection_type -> LSQUAREBRACKET . INTEGER RSQUAREBRACKET
    (76) data_collection_type -> LSQUAREBRACKET . STRING RSQUAREBRACKET
    (77) data_collection_type -> LSQUAREBRACKET . BOOLEAN RSQUAREBRACKET
    (78) data_collection_type -> LSQUAREBRACKET . DOUBLE RSQUAREBRACKET
    (79) data_collection_type -> LSQUAREBRACKET . INT RSQUAREBRACKET

    INTEGER         shift and go to state 121
    STRING          shift and go to state 122
    BOOLEAN         shift and go to state 123
    DOUBLE          shift and go to state 124
    INT             shift and go to state 125


state 79

    (69) data_type -> INTEGER .

    OPTIONALVARIABLE reduce using rule 69 (data_type -> INTEGER .)
    ASSIGN          reduce using rule 69 (data_type -> INTEGER .)
    VARIABLE        reduce using rule 69 (data_type -> INTEGER .)
    PRINT           reduce using rule 69 (data_type -> INTEGER .)
    IF              reduce using rule 69 (data_type -> INTEGER .)
    INIT            reduce using rule 69 (data_type -> INTEGER .)
    WHILE           reduce using rule 69 (data_type -> INTEGER .)
    REPEAT          reduce using rule 69 (data_type -> INTEGER .)
    SWITCH          reduce using rule 69 (data_type -> INTEGER .)
    IMPORT          reduce using rule 69 (data_type -> INTEGER .)
    FOR             reduce using rule 69 (data_type -> INTEGER .)
    LET             reduce using rule 69 (data_type -> INTEGER .)
    VAR             reduce using rule 69 (data_type -> INTEGER .)
    FUNC            reduce using rule 69 (data_type -> INTEGER .)
    $end            reduce using rule 69 (data_type -> INTEGER .)
    RBRACES         reduce using rule 69 (data_type -> INTEGER .)
    DEFAULT         reduce using rule 69 (data_type -> INTEGER .)
    CASE            reduce using rule 69 (data_type -> INTEGER .)
    RETURN          reduce using rule 69 (data_type -> INTEGER .)
    RPAREN          reduce using rule 69 (data_type -> INTEGER .)
    COMMA           reduce using rule 69 (data_type -> INTEGER .)
    LBRACES         reduce using rule 69 (data_type -> INTEGER .)


state 80

    (70) data_type -> STRING .

    OPTIONALVARIABLE reduce using rule 70 (data_type -> STRING .)
    ASSIGN          reduce using rule 70 (data_type -> STRING .)
    VARIABLE        reduce using rule 70 (data_type -> STRING .)
    PRINT           reduce using rule 70 (data_type -> STRING .)
    IF              reduce using rule 70 (data_type -> STRING .)
    INIT            reduce using rule 70 (data_type -> STRING .)
    WHILE           reduce using rule 70 (data_type -> STRING .)
    REPEAT          reduce using rule 70 (data_type -> STRING .)
    SWITCH          reduce using rule 70 (data_type -> STRING .)
    IMPORT          reduce using rule 70 (data_type -> STRING .)
    FOR             reduce using rule 70 (data_type -> STRING .)
    LET             reduce using rule 70 (data_type -> STRING .)
    VAR             reduce using rule 70 (data_type -> STRING .)
    FUNC            reduce using rule 70 (data_type -> STRING .)
    $end            reduce using rule 70 (data_type -> STRING .)
    RBRACES         reduce using rule 70 (data_type -> STRING .)
    DEFAULT         reduce using rule 70 (data_type -> STRING .)
    CASE            reduce using rule 70 (data_type -> STRING .)
    RETURN          reduce using rule 70 (data_type -> STRING .)
    RPAREN          reduce using rule 70 (data_type -> STRING .)
    COMMA           reduce using rule 70 (data_type -> STRING .)
    LBRACES         reduce using rule 70 (data_type -> STRING .)


state 81

    (71) data_type -> BOOLEAN .

    OPTIONALVARIABLE reduce using rule 71 (data_type -> BOOLEAN .)
    ASSIGN          reduce using rule 71 (data_type -> BOOLEAN .)
    VARIABLE        reduce using rule 71 (data_type -> BOOLEAN .)
    PRINT           reduce using rule 71 (data_type -> BOOLEAN .)
    IF              reduce using rule 71 (data_type -> BOOLEAN .)
    INIT            reduce using rule 71 (data_type -> BOOLEAN .)
    WHILE           reduce using rule 71 (data_type -> BOOLEAN .)
    REPEAT          reduce using rule 71 (data_type -> BOOLEAN .)
    SWITCH          reduce using rule 71 (data_type -> BOOLEAN .)
    IMPORT          reduce using rule 71 (data_type -> BOOLEAN .)
    FOR             reduce using rule 71 (data_type -> BOOLEAN .)
    LET             reduce using rule 71 (data_type -> BOOLEAN .)
    VAR             reduce using rule 71 (data_type -> BOOLEAN .)
    FUNC            reduce using rule 71 (data_type -> BOOLEAN .)
    $end            reduce using rule 71 (data_type -> BOOLEAN .)
    RBRACES         reduce using rule 71 (data_type -> BOOLEAN .)
    DEFAULT         reduce using rule 71 (data_type -> BOOLEAN .)
    CASE            reduce using rule 71 (data_type -> BOOLEAN .)
    RETURN          reduce using rule 71 (data_type -> BOOLEAN .)
    RPAREN          reduce using rule 71 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 71 (data_type -> BOOLEAN .)
    LBRACES         reduce using rule 71 (data_type -> BOOLEAN .)


state 82

    (72) data_type -> DOUBLE .

    OPTIONALVARIABLE reduce using rule 72 (data_type -> DOUBLE .)
    ASSIGN          reduce using rule 72 (data_type -> DOUBLE .)
    VARIABLE        reduce using rule 72 (data_type -> DOUBLE .)
    PRINT           reduce using rule 72 (data_type -> DOUBLE .)
    IF              reduce using rule 72 (data_type -> DOUBLE .)
    INIT            reduce using rule 72 (data_type -> DOUBLE .)
    WHILE           reduce using rule 72 (data_type -> DOUBLE .)
    REPEAT          reduce using rule 72 (data_type -> DOUBLE .)
    SWITCH          reduce using rule 72 (data_type -> DOUBLE .)
    IMPORT          reduce using rule 72 (data_type -> DOUBLE .)
    FOR             reduce using rule 72 (data_type -> DOUBLE .)
    LET             reduce using rule 72 (data_type -> DOUBLE .)
    VAR             reduce using rule 72 (data_type -> DOUBLE .)
    FUNC            reduce using rule 72 (data_type -> DOUBLE .)
    $end            reduce using rule 72 (data_type -> DOUBLE .)
    RBRACES         reduce using rule 72 (data_type -> DOUBLE .)
    DEFAULT         reduce using rule 72 (data_type -> DOUBLE .)
    CASE            reduce using rule 72 (data_type -> DOUBLE .)
    RETURN          reduce using rule 72 (data_type -> DOUBLE .)
    RPAREN          reduce using rule 72 (data_type -> DOUBLE .)
    COMMA           reduce using rule 72 (data_type -> DOUBLE .)
    LBRACES         reduce using rule 72 (data_type -> DOUBLE .)


state 83

    (74) data_type -> INT .

    OPTIONALVARIABLE reduce using rule 74 (data_type -> INT .)
    ASSIGN          reduce using rule 74 (data_type -> INT .)
    VARIABLE        reduce using rule 74 (data_type -> INT .)
    PRINT           reduce using rule 74 (data_type -> INT .)
    IF              reduce using rule 74 (data_type -> INT .)
    INIT            reduce using rule 74 (data_type -> INT .)
    WHILE           reduce using rule 74 (data_type -> INT .)
    REPEAT          reduce using rule 74 (data_type -> INT .)
    SWITCH          reduce using rule 74 (data_type -> INT .)
    IMPORT          reduce using rule 74 (data_type -> INT .)
    FOR             reduce using rule 74 (data_type -> INT .)
    LET             reduce using rule 74 (data_type -> INT .)
    VAR             reduce using rule 74 (data_type -> INT .)
    FUNC            reduce using rule 74 (data_type -> INT .)
    $end            reduce using rule 74 (data_type -> INT .)
    RBRACES         reduce using rule 74 (data_type -> INT .)
    DEFAULT         reduce using rule 74 (data_type -> INT .)
    CASE            reduce using rule 74 (data_type -> INT .)
    RETURN          reduce using rule 74 (data_type -> INT .)
    RPAREN          reduce using rule 74 (data_type -> INT .)
    COMMA           reduce using rule 74 (data_type -> INT .)
    LBRACES         reduce using rule 74 (data_type -> INT .)


state 84

    (73) data_type -> FLOAT .

    OPTIONALVARIABLE reduce using rule 73 (data_type -> FLOAT .)
    ASSIGN          reduce using rule 73 (data_type -> FLOAT .)
    VARIABLE        reduce using rule 73 (data_type -> FLOAT .)
    PRINT           reduce using rule 73 (data_type -> FLOAT .)
    IF              reduce using rule 73 (data_type -> FLOAT .)
    INIT            reduce using rule 73 (data_type -> FLOAT .)
    WHILE           reduce using rule 73 (data_type -> FLOAT .)
    REPEAT          reduce using rule 73 (data_type -> FLOAT .)
    SWITCH          reduce using rule 73 (data_type -> FLOAT .)
    IMPORT          reduce using rule 73 (data_type -> FLOAT .)
    FOR             reduce using rule 73 (data_type -> FLOAT .)
    LET             reduce using rule 73 (data_type -> FLOAT .)
    VAR             reduce using rule 73 (data_type -> FLOAT .)
    FUNC            reduce using rule 73 (data_type -> FLOAT .)
    $end            reduce using rule 73 (data_type -> FLOAT .)
    RBRACES         reduce using rule 73 (data_type -> FLOAT .)
    DEFAULT         reduce using rule 73 (data_type -> FLOAT .)
    CASE            reduce using rule 73 (data_type -> FLOAT .)
    RETURN          reduce using rule 73 (data_type -> FLOAT .)
    RPAREN          reduce using rule 73 (data_type -> FLOAT .)
    COMMA           reduce using rule 73 (data_type -> FLOAT .)
    LBRACES         reduce using rule 73 (data_type -> FLOAT .)


state 85

    (35) assignment_statement_type -> variable_declarator multiple_variables COLON data_type .

    VARIABLE        reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    PRINT           reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    IF              reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    INIT            reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    WHILE           reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    REPEAT          reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    SWITCH          reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    IMPORT          reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    FOR             reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    LET             reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    VAR             reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    FUNC            reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    $end            reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    RBRACES         reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    DEFAULT         reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    CASE            reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    RETURN          reduce using rule 35 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)


state 86

    (43) multiple_variables -> multiple_variables COMMA VARIABLE .

    COLON           reduce using rule 43 (multiple_variables -> multiple_variables COMMA VARIABLE .)
    COMMA           reduce using rule 43 (multiple_variables -> multiple_variables COMMA VARIABLE .)


state 87

    (81) expression -> expression PLUS . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 126
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 88

    (82) expression -> expression MINUS . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 127
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 89

    (83) expression -> expression MULTIPLY . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 128
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 90

    (84) expression -> expression DIVIDE . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 129
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 91

    (85) expression -> expression GREATERTHAN . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 130
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 92

    (86) expression -> expression LESSTHAN . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 131
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 93

    (87) expression -> expression EQUALS . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 132
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 94

    (88) expression -> expression NOTEQUALS . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 133
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 95

    (89) expression -> expression AND . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 134
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 96

    (90) expression -> expression OR . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 135
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 97

    (91) expression -> expression COMMA . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 136
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 98

    (92) expression -> expression COLON . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 137
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 99

    (93) expression -> LPAREN expression . RPAREN
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RPAREN          shift and go to state 138
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 100

    (94) expression -> NOT expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 94 (expression -> NOT expression .)
    PRINT           reduce using rule 94 (expression -> NOT expression .)
    IF              reduce using rule 94 (expression -> NOT expression .)
    INIT            reduce using rule 94 (expression -> NOT expression .)
    WHILE           reduce using rule 94 (expression -> NOT expression .)
    REPEAT          reduce using rule 94 (expression -> NOT expression .)
    SWITCH          reduce using rule 94 (expression -> NOT expression .)
    IMPORT          reduce using rule 94 (expression -> NOT expression .)
    FOR             reduce using rule 94 (expression -> NOT expression .)
    LET             reduce using rule 94 (expression -> NOT expression .)
    VAR             reduce using rule 94 (expression -> NOT expression .)
    FUNC            reduce using rule 94 (expression -> NOT expression .)
    $end            reduce using rule 94 (expression -> NOT expression .)
    RBRACES         reduce using rule 94 (expression -> NOT expression .)
    DEFAULT         reduce using rule 94 (expression -> NOT expression .)
    CASE            reduce using rule 94 (expression -> NOT expression .)
    RETURN          reduce using rule 94 (expression -> NOT expression .)
    RPAREN          reduce using rule 94 (expression -> NOT expression .)
    RSQUAREBRACKET  reduce using rule 94 (expression -> NOT expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 94 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 94 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 94 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 94 (expression -> NOT expression .) ]
  ! NOTEQUALS       [ reduce using rule 94 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 94 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 94 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 94 (expression -> NOT expression .) ]
  ! COLON           [ reduce using rule 94 (expression -> NOT expression .) ]


state 101

    (103) function_call -> VARIABLE LPAREN function_arguments RPAREN .

    VARIABLE        reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PRINT           reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IF              reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    INIT            reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    WHILE           reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    REPEAT          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    SWITCH          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IMPORT          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FOR             reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LET             reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VAR             reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FUNC            reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    $end            reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PLUS            reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MINUS           reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MULTIPLY        reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DIVIDE          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    GREATERTHAN     reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LESSTHAN        reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    EQUALS          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    NOTEQUALS       reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    AND             reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    OR              reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COMMA           reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COLON           reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RBRACES         reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DEFAULT         reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    CASE            reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RETURN          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RPAREN          reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RSQUAREBRACKET  reduce using rule 103 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)


state 102

    (104) function_arguments -> function_arguments COMMA . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 139
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 103

    (46) print_statement -> PRINT LPAREN expression RPAREN .

    VARIABLE        reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    INIT            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    REPEAT          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    SWITCH          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    IMPORT          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    LET             reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUNC            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACES         reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    CASE            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN .)


state 104

    (47) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES
    (48) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LBRACES         shift and go to state 140


state 105

    (66) function_init -> INIT LPAREN function_parameters RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 141


state 106

    (60) function_parameters -> function_parameters COMMA . VARIABLE COLON data_type

    VARIABLE        shift and go to state 142


state 107

    (61) function_parameters -> VARIABLE COLON . data_type
    (69) data_type -> . INTEGER
    (70) data_type -> . STRING
    (71) data_type -> . BOOLEAN
    (72) data_type -> . DOUBLE
    (73) data_type -> . FLOAT
    (74) data_type -> . INT

    INTEGER         shift and go to state 79
    STRING          shift and go to state 80
    BOOLEAN         shift and go to state 81
    DOUBLE          shift and go to state 82
    FLOAT           shift and go to state 84
    INT             shift and go to state 83

    data_type                      shift and go to state 143

state 108

    (49) while_statement -> WHILE LPAREN expression RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 144


state 109

    (50) while_statement -> REPEAT LBRACES statements RBRACES . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 145


state 110

    (51) switch_statement -> SWITCH VARIABLE LBRACES caso . RBRACES

    RBRACES         shift and go to state 146


state 111

    (52) caso -> CASE . expression COLON cuerpo_caso caso
    (53) caso -> CASE . expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 147
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 112

    (42) for_statement -> FOR VARIABLE IN VARIABLE . LBRACES statements RBRACES

    LBRACES         shift and go to state 148


state 113

    (41) for_statement -> FOR VARIABLE IN NUMBER . RANGE NUMBER LBRACES statements RBRACES

    RANGE           shift and go to state 149


state 114

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters . RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (60) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 150
    COMMA           shift and go to state 106


state 115

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty . RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RPAREN          shift and go to state 151


state 116

    (28) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN . collection_block
    (45) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 153

    collection_block               shift and go to state 152

state 117

    (29) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN . collection_block
    (45) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 153

    collection_block               shift and go to state 154

state 118

    (30) assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN . collection_block
    (45) collection_block -> . LSQUAREBRACKET expression RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 153

    collection_block               shift and go to state 155

state 119

    (34) assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .

    VARIABLE        reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    PRINT           reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    IF              reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    INIT            reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    WHILE           reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    REPEAT          reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    SWITCH          reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    IMPORT          reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    FOR             reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    LET             reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    VAR             reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    FUNC            reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    $end            reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    RBRACES         reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    DEFAULT         reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    CASE            reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    RETURN          reduce using rule 34 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)


state 120

    (36) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN . expression
    (37) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN . READLN
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    READLN          shift and go to state 157
    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 156
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 121

    (75) data_collection_type -> LSQUAREBRACKET INTEGER . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 158


state 122

    (76) data_collection_type -> LSQUAREBRACKET STRING . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 159


state 123

    (77) data_collection_type -> LSQUAREBRACKET BOOLEAN . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 160


state 124

    (78) data_collection_type -> LSQUAREBRACKET DOUBLE . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 161


state 125

    (79) data_collection_type -> LSQUAREBRACKET INT . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 162


state 126

    (81) expression -> expression PLUS expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 81 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 81 (expression -> expression PLUS expression .)
    IF              reduce using rule 81 (expression -> expression PLUS expression .)
    INIT            reduce using rule 81 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 81 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 81 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 81 (expression -> expression PLUS expression .)
    IMPORT          reduce using rule 81 (expression -> expression PLUS expression .)
    FOR             reduce using rule 81 (expression -> expression PLUS expression .)
    LET             reduce using rule 81 (expression -> expression PLUS expression .)
    VAR             reduce using rule 81 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 81 (expression -> expression PLUS expression .)
    $end            reduce using rule 81 (expression -> expression PLUS expression .)
    RBRACES         reduce using rule 81 (expression -> expression PLUS expression .)
    DEFAULT         reduce using rule 81 (expression -> expression PLUS expression .)
    CASE            reduce using rule 81 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 81 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 81 (expression -> expression PLUS expression .)
    RSQUAREBRACKET  reduce using rule 81 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 81 (expression -> expression PLUS expression .) ]
  ! COLON           [ reduce using rule 81 (expression -> expression PLUS expression .) ]


state 127

    (82) expression -> expression MINUS expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 82 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 82 (expression -> expression MINUS expression .)
    IF              reduce using rule 82 (expression -> expression MINUS expression .)
    INIT            reduce using rule 82 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 82 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 82 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 82 (expression -> expression MINUS expression .)
    IMPORT          reduce using rule 82 (expression -> expression MINUS expression .)
    FOR             reduce using rule 82 (expression -> expression MINUS expression .)
    LET             reduce using rule 82 (expression -> expression MINUS expression .)
    VAR             reduce using rule 82 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 82 (expression -> expression MINUS expression .)
    $end            reduce using rule 82 (expression -> expression MINUS expression .)
    RBRACES         reduce using rule 82 (expression -> expression MINUS expression .)
    DEFAULT         reduce using rule 82 (expression -> expression MINUS expression .)
    CASE            reduce using rule 82 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 82 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 82 (expression -> expression MINUS expression .)
    RSQUAREBRACKET  reduce using rule 82 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 82 (expression -> expression MINUS expression .) ]
  ! COLON           [ reduce using rule 82 (expression -> expression MINUS expression .) ]


state 128

    (83) expression -> expression MULTIPLY expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 83 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 83 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 83 (expression -> expression MULTIPLY expression .)
    INIT            reduce using rule 83 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 83 (expression -> expression MULTIPLY expression .)
    REPEAT          reduce using rule 83 (expression -> expression MULTIPLY expression .)
    SWITCH          reduce using rule 83 (expression -> expression MULTIPLY expression .)
    IMPORT          reduce using rule 83 (expression -> expression MULTIPLY expression .)
    FOR             reduce using rule 83 (expression -> expression MULTIPLY expression .)
    LET             reduce using rule 83 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 83 (expression -> expression MULTIPLY expression .)
    FUNC            reduce using rule 83 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 83 (expression -> expression MULTIPLY expression .)
    RBRACES         reduce using rule 83 (expression -> expression MULTIPLY expression .)
    DEFAULT         reduce using rule 83 (expression -> expression MULTIPLY expression .)
    CASE            reduce using rule 83 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 83 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 83 (expression -> expression MULTIPLY expression .)
    RSQUAREBRACKET  reduce using rule 83 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUALS       [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]
  ! COLON           [ reduce using rule 83 (expression -> expression MULTIPLY expression .) ]


state 129

    (84) expression -> expression DIVIDE expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 84 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 84 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 84 (expression -> expression DIVIDE expression .)
    INIT            reduce using rule 84 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 84 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 84 (expression -> expression DIVIDE expression .)
    SWITCH          reduce using rule 84 (expression -> expression DIVIDE expression .)
    IMPORT          reduce using rule 84 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 84 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 84 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 84 (expression -> expression DIVIDE expression .)
    FUNC            reduce using rule 84 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 84 (expression -> expression DIVIDE expression .)
    RBRACES         reduce using rule 84 (expression -> expression DIVIDE expression .)
    DEFAULT         reduce using rule 84 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 84 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 84 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 84 (expression -> expression DIVIDE expression .)
    RSQUAREBRACKET  reduce using rule 84 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUALS       [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]
  ! COLON           [ reduce using rule 84 (expression -> expression DIVIDE expression .) ]


state 130

    (85) expression -> expression GREATERTHAN expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    PRINT           reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    IF              reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    INIT            reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    WHILE           reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    REPEAT          reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    SWITCH          reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    IMPORT          reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    FOR             reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    LET             reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    VAR             reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    FUNC            reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    $end            reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    RBRACES         reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    DEFAULT         reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    CASE            reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    RETURN          reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    RSQUAREBRACKET  reduce using rule 85 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! EQUALS          [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]
  ! COLON           [ reduce using rule 85 (expression -> expression GREATERTHAN expression .) ]


state 131

    (86) expression -> expression LESSTHAN expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 86 (expression -> expression LESSTHAN expression .)
    PRINT           reduce using rule 86 (expression -> expression LESSTHAN expression .)
    IF              reduce using rule 86 (expression -> expression LESSTHAN expression .)
    INIT            reduce using rule 86 (expression -> expression LESSTHAN expression .)
    WHILE           reduce using rule 86 (expression -> expression LESSTHAN expression .)
    REPEAT          reduce using rule 86 (expression -> expression LESSTHAN expression .)
    SWITCH          reduce using rule 86 (expression -> expression LESSTHAN expression .)
    IMPORT          reduce using rule 86 (expression -> expression LESSTHAN expression .)
    FOR             reduce using rule 86 (expression -> expression LESSTHAN expression .)
    LET             reduce using rule 86 (expression -> expression LESSTHAN expression .)
    VAR             reduce using rule 86 (expression -> expression LESSTHAN expression .)
    FUNC            reduce using rule 86 (expression -> expression LESSTHAN expression .)
    $end            reduce using rule 86 (expression -> expression LESSTHAN expression .)
    RBRACES         reduce using rule 86 (expression -> expression LESSTHAN expression .)
    DEFAULT         reduce using rule 86 (expression -> expression LESSTHAN expression .)
    CASE            reduce using rule 86 (expression -> expression LESSTHAN expression .)
    RETURN          reduce using rule 86 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 86 (expression -> expression LESSTHAN expression .)
    RSQUAREBRACKET  reduce using rule 86 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! EQUALS          [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]
  ! COLON           [ reduce using rule 86 (expression -> expression LESSTHAN expression .) ]


state 132

    (87) expression -> expression EQUALS expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 87 (expression -> expression EQUALS expression .)
    PRINT           reduce using rule 87 (expression -> expression EQUALS expression .)
    IF              reduce using rule 87 (expression -> expression EQUALS expression .)
    INIT            reduce using rule 87 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 87 (expression -> expression EQUALS expression .)
    REPEAT          reduce using rule 87 (expression -> expression EQUALS expression .)
    SWITCH          reduce using rule 87 (expression -> expression EQUALS expression .)
    IMPORT          reduce using rule 87 (expression -> expression EQUALS expression .)
    FOR             reduce using rule 87 (expression -> expression EQUALS expression .)
    LET             reduce using rule 87 (expression -> expression EQUALS expression .)
    VAR             reduce using rule 87 (expression -> expression EQUALS expression .)
    FUNC            reduce using rule 87 (expression -> expression EQUALS expression .)
    $end            reduce using rule 87 (expression -> expression EQUALS expression .)
    RBRACES         reduce using rule 87 (expression -> expression EQUALS expression .)
    DEFAULT         reduce using rule 87 (expression -> expression EQUALS expression .)
    CASE            reduce using rule 87 (expression -> expression EQUALS expression .)
    RETURN          reduce using rule 87 (expression -> expression EQUALS expression .)
    RPAREN          reduce using rule 87 (expression -> expression EQUALS expression .)
    RSQUAREBRACKET  reduce using rule 87 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! COMMA           [ reduce using rule 87 (expression -> expression EQUALS expression .) ]
  ! COLON           [ reduce using rule 87 (expression -> expression EQUALS expression .) ]


state 133

    (88) expression -> expression NOTEQUALS expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    PRINT           reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    IF              reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    INIT            reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    WHILE           reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    REPEAT          reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    SWITCH          reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    IMPORT          reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    FOR             reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    LET             reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    VAR             reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    FUNC            reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    $end            reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    RBRACES         reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    DEFAULT         reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    CASE            reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    RETURN          reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    RPAREN          reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    RSQUAREBRACKET  reduce using rule 88 (expression -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! MINUS           [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! EQUALS          [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! AND             [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! OR              [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! COMMA           [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]
  ! COLON           [ reduce using rule 88 (expression -> expression NOTEQUALS expression .) ]


state 134

    (89) expression -> expression AND expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 89 (expression -> expression AND expression .)
    PRINT           reduce using rule 89 (expression -> expression AND expression .)
    IF              reduce using rule 89 (expression -> expression AND expression .)
    INIT            reduce using rule 89 (expression -> expression AND expression .)
    WHILE           reduce using rule 89 (expression -> expression AND expression .)
    REPEAT          reduce using rule 89 (expression -> expression AND expression .)
    SWITCH          reduce using rule 89 (expression -> expression AND expression .)
    IMPORT          reduce using rule 89 (expression -> expression AND expression .)
    FOR             reduce using rule 89 (expression -> expression AND expression .)
    LET             reduce using rule 89 (expression -> expression AND expression .)
    VAR             reduce using rule 89 (expression -> expression AND expression .)
    FUNC            reduce using rule 89 (expression -> expression AND expression .)
    $end            reduce using rule 89 (expression -> expression AND expression .)
    RBRACES         reduce using rule 89 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 89 (expression -> expression AND expression .)
    CASE            reduce using rule 89 (expression -> expression AND expression .)
    RETURN          reduce using rule 89 (expression -> expression AND expression .)
    RPAREN          reduce using rule 89 (expression -> expression AND expression .)
    RSQUAREBRACKET  reduce using rule 89 (expression -> expression AND expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! NOTEQUALS       [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 89 (expression -> expression AND expression .) ]
  ! COLON           [ reduce using rule 89 (expression -> expression AND expression .) ]


state 135

    (90) expression -> expression OR expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 90 (expression -> expression OR expression .)
    PRINT           reduce using rule 90 (expression -> expression OR expression .)
    IF              reduce using rule 90 (expression -> expression OR expression .)
    INIT            reduce using rule 90 (expression -> expression OR expression .)
    WHILE           reduce using rule 90 (expression -> expression OR expression .)
    REPEAT          reduce using rule 90 (expression -> expression OR expression .)
    SWITCH          reduce using rule 90 (expression -> expression OR expression .)
    IMPORT          reduce using rule 90 (expression -> expression OR expression .)
    FOR             reduce using rule 90 (expression -> expression OR expression .)
    LET             reduce using rule 90 (expression -> expression OR expression .)
    VAR             reduce using rule 90 (expression -> expression OR expression .)
    FUNC            reduce using rule 90 (expression -> expression OR expression .)
    $end            reduce using rule 90 (expression -> expression OR expression .)
    RBRACES         reduce using rule 90 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 90 (expression -> expression OR expression .)
    CASE            reduce using rule 90 (expression -> expression OR expression .)
    RETURN          reduce using rule 90 (expression -> expression OR expression .)
    RPAREN          reduce using rule 90 (expression -> expression OR expression .)
    RSQUAREBRACKET  reduce using rule 90 (expression -> expression OR expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! NOTEQUALS       [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 90 (expression -> expression OR expression .) ]
  ! COLON           [ reduce using rule 90 (expression -> expression OR expression .) ]


state 136

    (91) expression -> expression COMMA expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 91 (expression -> expression COMMA expression .)
    PRINT           reduce using rule 91 (expression -> expression COMMA expression .)
    IF              reduce using rule 91 (expression -> expression COMMA expression .)
    INIT            reduce using rule 91 (expression -> expression COMMA expression .)
    WHILE           reduce using rule 91 (expression -> expression COMMA expression .)
    REPEAT          reduce using rule 91 (expression -> expression COMMA expression .)
    SWITCH          reduce using rule 91 (expression -> expression COMMA expression .)
    IMPORT          reduce using rule 91 (expression -> expression COMMA expression .)
    FOR             reduce using rule 91 (expression -> expression COMMA expression .)
    LET             reduce using rule 91 (expression -> expression COMMA expression .)
    VAR             reduce using rule 91 (expression -> expression COMMA expression .)
    FUNC            reduce using rule 91 (expression -> expression COMMA expression .)
    $end            reduce using rule 91 (expression -> expression COMMA expression .)
    RBRACES         reduce using rule 91 (expression -> expression COMMA expression .)
    DEFAULT         reduce using rule 91 (expression -> expression COMMA expression .)
    CASE            reduce using rule 91 (expression -> expression COMMA expression .)
    RETURN          reduce using rule 91 (expression -> expression COMMA expression .)
    RPAREN          reduce using rule 91 (expression -> expression COMMA expression .)
    RSQUAREBRACKET  reduce using rule 91 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! NOTEQUALS       [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 91 (expression -> expression COMMA expression .) ]
  ! COLON           [ reduce using rule 91 (expression -> expression COMMA expression .) ]


state 137

    (92) expression -> expression COLON expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 92 (expression -> expression COLON expression .)
    PRINT           reduce using rule 92 (expression -> expression COLON expression .)
    IF              reduce using rule 92 (expression -> expression COLON expression .)
    INIT            reduce using rule 92 (expression -> expression COLON expression .)
    WHILE           reduce using rule 92 (expression -> expression COLON expression .)
    REPEAT          reduce using rule 92 (expression -> expression COLON expression .)
    SWITCH          reduce using rule 92 (expression -> expression COLON expression .)
    IMPORT          reduce using rule 92 (expression -> expression COLON expression .)
    FOR             reduce using rule 92 (expression -> expression COLON expression .)
    LET             reduce using rule 92 (expression -> expression COLON expression .)
    VAR             reduce using rule 92 (expression -> expression COLON expression .)
    FUNC            reduce using rule 92 (expression -> expression COLON expression .)
    $end            reduce using rule 92 (expression -> expression COLON expression .)
    RBRACES         reduce using rule 92 (expression -> expression COLON expression .)
    DEFAULT         reduce using rule 92 (expression -> expression COLON expression .)
    CASE            reduce using rule 92 (expression -> expression COLON expression .)
    RETURN          reduce using rule 92 (expression -> expression COLON expression .)
    RPAREN          reduce using rule 92 (expression -> expression COLON expression .)
    RSQUAREBRACKET  reduce using rule 92 (expression -> expression COLON expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! PLUS            [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! GREATERTHAN     [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! LESSTHAN        [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! AND             [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! OR              [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! COMMA           [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! COLON           [ reduce using rule 92 (expression -> expression COLON expression .) ]


state 138

    (93) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 93 (expression -> LPAREN expression RPAREN .)
    RSQUAREBRACKET  reduce using rule 93 (expression -> LPAREN expression RPAREN .)


state 139

    (104) function_arguments -> function_arguments COMMA expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 104 (function_arguments -> function_arguments COMMA expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! COMMA           [ reduce using rule 104 (function_arguments -> function_arguments COMMA expression .) ]


state 140

    (47) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES
    (48) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 163
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 141

    (66) function_init -> INIT LPAREN function_parameters RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 164
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 142

    (60) function_parameters -> function_parameters COMMA VARIABLE . COLON data_type

    COLON           shift and go to state 165


state 143

    (61) function_parameters -> VARIABLE COLON data_type .

    RPAREN          reduce using rule 61 (function_parameters -> VARIABLE COLON data_type .)
    COMMA           reduce using rule 61 (function_parameters -> VARIABLE COLON data_type .)


state 144

    (49) while_statement -> WHILE LPAREN expression RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 166
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 145

    (50) while_statement -> REPEAT LBRACES statements RBRACES WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 167


state 146

    (51) switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .

    VARIABLE        reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    PRINT           reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IF              reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    INIT            reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    WHILE           reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    REPEAT          reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    SWITCH          reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IMPORT          reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FOR             reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    LET             reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    VAR             reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FUNC            reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    $end            reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RBRACES         reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    DEFAULT         reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    CASE            reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RETURN          reduce using rule 51 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)


state 147

    (52) caso -> CASE expression . COLON cuerpo_caso caso
    (53) caso -> CASE expression . COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    COLON           shift and go to state 168
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97


state 148

    (42) for_statement -> FOR VARIABLE IN VARIABLE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 169
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 149

    (41) for_statement -> FOR VARIABLE IN NUMBER RANGE . NUMBER LBRACES statements RBRACES

    NUMBER          shift and go to state 170


state 150

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN . function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_return_type -> . ARROW data_type
    (63) function_return_type -> . ARROW LPAREN function_parameters RPAREN
    (64) function_return_type -> . empty
    (107) empty -> .

    ARROW           shift and go to state 172
    LBRACES         reduce using rule 107 (empty -> .)

    function_return_type           shift and go to state 171
    empty                          shift and go to state 173

state 151

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN . function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_return_type -> . ARROW data_type
    (63) function_return_type -> . ARROW LPAREN function_parameters RPAREN
    (64) function_return_type -> . empty
    (107) empty -> .

    ARROW           shift and go to state 172
    LBRACES         reduce using rule 107 (empty -> .)

    empty                          shift and go to state 173
    function_return_type           shift and go to state 174

state 152

    (28) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .

    VARIABLE        reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    PRINT           reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IF              reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    INIT            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    WHILE           reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    REPEAT          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    SWITCH          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IMPORT          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FOR             reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    LET             reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    VAR             reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FUNC            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    $end            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RBRACES         reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    DEFAULT         reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    CASE            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RETURN          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)


state 153

    (45) collection_block -> LSQUAREBRACKET . expression RSQUAREBRACKET
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 175
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 154

    (29) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .

    VARIABLE        reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    PRINT           reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    IF              reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    INIT            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    WHILE           reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    REPEAT          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    SWITCH          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    IMPORT          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    FOR             reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    LET             reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    VAR             reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    FUNC            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    $end            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    RBRACES         reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    DEFAULT         reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    CASE            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    RETURN          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)


state 155

    (30) assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .

    VARIABLE        reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    PRINT           reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    IF              reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    INIT            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    WHILE           reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    REPEAT          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    SWITCH          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    IMPORT          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    FOR             reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    LET             reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    VAR             reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    FUNC            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    $end            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    RBRACES         reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    DEFAULT         reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    CASE            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    RETURN          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)


state 156

    (36) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    VARIABLE        reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    PRINT           reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    IF              reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    INIT            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    WHILE           reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    REPEAT          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    SWITCH          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    IMPORT          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    FOR             reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    LET             reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    VAR             reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    FUNC            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    $end            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    RBRACES         reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    DEFAULT         reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    CASE            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    RETURN          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 157

    (37) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .

    VARIABLE        reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    PRINT           reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    IF              reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    INIT            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    WHILE           reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    REPEAT          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    SWITCH          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    IMPORT          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    FOR             reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    LET             reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    VAR             reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    FUNC            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    $end            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    RBRACES         reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    DEFAULT         reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    CASE            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    RETURN          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)


state 158

    (75) data_collection_type -> LSQUAREBRACKET INTEGER RSQUAREBRACKET .

    ASSIGN          reduce using rule 75 (data_collection_type -> LSQUAREBRACKET INTEGER RSQUAREBRACKET .)


state 159

    (76) data_collection_type -> LSQUAREBRACKET STRING RSQUAREBRACKET .

    ASSIGN          reduce using rule 76 (data_collection_type -> LSQUAREBRACKET STRING RSQUAREBRACKET .)


state 160

    (77) data_collection_type -> LSQUAREBRACKET BOOLEAN RSQUAREBRACKET .

    ASSIGN          reduce using rule 77 (data_collection_type -> LSQUAREBRACKET BOOLEAN RSQUAREBRACKET .)


state 161

    (78) data_collection_type -> LSQUAREBRACKET DOUBLE RSQUAREBRACKET .

    ASSIGN          reduce using rule 78 (data_collection_type -> LSQUAREBRACKET DOUBLE RSQUAREBRACKET .)


state 162

    (79) data_collection_type -> LSQUAREBRACKET INT RSQUAREBRACKET .

    ASSIGN          reduce using rule 79 (data_collection_type -> LSQUAREBRACKET INT RSQUAREBRACKET .)


state 163

    (47) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES
    (48) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 176
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 164

    (66) function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 177
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 165

    (60) function_parameters -> function_parameters COMMA VARIABLE COLON . data_type
    (69) data_type -> . INTEGER
    (70) data_type -> . STRING
    (71) data_type -> . BOOLEAN
    (72) data_type -> . DOUBLE
    (73) data_type -> . FLOAT
    (74) data_type -> . INT

    INTEGER         shift and go to state 79
    STRING          shift and go to state 80
    BOOLEAN         shift and go to state 81
    DOUBLE          shift and go to state 82
    FLOAT           shift and go to state 84
    INT             shift and go to state 83

    data_type                      shift and go to state 178

state 166

    (49) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 179
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 167

    (50) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN . expression RPAREN
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 180
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 168

    (52) caso -> CASE expression COLON . cuerpo_caso caso
    (53) caso -> CASE expression COLON . cuerpo_caso DEFAULT COLON cuerpo_caso
    (92) expression -> expression COLON . expression
    (54) cuerpo_caso -> . expression
    (55) cuerpo_caso -> . statement
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 184
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    expression                     shift and go to state 181
    cuerpo_caso                    shift and go to state 182
    statement                      shift and go to state 183
    type                           shift and go to state 53
    function_call                  shift and go to state 185
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 169

    (42) for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 186
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 170

    (41) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER . LBRACES statements RBRACES

    LBRACES         shift and go to state 187


state 171

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type . LBRACES functionstatements return_statement RBRACES

    LBRACES         shift and go to state 188


state 172

    (62) function_return_type -> ARROW . data_type
    (63) function_return_type -> ARROW . LPAREN function_parameters RPAREN
    (69) data_type -> . INTEGER
    (70) data_type -> . STRING
    (71) data_type -> . BOOLEAN
    (72) data_type -> . DOUBLE
    (73) data_type -> . FLOAT
    (74) data_type -> . INT

    LPAREN          shift and go to state 190
    INTEGER         shift and go to state 79
    STRING          shift and go to state 80
    BOOLEAN         shift and go to state 81
    DOUBLE          shift and go to state 82
    FLOAT           shift and go to state 84
    INT             shift and go to state 83

    data_type                      shift and go to state 189

state 173

    (64) function_return_type -> empty .

    LBRACES         reduce using rule 64 (function_return_type -> empty .)


state 174

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type . LBRACES functionstatements return_statement RBRACES

    LBRACES         shift and go to state 191


state 175

    (45) collection_block -> LSQUAREBRACKET expression . RSQUAREBRACKET
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RSQUAREBRACKET  shift and go to state 192
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 176

    (47) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .
    (48) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES . ELSE LBRACES statements RBRACES

    VARIABLE        reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RETURN          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    ELSE            shift and go to state 193


state 177

    (66) function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .

    VARIABLE        reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 66 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)


state 178

    (60) function_parameters -> function_parameters COMMA VARIABLE COLON data_type .

    RPAREN          reduce using rule 60 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)
    COMMA           reduce using rule 60 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)


state 179

    (49) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .

    VARIABLE        reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RETURN          reduce using rule 49 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)


state 180

    (50) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression . RPAREN
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RPAREN          shift and go to state 194
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 181

    (92) expression -> expression COLON expression .
    (54) cuerpo_caso -> expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    DEFAULT         reduce using rule 54 (cuerpo_caso -> expression .)
    CASE            reduce using rule 54 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98

  ! COLON           [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! PLUS            [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! GREATERTHAN     [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! LESSTHAN        [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! AND             [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! OR              [ reduce using rule 92 (expression -> expression COLON expression .) ]
  ! COMMA           [ reduce using rule 92 (expression -> expression COLON expression .) ]


state 182

    (52) caso -> CASE expression COLON cuerpo_caso . caso
    (53) caso -> CASE expression COLON cuerpo_caso . DEFAULT COLON cuerpo_caso
    (52) caso -> . CASE expression COLON cuerpo_caso caso
    (53) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    DEFAULT         shift and go to state 196
    CASE            shift and go to state 111

    caso                           shift and go to state 195

state 183

    (55) cuerpo_caso -> statement .

    DEFAULT         reduce using rule 55 (cuerpo_caso -> statement .)
    CASE            reduce using rule 55 (cuerpo_caso -> statement .)
    RBRACES         reduce using rule 55 (cuerpo_caso -> statement .)


state 184

    (95) expression -> VARIABLE .
    (103) function_call -> VARIABLE . LPAREN function_arguments RPAREN
    (31) assignment_statement -> VARIABLE . ASSIGN expression
    (32) assignment_statement -> VARIABLE . ASSIGN READLN

    PLUS            reduce using rule 95 (expression -> VARIABLE .)
    MINUS           reduce using rule 95 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 95 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 95 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 95 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 95 (expression -> VARIABLE .)
    EQUALS          reduce using rule 95 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 95 (expression -> VARIABLE .)
    AND             reduce using rule 95 (expression -> VARIABLE .)
    OR              reduce using rule 95 (expression -> VARIABLE .)
    COMMA           reduce using rule 95 (expression -> VARIABLE .)
    COLON           reduce using rule 95 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 95 (expression -> VARIABLE .)
    CASE            reduce using rule 95 (expression -> VARIABLE .)
    RBRACES         reduce using rule 95 (expression -> VARIABLE .)
    LPAREN          shift and go to state 34
    ASSIGN          shift and go to state 33


state 185

    (97) expression -> function_call .
    (9) statement -> function_call .

  ! reduce/reduce conflict for DEFAULT resolved using rule 9 (statement -> function_call .)
  ! reduce/reduce conflict for CASE resolved using rule 9 (statement -> function_call .)
  ! reduce/reduce conflict for RBRACES resolved using rule 9 (statement -> function_call .)
    PLUS            reduce using rule 97 (expression -> function_call .)
    MINUS           reduce using rule 97 (expression -> function_call .)
    MULTIPLY        reduce using rule 97 (expression -> function_call .)
    DIVIDE          reduce using rule 97 (expression -> function_call .)
    GREATERTHAN     reduce using rule 97 (expression -> function_call .)
    LESSTHAN        reduce using rule 97 (expression -> function_call .)
    EQUALS          reduce using rule 97 (expression -> function_call .)
    NOTEQUALS       reduce using rule 97 (expression -> function_call .)
    AND             reduce using rule 97 (expression -> function_call .)
    OR              reduce using rule 97 (expression -> function_call .)
    COMMA           reduce using rule 97 (expression -> function_call .)
    COLON           reduce using rule 97 (expression -> function_call .)
    DEFAULT         reduce using rule 9 (statement -> function_call .)
    CASE            reduce using rule 9 (statement -> function_call .)
    RBRACES         reduce using rule 9 (statement -> function_call .)

  ! DEFAULT         [ reduce using rule 97 (expression -> function_call .) ]
  ! CASE            [ reduce using rule 97 (expression -> function_call .) ]
  ! RBRACES         [ reduce using rule 97 (expression -> function_call .) ]


state 186

    (42) for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .

    VARIABLE        reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    PRINT           reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    IF              reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    INIT            reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    WHILE           reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    REPEAT          reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    IMPORT          reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    FOR             reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    LET             reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    VAR             reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    FUNC            reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    $end            reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    CASE            reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    RETURN          reduce using rule 42 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)


state 187

    (41) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 197
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 188

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES . functionstatements return_statement RBRACES
    (15) functionstatements -> . functionstatements functionbody
    (16) functionstatements -> . functionbody
    (17) functionbody -> . assignment_statement
    (18) functionbody -> . assignment_statement_type
    (19) functionbody -> . print_statement
    (20) functionbody -> . if_statement
    (21) functionbody -> . while_statement
    (22) functionbody -> . switch_statement
    (23) functionbody -> . import_statement
    (24) functionbody -> . for_statement
    (25) functionbody -> . empty
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (107) empty -> .
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    VARIABLE        shift and go to state 198
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    RETURN          reduce using rule 107 (empty -> .)
    LET             shift and go to state 27
    VAR             shift and go to state 28

  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! PRINT           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! REPEAT          [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! IMPORT          [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]

    functionstatements             shift and go to state 199
    functionbody                   shift and go to state 200
    assignment_statement           shift and go to state 201
    assignment_statement_type      shift and go to state 202
    print_statement                shift and go to state 203
    if_statement                   shift and go to state 204
    while_statement                shift and go to state 205
    switch_statement               shift and go to state 206
    import_statement               shift and go to state 207
    for_statement                  shift and go to state 208
    empty                          shift and go to state 209
    variable_declarator            shift and go to state 15

state 189

    (62) function_return_type -> ARROW data_type .

    LBRACES         reduce using rule 62 (function_return_type -> ARROW data_type .)


state 190

    (63) function_return_type -> ARROW LPAREN . function_parameters RPAREN
    (60) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (61) function_parameters -> . VARIABLE COLON data_type

    VARIABLE        shift and go to state 66

    function_parameters            shift and go to state 210

state 191

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES . functionstatements return_statement RBRACES
    (15) functionstatements -> . functionstatements functionbody
    (16) functionstatements -> . functionbody
    (17) functionbody -> . assignment_statement
    (18) functionbody -> . assignment_statement_type
    (19) functionbody -> . print_statement
    (20) functionbody -> . if_statement
    (21) functionbody -> . while_statement
    (22) functionbody -> . switch_statement
    (23) functionbody -> . import_statement
    (24) functionbody -> . for_statement
    (25) functionbody -> . empty
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (107) empty -> .
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    VARIABLE        shift and go to state 198
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    RETURN          reduce using rule 107 (empty -> .)
    LET             shift and go to state 27
    VAR             shift and go to state 28

  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! PRINT           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! REPEAT          [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! IMPORT          [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]

    empty                          shift and go to state 209
    functionstatements             shift and go to state 211
    functionbody                   shift and go to state 200
    assignment_statement           shift and go to state 201
    assignment_statement_type      shift and go to state 202
    print_statement                shift and go to state 203
    if_statement                   shift and go to state 204
    while_statement                shift and go to state 205
    switch_statement               shift and go to state 206
    import_statement               shift and go to state 207
    for_statement                  shift and go to state 208
    variable_declarator            shift and go to state 15

state 192

    (45) collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .

    VARIABLE        reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    PRINT           reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    IF              reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    INIT            reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    WHILE           reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    REPEAT          reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    SWITCH          reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    IMPORT          reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    FOR             reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    LET             reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    VAR             reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    FUNC            reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    $end            reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    RBRACES         reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    DEFAULT         reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    CASE            reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)
    RETURN          reduce using rule 45 (collection_block -> LSQUAREBRACKET expression RSQUAREBRACKET .)


state 193

    (48) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE . LBRACES statements RBRACES

    LBRACES         shift and go to state 212


state 194

    (50) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .

    VARIABLE        reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    PRINT           reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    REPEAT          reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    LET             reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    FUNC            reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    RBRACES         reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 50 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)


state 195

    (52) caso -> CASE expression COLON cuerpo_caso caso .

    RBRACES         reduce using rule 52 (caso -> CASE expression COLON cuerpo_caso caso .)


state 196

    (53) caso -> CASE expression COLON cuerpo_caso DEFAULT . COLON cuerpo_caso

    COLON           shift and go to state 213


state 197

    (41) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 214
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 198

    (31) assignment_statement -> VARIABLE . ASSIGN expression
    (32) assignment_statement -> VARIABLE . ASSIGN READLN

    ASSIGN          shift and go to state 33


state 199

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements . return_statement RBRACES
    (15) functionstatements -> functionstatements . functionbody
    (65) return_statement -> . RETURN expression
    (17) functionbody -> . assignment_statement
    (18) functionbody -> . assignment_statement_type
    (19) functionbody -> . print_statement
    (20) functionbody -> . if_statement
    (21) functionbody -> . while_statement
    (22) functionbody -> . switch_statement
    (23) functionbody -> . import_statement
    (24) functionbody -> . for_statement
    (25) functionbody -> . empty
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (107) empty -> .
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          shift and go to state 217
    VARIABLE        shift and go to state 198
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28

  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! PRINT           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! REPEAT          [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! IMPORT          [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]

    return_statement               shift and go to state 215
    functionbody                   shift and go to state 216
    assignment_statement           shift and go to state 201
    assignment_statement_type      shift and go to state 202
    print_statement                shift and go to state 203
    if_statement                   shift and go to state 204
    while_statement                shift and go to state 205
    switch_statement               shift and go to state 206
    import_statement               shift and go to state 207
    for_statement                  shift and go to state 208
    empty                          shift and go to state 209
    variable_declarator            shift and go to state 15

state 200

    (16) functionstatements -> functionbody .

    RETURN          reduce using rule 16 (functionstatements -> functionbody .)
    VARIABLE        reduce using rule 16 (functionstatements -> functionbody .)
    PRINT           reduce using rule 16 (functionstatements -> functionbody .)
    IF              reduce using rule 16 (functionstatements -> functionbody .)
    WHILE           reduce using rule 16 (functionstatements -> functionbody .)
    REPEAT          reduce using rule 16 (functionstatements -> functionbody .)
    SWITCH          reduce using rule 16 (functionstatements -> functionbody .)
    IMPORT          reduce using rule 16 (functionstatements -> functionbody .)
    FOR             reduce using rule 16 (functionstatements -> functionbody .)
    LET             reduce using rule 16 (functionstatements -> functionbody .)
    VAR             reduce using rule 16 (functionstatements -> functionbody .)


state 201

    (17) functionbody -> assignment_statement .

    RETURN          reduce using rule 17 (functionbody -> assignment_statement .)
    VARIABLE        reduce using rule 17 (functionbody -> assignment_statement .)
    PRINT           reduce using rule 17 (functionbody -> assignment_statement .)
    IF              reduce using rule 17 (functionbody -> assignment_statement .)
    WHILE           reduce using rule 17 (functionbody -> assignment_statement .)
    REPEAT          reduce using rule 17 (functionbody -> assignment_statement .)
    SWITCH          reduce using rule 17 (functionbody -> assignment_statement .)
    IMPORT          reduce using rule 17 (functionbody -> assignment_statement .)
    FOR             reduce using rule 17 (functionbody -> assignment_statement .)
    LET             reduce using rule 17 (functionbody -> assignment_statement .)
    VAR             reduce using rule 17 (functionbody -> assignment_statement .)


state 202

    (18) functionbody -> assignment_statement_type .

    RETURN          reduce using rule 18 (functionbody -> assignment_statement_type .)
    VARIABLE        reduce using rule 18 (functionbody -> assignment_statement_type .)
    PRINT           reduce using rule 18 (functionbody -> assignment_statement_type .)
    IF              reduce using rule 18 (functionbody -> assignment_statement_type .)
    WHILE           reduce using rule 18 (functionbody -> assignment_statement_type .)
    REPEAT          reduce using rule 18 (functionbody -> assignment_statement_type .)
    SWITCH          reduce using rule 18 (functionbody -> assignment_statement_type .)
    IMPORT          reduce using rule 18 (functionbody -> assignment_statement_type .)
    FOR             reduce using rule 18 (functionbody -> assignment_statement_type .)
    LET             reduce using rule 18 (functionbody -> assignment_statement_type .)
    VAR             reduce using rule 18 (functionbody -> assignment_statement_type .)


state 203

    (19) functionbody -> print_statement .

    RETURN          reduce using rule 19 (functionbody -> print_statement .)
    VARIABLE        reduce using rule 19 (functionbody -> print_statement .)
    PRINT           reduce using rule 19 (functionbody -> print_statement .)
    IF              reduce using rule 19 (functionbody -> print_statement .)
    WHILE           reduce using rule 19 (functionbody -> print_statement .)
    REPEAT          reduce using rule 19 (functionbody -> print_statement .)
    SWITCH          reduce using rule 19 (functionbody -> print_statement .)
    IMPORT          reduce using rule 19 (functionbody -> print_statement .)
    FOR             reduce using rule 19 (functionbody -> print_statement .)
    LET             reduce using rule 19 (functionbody -> print_statement .)
    VAR             reduce using rule 19 (functionbody -> print_statement .)


state 204

    (20) functionbody -> if_statement .

    RETURN          reduce using rule 20 (functionbody -> if_statement .)
    VARIABLE        reduce using rule 20 (functionbody -> if_statement .)
    PRINT           reduce using rule 20 (functionbody -> if_statement .)
    IF              reduce using rule 20 (functionbody -> if_statement .)
    WHILE           reduce using rule 20 (functionbody -> if_statement .)
    REPEAT          reduce using rule 20 (functionbody -> if_statement .)
    SWITCH          reduce using rule 20 (functionbody -> if_statement .)
    IMPORT          reduce using rule 20 (functionbody -> if_statement .)
    FOR             reduce using rule 20 (functionbody -> if_statement .)
    LET             reduce using rule 20 (functionbody -> if_statement .)
    VAR             reduce using rule 20 (functionbody -> if_statement .)


state 205

    (21) functionbody -> while_statement .

    RETURN          reduce using rule 21 (functionbody -> while_statement .)
    VARIABLE        reduce using rule 21 (functionbody -> while_statement .)
    PRINT           reduce using rule 21 (functionbody -> while_statement .)
    IF              reduce using rule 21 (functionbody -> while_statement .)
    WHILE           reduce using rule 21 (functionbody -> while_statement .)
    REPEAT          reduce using rule 21 (functionbody -> while_statement .)
    SWITCH          reduce using rule 21 (functionbody -> while_statement .)
    IMPORT          reduce using rule 21 (functionbody -> while_statement .)
    FOR             reduce using rule 21 (functionbody -> while_statement .)
    LET             reduce using rule 21 (functionbody -> while_statement .)
    VAR             reduce using rule 21 (functionbody -> while_statement .)


state 206

    (22) functionbody -> switch_statement .

    RETURN          reduce using rule 22 (functionbody -> switch_statement .)
    VARIABLE        reduce using rule 22 (functionbody -> switch_statement .)
    PRINT           reduce using rule 22 (functionbody -> switch_statement .)
    IF              reduce using rule 22 (functionbody -> switch_statement .)
    WHILE           reduce using rule 22 (functionbody -> switch_statement .)
    REPEAT          reduce using rule 22 (functionbody -> switch_statement .)
    SWITCH          reduce using rule 22 (functionbody -> switch_statement .)
    IMPORT          reduce using rule 22 (functionbody -> switch_statement .)
    FOR             reduce using rule 22 (functionbody -> switch_statement .)
    LET             reduce using rule 22 (functionbody -> switch_statement .)
    VAR             reduce using rule 22 (functionbody -> switch_statement .)


state 207

    (23) functionbody -> import_statement .

    RETURN          reduce using rule 23 (functionbody -> import_statement .)
    VARIABLE        reduce using rule 23 (functionbody -> import_statement .)
    PRINT           reduce using rule 23 (functionbody -> import_statement .)
    IF              reduce using rule 23 (functionbody -> import_statement .)
    WHILE           reduce using rule 23 (functionbody -> import_statement .)
    REPEAT          reduce using rule 23 (functionbody -> import_statement .)
    SWITCH          reduce using rule 23 (functionbody -> import_statement .)
    IMPORT          reduce using rule 23 (functionbody -> import_statement .)
    FOR             reduce using rule 23 (functionbody -> import_statement .)
    LET             reduce using rule 23 (functionbody -> import_statement .)
    VAR             reduce using rule 23 (functionbody -> import_statement .)


state 208

    (24) functionbody -> for_statement .

    RETURN          reduce using rule 24 (functionbody -> for_statement .)
    VARIABLE        reduce using rule 24 (functionbody -> for_statement .)
    PRINT           reduce using rule 24 (functionbody -> for_statement .)
    IF              reduce using rule 24 (functionbody -> for_statement .)
    WHILE           reduce using rule 24 (functionbody -> for_statement .)
    REPEAT          reduce using rule 24 (functionbody -> for_statement .)
    SWITCH          reduce using rule 24 (functionbody -> for_statement .)
    IMPORT          reduce using rule 24 (functionbody -> for_statement .)
    FOR             reduce using rule 24 (functionbody -> for_statement .)
    LET             reduce using rule 24 (functionbody -> for_statement .)
    VAR             reduce using rule 24 (functionbody -> for_statement .)


state 209

    (25) functionbody -> empty .

    RETURN          reduce using rule 25 (functionbody -> empty .)
    VARIABLE        reduce using rule 25 (functionbody -> empty .)
    PRINT           reduce using rule 25 (functionbody -> empty .)
    IF              reduce using rule 25 (functionbody -> empty .)
    WHILE           reduce using rule 25 (functionbody -> empty .)
    REPEAT          reduce using rule 25 (functionbody -> empty .)
    SWITCH          reduce using rule 25 (functionbody -> empty .)
    IMPORT          reduce using rule 25 (functionbody -> empty .)
    FOR             reduce using rule 25 (functionbody -> empty .)
    LET             reduce using rule 25 (functionbody -> empty .)
    VAR             reduce using rule 25 (functionbody -> empty .)


state 210

    (63) function_return_type -> ARROW LPAREN function_parameters . RPAREN
    (60) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 218
    COMMA           shift and go to state 106


state 211

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements . return_statement RBRACES
    (15) functionstatements -> functionstatements . functionbody
    (65) return_statement -> . RETURN expression
    (17) functionbody -> . assignment_statement
    (18) functionbody -> . assignment_statement_type
    (19) functionbody -> . print_statement
    (20) functionbody -> . if_statement
    (21) functionbody -> . while_statement
    (22) functionbody -> . switch_statement
    (23) functionbody -> . import_statement
    (24) functionbody -> . for_statement
    (25) functionbody -> . empty
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (107) empty -> .
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          shift and go to state 217
    VARIABLE        shift and go to state 198
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28

  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! PRINT           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! REPEAT          [ reduce using rule 107 (empty -> .) ]
  ! SWITCH          [ reduce using rule 107 (empty -> .) ]
  ! IMPORT          [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! LET             [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]

    empty                          shift and go to state 209
    return_statement               shift and go to state 219
    functionbody                   shift and go to state 216
    assignment_statement           shift and go to state 201
    assignment_statement_type      shift and go to state 202
    print_statement                shift and go to state 203
    if_statement                   shift and go to state 204
    while_statement                shift and go to state 205
    switch_statement               shift and go to state 206
    import_statement               shift and go to state 207
    for_statement                  shift and go to state 208
    variable_declarator            shift and go to state 15

state 212

    (48) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statements                     shift and go to state 220
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 213

    (53) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON . cuerpo_caso
    (54) cuerpo_caso -> . expression
    (55) cuerpo_caso -> . statement
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 184
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    expression                     shift and go to state 221
    cuerpo_caso                    shift and go to state 222
    statement                      shift and go to state 183
    type                           shift and go to state 53
    function_call                  shift and go to state 185
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 214

    (41) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .

    VARIABLE        reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    PRINT           reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    IF              reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    INIT            reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    WHILE           reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    REPEAT          reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    SWITCH          reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    IMPORT          reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    FOR             reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    LET             reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    VAR             reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    FUNC            reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    $end            reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    RBRACES         reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    CASE            reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    RETURN          reduce using rule 41 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)


state 215

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement . RBRACES

    RBRACES         shift and go to state 223


state 216

    (15) functionstatements -> functionstatements functionbody .

    RETURN          reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    VARIABLE        reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    PRINT           reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    IF              reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    WHILE           reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    REPEAT          reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    SWITCH          reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    IMPORT          reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    FOR             reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    LET             reduce using rule 15 (functionstatements -> functionstatements functionbody .)
    VAR             reduce using rule 15 (functionstatements -> functionstatements functionbody .)


state 217

    (65) return_statement -> RETURN . expression
    (81) expression -> . expression PLUS expression
    (82) expression -> . expression MINUS expression
    (83) expression -> . expression MULTIPLY expression
    (84) expression -> . expression DIVIDE expression
    (85) expression -> . expression GREATERTHAN expression
    (86) expression -> . expression LESSTHAN expression
    (87) expression -> . expression EQUALS expression
    (88) expression -> . expression NOTEQUALS expression
    (89) expression -> . expression AND expression
    (90) expression -> . expression OR expression
    (91) expression -> . expression COMMA expression
    (92) expression -> . expression COLON expression
    (93) expression -> . LPAREN expression RPAREN
    (94) expression -> . NOT expression
    (95) expression -> . VARIABLE
    (96) expression -> . type
    (97) expression -> . function_call
    (98) type -> . TRUE
    (99) type -> . FALSE
    (100) type -> . DECIMAL
    (101) type -> . WSTRING
    (102) type -> . NUMBER
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 51
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    DECIMAL         shift and go to state 57
    WSTRING         shift and go to state 58
    NUMBER          shift and go to state 59

    expression                     shift and go to state 224
    type                           shift and go to state 53
    function_call                  shift and go to state 54

state 218

    (63) function_return_type -> ARROW LPAREN function_parameters RPAREN .

    LBRACES         reduce using rule 63 (function_return_type -> ARROW LPAREN function_parameters RPAREN .)


state 219

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement . RBRACES

    RBRACES         shift and go to state 225


state 220

    (48) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (26) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (27) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (28) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (29) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (30) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (31) assignment_statement -> . VARIABLE ASSIGN expression
    (32) assignment_statement -> . VARIABLE ASSIGN READLN
    (33) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (34) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (35) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (46) print_statement -> . PRINT LPAREN expression RPAREN
    (47) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (56) function_general -> . function_declaration
    (57) function_general -> . function_declaration_empty
    (103) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (66) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (49) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (50) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (51) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (40) import_statement -> . IMPORT VARIABLE
    (41) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (42) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (67) variable_declarator -> . LET
    (68) variable_declarator -> . VAR
    (58) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (59) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 226
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    INIT            shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 27
    VAR             shift and go to state 28
    FUNC            shift and go to state 29

    statement                      shift and go to state 30
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    variable_declarator            shift and go to state 15
    function_declaration           shift and go to state 19
    function_declaration_empty     shift and go to state 20

state 221

    (54) cuerpo_caso -> expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RBRACES         reduce using rule 54 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 222

    (53) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .

    RBRACES         reduce using rule 53 (caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .)


state 223

    (58) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .

    VARIABLE        reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    PRINT           reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IF              reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    INIT            reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    WHILE           reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    REPEAT          reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    SWITCH          reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IMPORT          reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FOR             reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    LET             reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VAR             reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FUNC            reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    $end            reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    RBRACES         reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    DEFAULT         reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    CASE            reduce using rule 58 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)


state 224

    (65) return_statement -> RETURN expression .
    (81) expression -> expression . PLUS expression
    (82) expression -> expression . MINUS expression
    (83) expression -> expression . MULTIPLY expression
    (84) expression -> expression . DIVIDE expression
    (85) expression -> expression . GREATERTHAN expression
    (86) expression -> expression . LESSTHAN expression
    (87) expression -> expression . EQUALS expression
    (88) expression -> expression . NOTEQUALS expression
    (89) expression -> expression . AND expression
    (90) expression -> expression . OR expression
    (91) expression -> expression . COMMA expression
    (92) expression -> expression . COLON expression

    RBRACES         reduce using rule 65 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATERTHAN     shift and go to state 91
    LESSTHAN        shift and go to state 92
    EQUALS          shift and go to state 93
    NOTEQUALS       shift and go to state 94
    AND             shift and go to state 95
    OR              shift and go to state 96
    COMMA           shift and go to state 97
    COLON           shift and go to state 98


state 225

    (59) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .

    VARIABLE        reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    PRINT           reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IF              reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    INIT            reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    WHILE           reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    REPEAT          reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    SWITCH          reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IMPORT          reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FOR             reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    LET             reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VAR             reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FUNC            reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    $end            reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    RBRACES         reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    DEFAULT         reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    CASE            reduce using rule 59 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)


state 226

    (48) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .

    VARIABLE        reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    PRINT           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IF              reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    INIT            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    WHILE           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    REPEAT          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IMPORT          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FOR             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    LET             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VAR             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FUNC            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    $end            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    CASE            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RETURN          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 31 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 100 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 100 resolved as shift
WARNING: shift/reduce conflict for COLON in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 126 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 126 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 126 resolved as shift
WARNING: shift/reduce conflict for COLON in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 127 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 127 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 127 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 127 resolved as shift
WARNING: shift/reduce conflict for COLON in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 128 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 128 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 128 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 128 resolved as shift
WARNING: shift/reduce conflict for COLON in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 129 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 129 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 129 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 129 resolved as shift
WARNING: shift/reduce conflict for COLON in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 130 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 130 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 130 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 130 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 130 resolved as shift
WARNING: shift/reduce conflict for COLON in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 131 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 131 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 131 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 131 resolved as shift
WARNING: shift/reduce conflict for COLON in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 132 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 132 resolved as shift
WARNING: shift/reduce conflict for COLON in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 133 resolved as shift
WARNING: shift/reduce conflict for COLON in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 134 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 134 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 134 resolved as shift
WARNING: shift/reduce conflict for COLON in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 135 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 135 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 135 resolved as shift
WARNING: shift/reduce conflict for COLON in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 136 resolved as shift
WARNING: shift/reduce conflict for COLON in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 137 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 137 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 137 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 137 resolved as shift
WARNING: shift/reduce conflict for COLON in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 181 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 181 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 181 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 181 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 181 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 181 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 181 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 181 resolved as shift
WARNING: shift/reduce conflict for AND in state 181 resolved as shift
WARNING: shift/reduce conflict for OR in state 181 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 181 resolved as shift
WARNING: shift/reduce conflict for COLON in state 181 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 188 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 188 resolved as shift
WARNING: shift/reduce conflict for IF in state 188 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 188 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 188 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 188 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 188 resolved as shift
WARNING: shift/reduce conflict for FOR in state 188 resolved as shift
WARNING: shift/reduce conflict for LET in state 188 resolved as shift
WARNING: shift/reduce conflict for VAR in state 188 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 191 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 191 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 191 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 191 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 191 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 191 resolved as shift
WARNING: shift/reduce conflict for FOR in state 191 resolved as shift
WARNING: shift/reduce conflict for LET in state 191 resolved as shift
WARNING: shift/reduce conflict for VAR in state 191 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 199 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 199 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 199 resolved as shift
WARNING: shift/reduce conflict for IF in state 199 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 199 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 199 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 199 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 199 resolved as shift
WARNING: shift/reduce conflict for FOR in state 199 resolved as shift
WARNING: shift/reduce conflict for LET in state 199 resolved as shift
WARNING: shift/reduce conflict for VAR in state 199 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 211 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 211 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 211 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 211 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for LET in state 211 resolved as shift
WARNING: shift/reduce conflict for VAR in state 211 resolved as shift
WARNING: reduce/reduce conflict in state 185 resolved using rule (statement -> function_call)
WARNING: rejected rule (expression -> function_call) in state 185
