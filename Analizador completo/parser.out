Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    BOOL
    BREAK
    CALLMETHOD
    CHARACTER
    CLASS
    COLLECTIONTYPE
    COMMENT
    CONTINUE
    DICTIONARYTYPE
    ENUM
    GUARD
    MINUSONE
    OPTIONALVARIABLE
    PLUSONE
    PRIVATE
    PUBLIC
    READLN
    RESIDUE
    SETVARIABLE
    STATIC
    STRUCT
    TYPEALIAS
    VALUESTYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment_to_type
Rule 5     statement -> assignment_to_type_collection
Rule 6     statement -> assignment_to_type_collection_set
Rule 7     statement -> variable_declarator VARIABLE ASSIGN expression
Rule 8     statement -> ifComp
Rule 9     statement -> print_statement
Rule 10    statement -> while_statement
Rule 11    statement -> switch_statement
Rule 12    statement -> import_statement
Rule 13    statement -> for_statement
Rule 14    statement -> function_general
Rule 15    statement -> function_call
Rule 16    statement -> function_init
Rule 17    variable_declarator -> LET
Rule 18    variable_declarator -> VAR
Rule 19    print_statement -> PRINT LPAREN expression RPAREN
Rule 20    expression -> expression PLUS expression
Rule 21    expression -> expression MINUS expression
Rule 22    expression -> expression MULTIPLY expression
Rule 23    expression -> expression DIVIDE expression
Rule 24    expression -> expression GREATERTHAN expression
Rule 25    expression -> expression LESSTHAN expression
Rule 26    expression -> expression EQUALS expression
Rule 27    expression -> expression NOTEQUALS expression
Rule 28    expression -> expression AND expression
Rule 29    expression -> expression OR expression
Rule 30    expression -> expression COMMA expression
Rule 31    expression -> expression COLON expression
Rule 32    expression -> LPAREN expression RPAREN
Rule 33    expression -> NOT expression
Rule 34    expression -> VARIABLE
Rule 35    expression -> type
Rule 36    expression -> comparacion
Rule 37    expression -> boolean_expresion
Rule 38    assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
Rule 39    assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
Rule 40    assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
Rule 41    assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
Rule 42    assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
Rule 43    assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
Rule 44    assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
Rule 45    assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
Rule 46    assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
Rule 47    integer_options -> INTEGER
Rule 48    integer_options -> INT
Rule 49    mul_integuer -> mul_integuer COMMA NUMBER
Rule 50    mul_integuer -> NUMBER
Rule 51    mul_string -> mul_string COMMA WSTRING
Rule 52    mul_string -> WSTRING
Rule 53    mul_booleano -> mul_booleano COMMA boolean_option
Rule 54    mul_booleano -> boolean_option
Rule 55    boolean_option -> TRUE
Rule 56    boolean_option -> FALSE
Rule 57    mul_float -> mul_float COMMA DECIMAL
Rule 58    mul_float -> DECIMAL
Rule 59    comparacion -> VARIABLE operadorComp VARIABLE
Rule 60    comparacion -> DECIMAL operadorComp DECIMAL
Rule 61    comparacion -> WSTRING operadorComp WSTRING
Rule 62    comparacion -> NUMBER operadorComp NUMBER
Rule 63    comparacion -> VARIABLE operadorComp DECIMAL
Rule 64    comparacion -> DECIMAL operadorComp VARIABLE
Rule 65    comparacion -> WSTRING operadorComp VARIABLE
Rule 66    comparacion -> VARIABLE operadorComp WSTRING
Rule 67    comparacion -> NUMBER operadorComp VARIABLE
Rule 68    comparacion -> VARIABLE operadorComp NUMBER
Rule 69    operadorComp -> GREATERTHAN
Rule 70    operadorComp -> LESSTHAN
Rule 71    operadorComp -> EQUALS
Rule 72    operadorComp -> NOTEQUALS
Rule 73    ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES
Rule 74    ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
Rule 75    type -> TRUE
Rule 76    type -> FALSE
Rule 77    type -> DECIMAL
Rule 78    type -> WSTRING
Rule 79    type -> NUMBER
Rule 80    assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
Rule 81    assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
Rule 82    assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
Rule 83    assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
Rule 84    boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
Rule 85    boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
Rule 86    boolean_expresion -> boolean_option logical_operator boolean_option
Rule 87    boolean_expresion -> logical_operator boolean_option
Rule 88    boolean_expresion -> boolean_option logical_operator
Rule 89    logical_operator -> AND
Rule 90    logical_operator -> OR
Rule 91    import_statement -> IMPORT VARIABLE
Rule 92    for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
Rule 93    for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
Rule 94    while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES
Rule 95    while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
Rule 96    switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES
Rule 97    caso -> CASE expression COLON cuerpo_caso caso
Rule 98    caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
Rule 99    cuerpo_caso -> expression
Rule 100   cuerpo_caso -> statement
Rule 101   functionstatements -> functionstatements functionbody
Rule 102   functionstatements -> functionbody
Rule 103   functionbody -> assignment_to_type
Rule 104   functionbody -> print_statement
Rule 105   functionbody -> ifComp
Rule 106   functionbody -> while_statement
Rule 107   functionbody -> switch_statement
Rule 108   functionbody -> import_statement
Rule 109   functionbody -> for_statement
Rule 110   functionbody -> empty
Rule 111   function_general -> function_declaration
Rule 112   function_general -> function_declaration_empty
Rule 113   function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
Rule 114   function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
Rule 115   data_type -> INTEGER
Rule 116   data_type -> STRING
Rule 117   data_type -> BOOLEAN
Rule 118   data_type -> DOUBLE
Rule 119   data_type -> FLOAT
Rule 120   data_type -> INT
Rule 121   function_parameters -> function_parameters COMMA VARIABLE COLON data_type
Rule 122   function_parameters -> VARIABLE COLON data_type
Rule 123   function_return_type -> ARROW data_type
Rule 124   function_return_type -> ARROW LPAREN function_parameters RPAREN
Rule 125   function_return_type -> empty
Rule 126   return_statement -> RETURN expression
Rule 127   function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
Rule 128   function_call -> VARIABLE LPAREN function_arguments RPAREN
Rule 129   function_arguments -> function_arguments COMMA expression
Rule 130   function_arguments -> expression
Rule 131   function_arguments -> empty
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 28 89
ARRAY                : 
ARROW                : 123 124
ASSIGN               : 7 38 39 40 41 42 43 44 45 46 80 81 82 83
BOOL                 : 
BOOLEAN              : 40 41 45 82 117
BREAK                : 
CALLMETHOD           : 
CASE                 : 97 98
CHARACTER            : 
CLASS                : 
COLLECTIONTYPE       : 
COLON                : 31 38 39 40 41 42 43 44 45 46 80 81 82 83 97 98 98 121 122
COMMA                : 30 49 51 53 57 121 129
COMMENT              : 
CONTINUE             : 
DECIMAL              : 42 57 58 60 60 63 64 77
DEFAULT              : 98
DICTIONARYTYPE       : 
DIVIDE               : 23
DOUBLE               : 118
ELSE                 : 74
ENUM                 : 
EQUALS               : 26 71
FALSE                : 41 56 76
FLOAT                : 42 46 83 119
FOR                  : 92 93
FUNC                 : 113 114
GREATERTHAN          : 24 69 80 81 82 83
GUARD                : 
IF                   : 73 74
IMPORT               : 91
IN                   : 92 93
INIT                 : 127
INT                  : 48 120
INTEGER              : 39 47 115
LBRACES              : 73 74 74 92 93 94 95 96 113 114 127
LESSTHAN             : 25 70 80 81 82 83
LET                  : 17
LPAREN               : 19 32 73 74 84 85 94 95 113 114 124 127 128
LSQUAREBRACKET       : 43 43 44 44 45 45 46 46 80 81 82 83
MINUS                : 21
MINUSONE             : 
MULTIPLY             : 22
NOT                  : 33
NOTEQUALS            : 27 72
NUMBER               : 39 49 50 62 62 67 68 79 92 92
OPTIONALVARIABLE     : 
OR                   : 29 90
PLUS                 : 20
PLUSONE              : 
PRINT                : 19
PRIVATE              : 
PUBLIC               : 
RANGE                : 92
RBRACES              : 73 74 74 92 93 94 95 96 113 114 127
READLN               : 
REPEAT               : 95
RESIDUE              : 
RETURN               : 126
RPAREN               : 19 32 73 74 84 85 94 95 113 114 124 127 128
RSQUAREBRACKET       : 43 43 44 44 45 45 46 46 80 81 82 83
SET                  : 80 81 82 83
SETVARIABLE          : 
STATIC               : 
STRING               : 38 44 81 116
STRUCT               : 
SWITCH               : 96
TRUE                 : 40 55 75
TYPEALIAS            : 
VALUESTYPE           : 
VAR                  : 18
VARIABLE             : 7 34 38 39 40 41 42 43 44 45 46 59 59 63 64 65 66 67 68 80 81 82 83 91 92 93 93 96 113 114 121 122 128
WHILE                : 94 95
WSTRING              : 38 51 52 61 61 65 66 78
error                : 

Nonterminals, with rules where they appear

assignment_to_type   : 4 103
assignment_to_type_collection : 5
assignment_to_type_collection_set : 6
boolean_expresion    : 37 84 85
boolean_option       : 53 54 84 84 85 85 86 86 87 88
caso                 : 96 97
comparacion          : 36 73 74
cuerpo_caso          : 97 98 98
data_type            : 121 122 123
empty                : 110 114 125 131
expression           : 7 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 94 95 97 98 99 126 129 130
for_statement        : 13 109
function_arguments   : 128 129
function_call        : 15
function_declaration : 111
function_declaration_empty : 112
function_general     : 14
function_init        : 16
function_parameters  : 113 121 124 127
function_return_type : 113 114
functionbody         : 101 102
functionstatements   : 101 113 114
ifComp               : 8 105
import_statement     : 12 108
integer_options      : 43 80
logical_operator     : 84 85 86 87 88
mul_booleano         : 45 53 82
mul_float            : 46 57 83
mul_integuer         : 43 49 80
mul_string           : 44 51 81
operadorComp         : 59 60 61 62 63 64 65 66 67 68
print_statement      : 9 104
program              : 0
return_statement     : 113 114
statement            : 2 3 100
statements           : 1 2 73 74 74 92 93 94 95 127
switch_statement     : 11 107
type                 : 35
variable_declarator  : 7 38 39 40 41 42 43 44 45 46 80 81 82 83
while_statement      : 10 106

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    $end            reduce using rule 1 (program -> statements .)
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 3

    (3) statements -> statement .

    LET             reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    REPEAT          reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    IMPORT          reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    INIT            reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACES         reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment_to_type .

    LET             reduce using rule 4 (statement -> assignment_to_type .)
    VAR             reduce using rule 4 (statement -> assignment_to_type .)
    IF              reduce using rule 4 (statement -> assignment_to_type .)
    PRINT           reduce using rule 4 (statement -> assignment_to_type .)
    WHILE           reduce using rule 4 (statement -> assignment_to_type .)
    REPEAT          reduce using rule 4 (statement -> assignment_to_type .)
    SWITCH          reduce using rule 4 (statement -> assignment_to_type .)
    IMPORT          reduce using rule 4 (statement -> assignment_to_type .)
    FOR             reduce using rule 4 (statement -> assignment_to_type .)
    VARIABLE        reduce using rule 4 (statement -> assignment_to_type .)
    INIT            reduce using rule 4 (statement -> assignment_to_type .)
    FUNC            reduce using rule 4 (statement -> assignment_to_type .)
    $end            reduce using rule 4 (statement -> assignment_to_type .)
    RBRACES         reduce using rule 4 (statement -> assignment_to_type .)
    DEFAULT         reduce using rule 4 (statement -> assignment_to_type .)
    CASE            reduce using rule 4 (statement -> assignment_to_type .)


state 5

    (5) statement -> assignment_to_type_collection .

    LET             reduce using rule 5 (statement -> assignment_to_type_collection .)
    VAR             reduce using rule 5 (statement -> assignment_to_type_collection .)
    IF              reduce using rule 5 (statement -> assignment_to_type_collection .)
    PRINT           reduce using rule 5 (statement -> assignment_to_type_collection .)
    WHILE           reduce using rule 5 (statement -> assignment_to_type_collection .)
    REPEAT          reduce using rule 5 (statement -> assignment_to_type_collection .)
    SWITCH          reduce using rule 5 (statement -> assignment_to_type_collection .)
    IMPORT          reduce using rule 5 (statement -> assignment_to_type_collection .)
    FOR             reduce using rule 5 (statement -> assignment_to_type_collection .)
    VARIABLE        reduce using rule 5 (statement -> assignment_to_type_collection .)
    INIT            reduce using rule 5 (statement -> assignment_to_type_collection .)
    FUNC            reduce using rule 5 (statement -> assignment_to_type_collection .)
    $end            reduce using rule 5 (statement -> assignment_to_type_collection .)
    RBRACES         reduce using rule 5 (statement -> assignment_to_type_collection .)
    DEFAULT         reduce using rule 5 (statement -> assignment_to_type_collection .)
    CASE            reduce using rule 5 (statement -> assignment_to_type_collection .)


state 6

    (6) statement -> assignment_to_type_collection_set .

    LET             reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    VAR             reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    IF              reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    PRINT           reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    WHILE           reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    REPEAT          reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    SWITCH          reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    IMPORT          reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    FOR             reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    VARIABLE        reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    INIT            reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    FUNC            reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    $end            reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    RBRACES         reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    DEFAULT         reduce using rule 6 (statement -> assignment_to_type_collection_set .)
    CASE            reduce using rule 6 (statement -> assignment_to_type_collection_set .)


state 7

    (7) statement -> variable_declarator . VARIABLE ASSIGN expression
    (38) assignment_to_type -> variable_declarator . VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> variable_declarator . VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> variable_declarator . VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator . VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> variable_declarator . VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> variable_declarator . VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> variable_declarator . VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> variable_declarator . VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> variable_declarator . VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> variable_declarator . VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> variable_declarator . VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> variable_declarator . VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> variable_declarator . VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    VARIABLE        shift and go to state 32


state 8

    (128) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 33


state 9

    (8) statement -> ifComp .

    LET             reduce using rule 8 (statement -> ifComp .)
    VAR             reduce using rule 8 (statement -> ifComp .)
    IF              reduce using rule 8 (statement -> ifComp .)
    PRINT           reduce using rule 8 (statement -> ifComp .)
    WHILE           reduce using rule 8 (statement -> ifComp .)
    REPEAT          reduce using rule 8 (statement -> ifComp .)
    SWITCH          reduce using rule 8 (statement -> ifComp .)
    IMPORT          reduce using rule 8 (statement -> ifComp .)
    FOR             reduce using rule 8 (statement -> ifComp .)
    VARIABLE        reduce using rule 8 (statement -> ifComp .)
    INIT            reduce using rule 8 (statement -> ifComp .)
    FUNC            reduce using rule 8 (statement -> ifComp .)
    $end            reduce using rule 8 (statement -> ifComp .)
    RBRACES         reduce using rule 8 (statement -> ifComp .)
    DEFAULT         reduce using rule 8 (statement -> ifComp .)
    CASE            reduce using rule 8 (statement -> ifComp .)


state 10

    (9) statement -> print_statement .

    LET             reduce using rule 9 (statement -> print_statement .)
    VAR             reduce using rule 9 (statement -> print_statement .)
    IF              reduce using rule 9 (statement -> print_statement .)
    PRINT           reduce using rule 9 (statement -> print_statement .)
    WHILE           reduce using rule 9 (statement -> print_statement .)
    REPEAT          reduce using rule 9 (statement -> print_statement .)
    SWITCH          reduce using rule 9 (statement -> print_statement .)
    IMPORT          reduce using rule 9 (statement -> print_statement .)
    FOR             reduce using rule 9 (statement -> print_statement .)
    VARIABLE        reduce using rule 9 (statement -> print_statement .)
    INIT            reduce using rule 9 (statement -> print_statement .)
    FUNC            reduce using rule 9 (statement -> print_statement .)
    $end            reduce using rule 9 (statement -> print_statement .)
    RBRACES         reduce using rule 9 (statement -> print_statement .)
    DEFAULT         reduce using rule 9 (statement -> print_statement .)
    CASE            reduce using rule 9 (statement -> print_statement .)


state 11

    (10) statement -> while_statement .

    LET             reduce using rule 10 (statement -> while_statement .)
    VAR             reduce using rule 10 (statement -> while_statement .)
    IF              reduce using rule 10 (statement -> while_statement .)
    PRINT           reduce using rule 10 (statement -> while_statement .)
    WHILE           reduce using rule 10 (statement -> while_statement .)
    REPEAT          reduce using rule 10 (statement -> while_statement .)
    SWITCH          reduce using rule 10 (statement -> while_statement .)
    IMPORT          reduce using rule 10 (statement -> while_statement .)
    FOR             reduce using rule 10 (statement -> while_statement .)
    VARIABLE        reduce using rule 10 (statement -> while_statement .)
    INIT            reduce using rule 10 (statement -> while_statement .)
    FUNC            reduce using rule 10 (statement -> while_statement .)
    $end            reduce using rule 10 (statement -> while_statement .)
    RBRACES         reduce using rule 10 (statement -> while_statement .)
    DEFAULT         reduce using rule 10 (statement -> while_statement .)
    CASE            reduce using rule 10 (statement -> while_statement .)


state 12

    (11) statement -> switch_statement .

    LET             reduce using rule 11 (statement -> switch_statement .)
    VAR             reduce using rule 11 (statement -> switch_statement .)
    IF              reduce using rule 11 (statement -> switch_statement .)
    PRINT           reduce using rule 11 (statement -> switch_statement .)
    WHILE           reduce using rule 11 (statement -> switch_statement .)
    REPEAT          reduce using rule 11 (statement -> switch_statement .)
    SWITCH          reduce using rule 11 (statement -> switch_statement .)
    IMPORT          reduce using rule 11 (statement -> switch_statement .)
    FOR             reduce using rule 11 (statement -> switch_statement .)
    VARIABLE        reduce using rule 11 (statement -> switch_statement .)
    INIT            reduce using rule 11 (statement -> switch_statement .)
    FUNC            reduce using rule 11 (statement -> switch_statement .)
    $end            reduce using rule 11 (statement -> switch_statement .)
    RBRACES         reduce using rule 11 (statement -> switch_statement .)
    DEFAULT         reduce using rule 11 (statement -> switch_statement .)
    CASE            reduce using rule 11 (statement -> switch_statement .)


state 13

    (12) statement -> import_statement .

    LET             reduce using rule 12 (statement -> import_statement .)
    VAR             reduce using rule 12 (statement -> import_statement .)
    IF              reduce using rule 12 (statement -> import_statement .)
    PRINT           reduce using rule 12 (statement -> import_statement .)
    WHILE           reduce using rule 12 (statement -> import_statement .)
    REPEAT          reduce using rule 12 (statement -> import_statement .)
    SWITCH          reduce using rule 12 (statement -> import_statement .)
    IMPORT          reduce using rule 12 (statement -> import_statement .)
    FOR             reduce using rule 12 (statement -> import_statement .)
    VARIABLE        reduce using rule 12 (statement -> import_statement .)
    INIT            reduce using rule 12 (statement -> import_statement .)
    FUNC            reduce using rule 12 (statement -> import_statement .)
    $end            reduce using rule 12 (statement -> import_statement .)
    RBRACES         reduce using rule 12 (statement -> import_statement .)
    DEFAULT         reduce using rule 12 (statement -> import_statement .)
    CASE            reduce using rule 12 (statement -> import_statement .)


state 14

    (13) statement -> for_statement .

    LET             reduce using rule 13 (statement -> for_statement .)
    VAR             reduce using rule 13 (statement -> for_statement .)
    IF              reduce using rule 13 (statement -> for_statement .)
    PRINT           reduce using rule 13 (statement -> for_statement .)
    WHILE           reduce using rule 13 (statement -> for_statement .)
    REPEAT          reduce using rule 13 (statement -> for_statement .)
    SWITCH          reduce using rule 13 (statement -> for_statement .)
    IMPORT          reduce using rule 13 (statement -> for_statement .)
    FOR             reduce using rule 13 (statement -> for_statement .)
    VARIABLE        reduce using rule 13 (statement -> for_statement .)
    INIT            reduce using rule 13 (statement -> for_statement .)
    FUNC            reduce using rule 13 (statement -> for_statement .)
    $end            reduce using rule 13 (statement -> for_statement .)
    RBRACES         reduce using rule 13 (statement -> for_statement .)
    DEFAULT         reduce using rule 13 (statement -> for_statement .)
    CASE            reduce using rule 13 (statement -> for_statement .)


state 15

    (14) statement -> function_general .

    LET             reduce using rule 14 (statement -> function_general .)
    VAR             reduce using rule 14 (statement -> function_general .)
    IF              reduce using rule 14 (statement -> function_general .)
    PRINT           reduce using rule 14 (statement -> function_general .)
    WHILE           reduce using rule 14 (statement -> function_general .)
    REPEAT          reduce using rule 14 (statement -> function_general .)
    SWITCH          reduce using rule 14 (statement -> function_general .)
    IMPORT          reduce using rule 14 (statement -> function_general .)
    FOR             reduce using rule 14 (statement -> function_general .)
    VARIABLE        reduce using rule 14 (statement -> function_general .)
    INIT            reduce using rule 14 (statement -> function_general .)
    FUNC            reduce using rule 14 (statement -> function_general .)
    $end            reduce using rule 14 (statement -> function_general .)
    RBRACES         reduce using rule 14 (statement -> function_general .)
    DEFAULT         reduce using rule 14 (statement -> function_general .)
    CASE            reduce using rule 14 (statement -> function_general .)


state 16

    (15) statement -> function_call .

    LET             reduce using rule 15 (statement -> function_call .)
    VAR             reduce using rule 15 (statement -> function_call .)
    IF              reduce using rule 15 (statement -> function_call .)
    PRINT           reduce using rule 15 (statement -> function_call .)
    WHILE           reduce using rule 15 (statement -> function_call .)
    REPEAT          reduce using rule 15 (statement -> function_call .)
    SWITCH          reduce using rule 15 (statement -> function_call .)
    IMPORT          reduce using rule 15 (statement -> function_call .)
    FOR             reduce using rule 15 (statement -> function_call .)
    VARIABLE        reduce using rule 15 (statement -> function_call .)
    INIT            reduce using rule 15 (statement -> function_call .)
    FUNC            reduce using rule 15 (statement -> function_call .)
    $end            reduce using rule 15 (statement -> function_call .)
    RBRACES         reduce using rule 15 (statement -> function_call .)
    DEFAULT         reduce using rule 15 (statement -> function_call .)
    CASE            reduce using rule 15 (statement -> function_call .)


state 17

    (16) statement -> function_init .

    LET             reduce using rule 16 (statement -> function_init .)
    VAR             reduce using rule 16 (statement -> function_init .)
    IF              reduce using rule 16 (statement -> function_init .)
    PRINT           reduce using rule 16 (statement -> function_init .)
    WHILE           reduce using rule 16 (statement -> function_init .)
    REPEAT          reduce using rule 16 (statement -> function_init .)
    SWITCH          reduce using rule 16 (statement -> function_init .)
    IMPORT          reduce using rule 16 (statement -> function_init .)
    FOR             reduce using rule 16 (statement -> function_init .)
    VARIABLE        reduce using rule 16 (statement -> function_init .)
    INIT            reduce using rule 16 (statement -> function_init .)
    FUNC            reduce using rule 16 (statement -> function_init .)
    $end            reduce using rule 16 (statement -> function_init .)
    RBRACES         reduce using rule 16 (statement -> function_init .)
    DEFAULT         reduce using rule 16 (statement -> function_init .)
    CASE            reduce using rule 16 (statement -> function_init .)


state 18

    (17) variable_declarator -> LET .

    VARIABLE        reduce using rule 17 (variable_declarator -> LET .)


state 19

    (18) variable_declarator -> VAR .

    VARIABLE        reduce using rule 18 (variable_declarator -> VAR .)


state 20

    (73) ifComp -> IF . LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> IF . LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LPAREN          shift and go to state 34


state 21

    (19) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 35


state 22

    (94) while_statement -> WHILE . LPAREN expression RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 36


state 23

    (95) while_statement -> REPEAT . LBRACES statements RBRACES WHILE LPAREN expression RPAREN

    LBRACES         shift and go to state 37


state 24

    (96) switch_statement -> SWITCH . VARIABLE LBRACES caso RBRACES

    VARIABLE        shift and go to state 38


state 25

    (91) import_statement -> IMPORT . VARIABLE

    VARIABLE        shift and go to state 39


state 26

    (92) for_statement -> FOR . VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> FOR . VARIABLE IN VARIABLE LBRACES statements RBRACES

    VARIABLE        shift and go to state 40


state 27

    (111) function_general -> function_declaration .

    LET             reduce using rule 111 (function_general -> function_declaration .)
    VAR             reduce using rule 111 (function_general -> function_declaration .)
    IF              reduce using rule 111 (function_general -> function_declaration .)
    PRINT           reduce using rule 111 (function_general -> function_declaration .)
    WHILE           reduce using rule 111 (function_general -> function_declaration .)
    REPEAT          reduce using rule 111 (function_general -> function_declaration .)
    SWITCH          reduce using rule 111 (function_general -> function_declaration .)
    IMPORT          reduce using rule 111 (function_general -> function_declaration .)
    FOR             reduce using rule 111 (function_general -> function_declaration .)
    VARIABLE        reduce using rule 111 (function_general -> function_declaration .)
    INIT            reduce using rule 111 (function_general -> function_declaration .)
    FUNC            reduce using rule 111 (function_general -> function_declaration .)
    $end            reduce using rule 111 (function_general -> function_declaration .)
    RBRACES         reduce using rule 111 (function_general -> function_declaration .)
    DEFAULT         reduce using rule 111 (function_general -> function_declaration .)
    CASE            reduce using rule 111 (function_general -> function_declaration .)


state 28

    (112) function_general -> function_declaration_empty .

    LET             reduce using rule 112 (function_general -> function_declaration_empty .)
    VAR             reduce using rule 112 (function_general -> function_declaration_empty .)
    IF              reduce using rule 112 (function_general -> function_declaration_empty .)
    PRINT           reduce using rule 112 (function_general -> function_declaration_empty .)
    WHILE           reduce using rule 112 (function_general -> function_declaration_empty .)
    REPEAT          reduce using rule 112 (function_general -> function_declaration_empty .)
    SWITCH          reduce using rule 112 (function_general -> function_declaration_empty .)
    IMPORT          reduce using rule 112 (function_general -> function_declaration_empty .)
    FOR             reduce using rule 112 (function_general -> function_declaration_empty .)
    VARIABLE        reduce using rule 112 (function_general -> function_declaration_empty .)
    INIT            reduce using rule 112 (function_general -> function_declaration_empty .)
    FUNC            reduce using rule 112 (function_general -> function_declaration_empty .)
    $end            reduce using rule 112 (function_general -> function_declaration_empty .)
    RBRACES         reduce using rule 112 (function_general -> function_declaration_empty .)
    DEFAULT         reduce using rule 112 (function_general -> function_declaration_empty .)
    CASE            reduce using rule 112 (function_general -> function_declaration_empty .)


state 29

    (127) function_init -> INIT . LPAREN function_parameters RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 41


state 30

    (113) function_declaration -> FUNC . VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> FUNC . VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 42


state 31

    (2) statements -> statements statement .

    LET             reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    INIT            reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACES         reduce using rule 2 (statements -> statements statement .)


state 32

    (7) statement -> variable_declarator VARIABLE . ASSIGN expression
    (38) assignment_to_type -> variable_declarator VARIABLE . COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> variable_declarator VARIABLE . COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> variable_declarator VARIABLE . COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator VARIABLE . COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> variable_declarator VARIABLE . COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> variable_declarator VARIABLE . COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> variable_declarator VARIABLE . COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> variable_declarator VARIABLE . COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> variable_declarator VARIABLE . COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE . COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE . COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE . COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE . COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    ASSIGN          shift and go to state 43
    COLON           shift and go to state 44


state 33

    (128) function_call -> VARIABLE LPAREN . function_arguments RPAREN
    (129) function_arguments -> . function_arguments COMMA expression
    (130) function_arguments -> . expression
    (131) function_arguments -> . empty
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (132) empty -> .
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    function_arguments             shift and go to state 47
    expression                     shift and go to state 48
    empty                          shift and go to state 49
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 34

    (73) ifComp -> IF LPAREN . comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> IF LPAREN . comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER

    VARIABLE        shift and go to state 64
    DECIMAL         shift and go to state 65
    WSTRING         shift and go to state 66
    NUMBER          shift and go to state 67

    comparacion                    shift and go to state 63

state 35

    (19) print_statement -> PRINT LPAREN . expression RPAREN
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 68
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 36

    (94) while_statement -> WHILE LPAREN . expression RPAREN LBRACES statements RBRACES
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 69
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 37

    (95) while_statement -> REPEAT LBRACES . statements RBRACES WHILE LPAREN expression RPAREN
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 70
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 38

    (96) switch_statement -> SWITCH VARIABLE . LBRACES caso RBRACES

    LBRACES         shift and go to state 71


state 39

    (91) import_statement -> IMPORT VARIABLE .

    LET             reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    VAR             reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    IF              reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    PRINT           reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    WHILE           reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    REPEAT          reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    SWITCH          reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    IMPORT          reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    FOR             reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    VARIABLE        reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    INIT            reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    FUNC            reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    $end            reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    RBRACES         reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    DEFAULT         reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    CASE            reduce using rule 91 (import_statement -> IMPORT VARIABLE .)
    RETURN          reduce using rule 91 (import_statement -> IMPORT VARIABLE .)


state 40

    (92) for_statement -> FOR VARIABLE . IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> FOR VARIABLE . IN VARIABLE LBRACES statements RBRACES

    IN              shift and go to state 72


state 41

    (127) function_init -> INIT LPAREN . function_parameters RPAREN LBRACES statements RBRACES
    (121) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (122) function_parameters -> . VARIABLE COLON data_type

    VARIABLE        shift and go to state 74

    function_parameters            shift and go to state 73

state 42

    (113) function_declaration -> FUNC VARIABLE . LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> FUNC VARIABLE . LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 75


state 43

    (7) statement -> variable_declarator VARIABLE ASSIGN . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 76
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 44

    (38) assignment_to_type -> variable_declarator VARIABLE COLON . STRING ASSIGN WSTRING
    (39) assignment_to_type -> variable_declarator VARIABLE COLON . INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> variable_declarator VARIABLE COLON . BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator VARIABLE COLON . BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> variable_declarator VARIABLE COLON . FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON . LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON . LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON . LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON . LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON . SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON . SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON . SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON . SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    STRING          shift and go to state 77
    INTEGER         shift and go to state 78
    BOOLEAN         shift and go to state 79
    FLOAT           shift and go to state 80
    LSQUAREBRACKET  shift and go to state 81
    SET             shift and go to state 82


state 45

    (34) expression -> VARIABLE .
    (59) comparacion -> VARIABLE . operadorComp VARIABLE
    (63) comparacion -> VARIABLE . operadorComp DECIMAL
    (66) comparacion -> VARIABLE . operadorComp WSTRING
    (68) comparacion -> VARIABLE . operadorComp NUMBER
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    PLUS            reduce using rule 34 (expression -> VARIABLE .)
    MINUS           reduce using rule 34 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 34 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 34 (expression -> VARIABLE .)
    AND             reduce using rule 34 (expression -> VARIABLE .)
    OR              reduce using rule 34 (expression -> VARIABLE .)
    COMMA           reduce using rule 34 (expression -> VARIABLE .)
    COLON           reduce using rule 34 (expression -> VARIABLE .)
    RPAREN          reduce using rule 34 (expression -> VARIABLE .)
    LET             reduce using rule 34 (expression -> VARIABLE .)
    VAR             reduce using rule 34 (expression -> VARIABLE .)
    IF              reduce using rule 34 (expression -> VARIABLE .)
    PRINT           reduce using rule 34 (expression -> VARIABLE .)
    WHILE           reduce using rule 34 (expression -> VARIABLE .)
    REPEAT          reduce using rule 34 (expression -> VARIABLE .)
    SWITCH          reduce using rule 34 (expression -> VARIABLE .)
    IMPORT          reduce using rule 34 (expression -> VARIABLE .)
    FOR             reduce using rule 34 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 34 (expression -> VARIABLE .)
    INIT            reduce using rule 34 (expression -> VARIABLE .)
    FUNC            reduce using rule 34 (expression -> VARIABLE .)
    $end            reduce using rule 34 (expression -> VARIABLE .)
    RBRACES         reduce using rule 34 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 34 (expression -> VARIABLE .)
    CASE            reduce using rule 34 (expression -> VARIABLE .)
    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

  ! GREATERTHAN     [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! NOTEQUALS       [ reduce using rule 34 (expression -> VARIABLE .) ]

    operadorComp                   shift and go to state 83

state 46

    (32) expression -> LPAREN . expression RPAREN
    (84) boolean_expresion -> LPAREN . boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 88
    boolean_option                 shift and go to state 89
    logical_operator               shift and go to state 62
    boolean_expresion              shift and go to state 55
    type                           shift and go to state 53
    comparacion                    shift and go to state 54

state 47

    (128) function_call -> VARIABLE LPAREN function_arguments . RPAREN
    (129) function_arguments -> function_arguments . COMMA expression

    RPAREN          shift and go to state 92
    COMMA           shift and go to state 93


state 48

    (130) function_arguments -> expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 130 (function_arguments -> expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! COMMA           [ reduce using rule 130 (function_arguments -> expression .) ]


state 49

    (131) function_arguments -> empty .

    RPAREN          reduce using rule 131 (function_arguments -> empty .)
    COMMA           reduce using rule 131 (function_arguments -> empty .)


state 50

    (89) logical_operator -> AND .

    TRUE            reduce using rule 89 (logical_operator -> AND .)
    FALSE           reduce using rule 89 (logical_operator -> AND .)
    LPAREN          reduce using rule 89 (logical_operator -> AND .)
    PLUS            reduce using rule 89 (logical_operator -> AND .)
    MINUS           reduce using rule 89 (logical_operator -> AND .)
    MULTIPLY        reduce using rule 89 (logical_operator -> AND .)
    DIVIDE          reduce using rule 89 (logical_operator -> AND .)
    GREATERTHAN     reduce using rule 89 (logical_operator -> AND .)
    LESSTHAN        reduce using rule 89 (logical_operator -> AND .)
    EQUALS          reduce using rule 89 (logical_operator -> AND .)
    NOTEQUALS       reduce using rule 89 (logical_operator -> AND .)
    AND             reduce using rule 89 (logical_operator -> AND .)
    OR              reduce using rule 89 (logical_operator -> AND .)
    COMMA           reduce using rule 89 (logical_operator -> AND .)
    COLON           reduce using rule 89 (logical_operator -> AND .)
    RPAREN          reduce using rule 89 (logical_operator -> AND .)
    LET             reduce using rule 89 (logical_operator -> AND .)
    VAR             reduce using rule 89 (logical_operator -> AND .)
    IF              reduce using rule 89 (logical_operator -> AND .)
    PRINT           reduce using rule 89 (logical_operator -> AND .)
    WHILE           reduce using rule 89 (logical_operator -> AND .)
    REPEAT          reduce using rule 89 (logical_operator -> AND .)
    SWITCH          reduce using rule 89 (logical_operator -> AND .)
    IMPORT          reduce using rule 89 (logical_operator -> AND .)
    FOR             reduce using rule 89 (logical_operator -> AND .)
    VARIABLE        reduce using rule 89 (logical_operator -> AND .)
    INIT            reduce using rule 89 (logical_operator -> AND .)
    FUNC            reduce using rule 89 (logical_operator -> AND .)
    $end            reduce using rule 89 (logical_operator -> AND .)
    RBRACES         reduce using rule 89 (logical_operator -> AND .)
    DEFAULT         reduce using rule 89 (logical_operator -> AND .)
    CASE            reduce using rule 89 (logical_operator -> AND .)


state 51

    (90) logical_operator -> OR .

    TRUE            reduce using rule 90 (logical_operator -> OR .)
    FALSE           reduce using rule 90 (logical_operator -> OR .)
    LPAREN          reduce using rule 90 (logical_operator -> OR .)
    PLUS            reduce using rule 90 (logical_operator -> OR .)
    MINUS           reduce using rule 90 (logical_operator -> OR .)
    MULTIPLY        reduce using rule 90 (logical_operator -> OR .)
    DIVIDE          reduce using rule 90 (logical_operator -> OR .)
    GREATERTHAN     reduce using rule 90 (logical_operator -> OR .)
    LESSTHAN        reduce using rule 90 (logical_operator -> OR .)
    EQUALS          reduce using rule 90 (logical_operator -> OR .)
    NOTEQUALS       reduce using rule 90 (logical_operator -> OR .)
    AND             reduce using rule 90 (logical_operator -> OR .)
    OR              reduce using rule 90 (logical_operator -> OR .)
    COMMA           reduce using rule 90 (logical_operator -> OR .)
    COLON           reduce using rule 90 (logical_operator -> OR .)
    RPAREN          reduce using rule 90 (logical_operator -> OR .)
    LET             reduce using rule 90 (logical_operator -> OR .)
    VAR             reduce using rule 90 (logical_operator -> OR .)
    IF              reduce using rule 90 (logical_operator -> OR .)
    PRINT           reduce using rule 90 (logical_operator -> OR .)
    WHILE           reduce using rule 90 (logical_operator -> OR .)
    REPEAT          reduce using rule 90 (logical_operator -> OR .)
    SWITCH          reduce using rule 90 (logical_operator -> OR .)
    IMPORT          reduce using rule 90 (logical_operator -> OR .)
    FOR             reduce using rule 90 (logical_operator -> OR .)
    VARIABLE        reduce using rule 90 (logical_operator -> OR .)
    INIT            reduce using rule 90 (logical_operator -> OR .)
    FUNC            reduce using rule 90 (logical_operator -> OR .)
    $end            reduce using rule 90 (logical_operator -> OR .)
    RBRACES         reduce using rule 90 (logical_operator -> OR .)
    DEFAULT         reduce using rule 90 (logical_operator -> OR .)
    CASE            reduce using rule 90 (logical_operator -> OR .)


state 52

    (33) expression -> NOT . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 106
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 53

    (35) expression -> type .

    PLUS            reduce using rule 35 (expression -> type .)
    MINUS           reduce using rule 35 (expression -> type .)
    MULTIPLY        reduce using rule 35 (expression -> type .)
    DIVIDE          reduce using rule 35 (expression -> type .)
    GREATERTHAN     reduce using rule 35 (expression -> type .)
    LESSTHAN        reduce using rule 35 (expression -> type .)
    EQUALS          reduce using rule 35 (expression -> type .)
    NOTEQUALS       reduce using rule 35 (expression -> type .)
    AND             reduce using rule 35 (expression -> type .)
    OR              reduce using rule 35 (expression -> type .)
    COMMA           reduce using rule 35 (expression -> type .)
    COLON           reduce using rule 35 (expression -> type .)
    RPAREN          reduce using rule 35 (expression -> type .)
    LET             reduce using rule 35 (expression -> type .)
    VAR             reduce using rule 35 (expression -> type .)
    IF              reduce using rule 35 (expression -> type .)
    PRINT           reduce using rule 35 (expression -> type .)
    WHILE           reduce using rule 35 (expression -> type .)
    REPEAT          reduce using rule 35 (expression -> type .)
    SWITCH          reduce using rule 35 (expression -> type .)
    IMPORT          reduce using rule 35 (expression -> type .)
    FOR             reduce using rule 35 (expression -> type .)
    VARIABLE        reduce using rule 35 (expression -> type .)
    INIT            reduce using rule 35 (expression -> type .)
    FUNC            reduce using rule 35 (expression -> type .)
    $end            reduce using rule 35 (expression -> type .)
    RBRACES         reduce using rule 35 (expression -> type .)
    DEFAULT         reduce using rule 35 (expression -> type .)
    CASE            reduce using rule 35 (expression -> type .)


state 54

    (36) expression -> comparacion .

    PLUS            reduce using rule 36 (expression -> comparacion .)
    MINUS           reduce using rule 36 (expression -> comparacion .)
    MULTIPLY        reduce using rule 36 (expression -> comparacion .)
    DIVIDE          reduce using rule 36 (expression -> comparacion .)
    GREATERTHAN     reduce using rule 36 (expression -> comparacion .)
    LESSTHAN        reduce using rule 36 (expression -> comparacion .)
    EQUALS          reduce using rule 36 (expression -> comparacion .)
    NOTEQUALS       reduce using rule 36 (expression -> comparacion .)
    AND             reduce using rule 36 (expression -> comparacion .)
    OR              reduce using rule 36 (expression -> comparacion .)
    COMMA           reduce using rule 36 (expression -> comparacion .)
    COLON           reduce using rule 36 (expression -> comparacion .)
    RPAREN          reduce using rule 36 (expression -> comparacion .)
    LET             reduce using rule 36 (expression -> comparacion .)
    VAR             reduce using rule 36 (expression -> comparacion .)
    IF              reduce using rule 36 (expression -> comparacion .)
    PRINT           reduce using rule 36 (expression -> comparacion .)
    WHILE           reduce using rule 36 (expression -> comparacion .)
    REPEAT          reduce using rule 36 (expression -> comparacion .)
    SWITCH          reduce using rule 36 (expression -> comparacion .)
    IMPORT          reduce using rule 36 (expression -> comparacion .)
    FOR             reduce using rule 36 (expression -> comparacion .)
    VARIABLE        reduce using rule 36 (expression -> comparacion .)
    INIT            reduce using rule 36 (expression -> comparacion .)
    FUNC            reduce using rule 36 (expression -> comparacion .)
    $end            reduce using rule 36 (expression -> comparacion .)
    RBRACES         reduce using rule 36 (expression -> comparacion .)
    DEFAULT         reduce using rule 36 (expression -> comparacion .)
    CASE            reduce using rule 36 (expression -> comparacion .)


state 55

    (37) expression -> boolean_expresion .
    (85) boolean_expresion -> boolean_expresion . LPAREN boolean_option logical_operator boolean_option RPAREN

    PLUS            reduce using rule 37 (expression -> boolean_expresion .)
    MINUS           reduce using rule 37 (expression -> boolean_expresion .)
    MULTIPLY        reduce using rule 37 (expression -> boolean_expresion .)
    DIVIDE          reduce using rule 37 (expression -> boolean_expresion .)
    GREATERTHAN     reduce using rule 37 (expression -> boolean_expresion .)
    LESSTHAN        reduce using rule 37 (expression -> boolean_expresion .)
    EQUALS          reduce using rule 37 (expression -> boolean_expresion .)
    NOTEQUALS       reduce using rule 37 (expression -> boolean_expresion .)
    AND             reduce using rule 37 (expression -> boolean_expresion .)
    OR              reduce using rule 37 (expression -> boolean_expresion .)
    COMMA           reduce using rule 37 (expression -> boolean_expresion .)
    COLON           reduce using rule 37 (expression -> boolean_expresion .)
    RPAREN          reduce using rule 37 (expression -> boolean_expresion .)
    LET             reduce using rule 37 (expression -> boolean_expresion .)
    VAR             reduce using rule 37 (expression -> boolean_expresion .)
    IF              reduce using rule 37 (expression -> boolean_expresion .)
    PRINT           reduce using rule 37 (expression -> boolean_expresion .)
    WHILE           reduce using rule 37 (expression -> boolean_expresion .)
    REPEAT          reduce using rule 37 (expression -> boolean_expresion .)
    SWITCH          reduce using rule 37 (expression -> boolean_expresion .)
    IMPORT          reduce using rule 37 (expression -> boolean_expresion .)
    FOR             reduce using rule 37 (expression -> boolean_expresion .)
    VARIABLE        reduce using rule 37 (expression -> boolean_expresion .)
    INIT            reduce using rule 37 (expression -> boolean_expresion .)
    FUNC            reduce using rule 37 (expression -> boolean_expresion .)
    $end            reduce using rule 37 (expression -> boolean_expresion .)
    RBRACES         reduce using rule 37 (expression -> boolean_expresion .)
    DEFAULT         reduce using rule 37 (expression -> boolean_expresion .)
    CASE            reduce using rule 37 (expression -> boolean_expresion .)
    LPAREN          shift and go to state 107


state 56

    (75) type -> TRUE .
    (55) boolean_option -> TRUE .

  ! reduce/reduce conflict for AND resolved using rule 55 (boolean_option -> TRUE .)
  ! reduce/reduce conflict for OR resolved using rule 55 (boolean_option -> TRUE .)
    PLUS            reduce using rule 75 (type -> TRUE .)
    MINUS           reduce using rule 75 (type -> TRUE .)
    MULTIPLY        reduce using rule 75 (type -> TRUE .)
    DIVIDE          reduce using rule 75 (type -> TRUE .)
    GREATERTHAN     reduce using rule 75 (type -> TRUE .)
    LESSTHAN        reduce using rule 75 (type -> TRUE .)
    EQUALS          reduce using rule 75 (type -> TRUE .)
    NOTEQUALS       reduce using rule 75 (type -> TRUE .)
    COMMA           reduce using rule 75 (type -> TRUE .)
    COLON           reduce using rule 75 (type -> TRUE .)
    RPAREN          reduce using rule 75 (type -> TRUE .)
    LET             reduce using rule 75 (type -> TRUE .)
    VAR             reduce using rule 75 (type -> TRUE .)
    IF              reduce using rule 75 (type -> TRUE .)
    PRINT           reduce using rule 75 (type -> TRUE .)
    WHILE           reduce using rule 75 (type -> TRUE .)
    REPEAT          reduce using rule 75 (type -> TRUE .)
    SWITCH          reduce using rule 75 (type -> TRUE .)
    IMPORT          reduce using rule 75 (type -> TRUE .)
    FOR             reduce using rule 75 (type -> TRUE .)
    VARIABLE        reduce using rule 75 (type -> TRUE .)
    INIT            reduce using rule 75 (type -> TRUE .)
    FUNC            reduce using rule 75 (type -> TRUE .)
    $end            reduce using rule 75 (type -> TRUE .)
    RBRACES         reduce using rule 75 (type -> TRUE .)
    DEFAULT         reduce using rule 75 (type -> TRUE .)
    CASE            reduce using rule 75 (type -> TRUE .)
    AND             reduce using rule 55 (boolean_option -> TRUE .)
    OR              reduce using rule 55 (boolean_option -> TRUE .)

  ! AND             [ reduce using rule 75 (type -> TRUE .) ]
  ! OR              [ reduce using rule 75 (type -> TRUE .) ]


state 57

    (76) type -> FALSE .
    (56) boolean_option -> FALSE .

  ! reduce/reduce conflict for AND resolved using rule 56 (boolean_option -> FALSE .)
  ! reduce/reduce conflict for OR resolved using rule 56 (boolean_option -> FALSE .)
    PLUS            reduce using rule 76 (type -> FALSE .)
    MINUS           reduce using rule 76 (type -> FALSE .)
    MULTIPLY        reduce using rule 76 (type -> FALSE .)
    DIVIDE          reduce using rule 76 (type -> FALSE .)
    GREATERTHAN     reduce using rule 76 (type -> FALSE .)
    LESSTHAN        reduce using rule 76 (type -> FALSE .)
    EQUALS          reduce using rule 76 (type -> FALSE .)
    NOTEQUALS       reduce using rule 76 (type -> FALSE .)
    COMMA           reduce using rule 76 (type -> FALSE .)
    COLON           reduce using rule 76 (type -> FALSE .)
    RPAREN          reduce using rule 76 (type -> FALSE .)
    LET             reduce using rule 76 (type -> FALSE .)
    VAR             reduce using rule 76 (type -> FALSE .)
    IF              reduce using rule 76 (type -> FALSE .)
    PRINT           reduce using rule 76 (type -> FALSE .)
    WHILE           reduce using rule 76 (type -> FALSE .)
    REPEAT          reduce using rule 76 (type -> FALSE .)
    SWITCH          reduce using rule 76 (type -> FALSE .)
    IMPORT          reduce using rule 76 (type -> FALSE .)
    FOR             reduce using rule 76 (type -> FALSE .)
    VARIABLE        reduce using rule 76 (type -> FALSE .)
    INIT            reduce using rule 76 (type -> FALSE .)
    FUNC            reduce using rule 76 (type -> FALSE .)
    $end            reduce using rule 76 (type -> FALSE .)
    RBRACES         reduce using rule 76 (type -> FALSE .)
    DEFAULT         reduce using rule 76 (type -> FALSE .)
    CASE            reduce using rule 76 (type -> FALSE .)
    AND             reduce using rule 56 (boolean_option -> FALSE .)
    OR              reduce using rule 56 (boolean_option -> FALSE .)

  ! AND             [ reduce using rule 76 (type -> FALSE .) ]
  ! OR              [ reduce using rule 76 (type -> FALSE .) ]


state 58

    (77) type -> DECIMAL .
    (60) comparacion -> DECIMAL . operadorComp DECIMAL
    (64) comparacion -> DECIMAL . operadorComp VARIABLE
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    PLUS            reduce using rule 77 (type -> DECIMAL .)
    MINUS           reduce using rule 77 (type -> DECIMAL .)
    MULTIPLY        reduce using rule 77 (type -> DECIMAL .)
    DIVIDE          reduce using rule 77 (type -> DECIMAL .)
    AND             reduce using rule 77 (type -> DECIMAL .)
    OR              reduce using rule 77 (type -> DECIMAL .)
    COMMA           reduce using rule 77 (type -> DECIMAL .)
    COLON           reduce using rule 77 (type -> DECIMAL .)
    RPAREN          reduce using rule 77 (type -> DECIMAL .)
    LET             reduce using rule 77 (type -> DECIMAL .)
    VAR             reduce using rule 77 (type -> DECIMAL .)
    IF              reduce using rule 77 (type -> DECIMAL .)
    PRINT           reduce using rule 77 (type -> DECIMAL .)
    WHILE           reduce using rule 77 (type -> DECIMAL .)
    REPEAT          reduce using rule 77 (type -> DECIMAL .)
    SWITCH          reduce using rule 77 (type -> DECIMAL .)
    IMPORT          reduce using rule 77 (type -> DECIMAL .)
    FOR             reduce using rule 77 (type -> DECIMAL .)
    VARIABLE        reduce using rule 77 (type -> DECIMAL .)
    INIT            reduce using rule 77 (type -> DECIMAL .)
    FUNC            reduce using rule 77 (type -> DECIMAL .)
    $end            reduce using rule 77 (type -> DECIMAL .)
    RBRACES         reduce using rule 77 (type -> DECIMAL .)
    DEFAULT         reduce using rule 77 (type -> DECIMAL .)
    CASE            reduce using rule 77 (type -> DECIMAL .)
    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

  ! GREATERTHAN     [ reduce using rule 77 (type -> DECIMAL .) ]
  ! LESSTHAN        [ reduce using rule 77 (type -> DECIMAL .) ]
  ! EQUALS          [ reduce using rule 77 (type -> DECIMAL .) ]
  ! NOTEQUALS       [ reduce using rule 77 (type -> DECIMAL .) ]

    operadorComp                   shift and go to state 108

state 59

    (78) type -> WSTRING .
    (61) comparacion -> WSTRING . operadorComp WSTRING
    (65) comparacion -> WSTRING . operadorComp VARIABLE
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    PLUS            reduce using rule 78 (type -> WSTRING .)
    MINUS           reduce using rule 78 (type -> WSTRING .)
    MULTIPLY        reduce using rule 78 (type -> WSTRING .)
    DIVIDE          reduce using rule 78 (type -> WSTRING .)
    AND             reduce using rule 78 (type -> WSTRING .)
    OR              reduce using rule 78 (type -> WSTRING .)
    COMMA           reduce using rule 78 (type -> WSTRING .)
    COLON           reduce using rule 78 (type -> WSTRING .)
    RPAREN          reduce using rule 78 (type -> WSTRING .)
    LET             reduce using rule 78 (type -> WSTRING .)
    VAR             reduce using rule 78 (type -> WSTRING .)
    IF              reduce using rule 78 (type -> WSTRING .)
    PRINT           reduce using rule 78 (type -> WSTRING .)
    WHILE           reduce using rule 78 (type -> WSTRING .)
    REPEAT          reduce using rule 78 (type -> WSTRING .)
    SWITCH          reduce using rule 78 (type -> WSTRING .)
    IMPORT          reduce using rule 78 (type -> WSTRING .)
    FOR             reduce using rule 78 (type -> WSTRING .)
    VARIABLE        reduce using rule 78 (type -> WSTRING .)
    INIT            reduce using rule 78 (type -> WSTRING .)
    FUNC            reduce using rule 78 (type -> WSTRING .)
    $end            reduce using rule 78 (type -> WSTRING .)
    RBRACES         reduce using rule 78 (type -> WSTRING .)
    DEFAULT         reduce using rule 78 (type -> WSTRING .)
    CASE            reduce using rule 78 (type -> WSTRING .)
    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

  ! GREATERTHAN     [ reduce using rule 78 (type -> WSTRING .) ]
  ! LESSTHAN        [ reduce using rule 78 (type -> WSTRING .) ]
  ! EQUALS          [ reduce using rule 78 (type -> WSTRING .) ]
  ! NOTEQUALS       [ reduce using rule 78 (type -> WSTRING .) ]

    operadorComp                   shift and go to state 109

state 60

    (79) type -> NUMBER .
    (62) comparacion -> NUMBER . operadorComp NUMBER
    (67) comparacion -> NUMBER . operadorComp VARIABLE
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    PLUS            reduce using rule 79 (type -> NUMBER .)
    MINUS           reduce using rule 79 (type -> NUMBER .)
    MULTIPLY        reduce using rule 79 (type -> NUMBER .)
    DIVIDE          reduce using rule 79 (type -> NUMBER .)
    AND             reduce using rule 79 (type -> NUMBER .)
    OR              reduce using rule 79 (type -> NUMBER .)
    COMMA           reduce using rule 79 (type -> NUMBER .)
    COLON           reduce using rule 79 (type -> NUMBER .)
    RPAREN          reduce using rule 79 (type -> NUMBER .)
    LET             reduce using rule 79 (type -> NUMBER .)
    VAR             reduce using rule 79 (type -> NUMBER .)
    IF              reduce using rule 79 (type -> NUMBER .)
    PRINT           reduce using rule 79 (type -> NUMBER .)
    WHILE           reduce using rule 79 (type -> NUMBER .)
    REPEAT          reduce using rule 79 (type -> NUMBER .)
    SWITCH          reduce using rule 79 (type -> NUMBER .)
    IMPORT          reduce using rule 79 (type -> NUMBER .)
    FOR             reduce using rule 79 (type -> NUMBER .)
    VARIABLE        reduce using rule 79 (type -> NUMBER .)
    INIT            reduce using rule 79 (type -> NUMBER .)
    FUNC            reduce using rule 79 (type -> NUMBER .)
    $end            reduce using rule 79 (type -> NUMBER .)
    RBRACES         reduce using rule 79 (type -> NUMBER .)
    DEFAULT         reduce using rule 79 (type -> NUMBER .)
    CASE            reduce using rule 79 (type -> NUMBER .)
    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

  ! GREATERTHAN     [ reduce using rule 79 (type -> NUMBER .) ]
  ! LESSTHAN        [ reduce using rule 79 (type -> NUMBER .) ]
  ! EQUALS          [ reduce using rule 79 (type -> NUMBER .) ]
  ! NOTEQUALS       [ reduce using rule 79 (type -> NUMBER .) ]

    operadorComp                   shift and go to state 110

state 61

    (86) boolean_expresion -> boolean_option . logical_operator boolean_option
    (88) boolean_expresion -> boolean_option . logical_operator
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    AND             shift and go to state 50
    OR              shift and go to state 51

    logical_operator               shift and go to state 111

state 62

    (87) boolean_expresion -> logical_operator . boolean_option
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 112

state 63

    (73) ifComp -> IF LPAREN comparacion . RPAREN LBRACES statements RBRACES
    (74) ifComp -> IF LPAREN comparacion . RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    RPAREN          shift and go to state 115


state 64

    (59) comparacion -> VARIABLE . operadorComp VARIABLE
    (63) comparacion -> VARIABLE . operadorComp DECIMAL
    (66) comparacion -> VARIABLE . operadorComp WSTRING
    (68) comparacion -> VARIABLE . operadorComp NUMBER
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

    operadorComp                   shift and go to state 83

state 65

    (60) comparacion -> DECIMAL . operadorComp DECIMAL
    (64) comparacion -> DECIMAL . operadorComp VARIABLE
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

    operadorComp                   shift and go to state 108

state 66

    (61) comparacion -> WSTRING . operadorComp WSTRING
    (65) comparacion -> WSTRING . operadorComp VARIABLE
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

    operadorComp                   shift and go to state 109

state 67

    (62) comparacion -> NUMBER . operadorComp NUMBER
    (67) comparacion -> NUMBER . operadorComp VARIABLE
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

    operadorComp                   shift and go to state 110

state 68

    (19) print_statement -> PRINT LPAREN expression . RPAREN
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 69

    (94) while_statement -> WHILE LPAREN expression . RPAREN LBRACES statements RBRACES
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 70

    (95) while_statement -> REPEAT LBRACES statements . RBRACES WHILE LPAREN expression RPAREN
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 118
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 71

    (96) switch_statement -> SWITCH VARIABLE LBRACES . caso RBRACES
    (97) caso -> . CASE expression COLON cuerpo_caso caso
    (98) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    CASE            shift and go to state 120

    caso                           shift and go to state 119

state 72

    (92) for_statement -> FOR VARIABLE IN . NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> FOR VARIABLE IN . VARIABLE LBRACES statements RBRACES

    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 121


state 73

    (127) function_init -> INIT LPAREN function_parameters . RPAREN LBRACES statements RBRACES
    (121) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 74

    (122) function_parameters -> VARIABLE . COLON data_type

    COLON           shift and go to state 125


state 75

    (113) function_declaration -> FUNC VARIABLE LPAREN . function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> FUNC VARIABLE LPAREN . empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (121) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (122) function_parameters -> . VARIABLE COLON data_type
    (132) empty -> .

    VARIABLE        shift and go to state 74
    RPAREN          reduce using rule 132 (empty -> .)

    function_parameters            shift and go to state 126
    empty                          shift and go to state 127

state 76

    (7) statement -> variable_declarator VARIABLE ASSIGN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    LET             reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    VAR             reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    IF              reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    REPEAT          reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    IMPORT          reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    FOR             reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    VARIABLE        reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    INIT            reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    $end            reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    CASE            reduce using rule 7 (statement -> variable_declarator VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 77

    (38) assignment_to_type -> variable_declarator VARIABLE COLON STRING . ASSIGN WSTRING

    ASSIGN          shift and go to state 128


state 78

    (39) assignment_to_type -> variable_declarator VARIABLE COLON INTEGER . ASSIGN NUMBER

    ASSIGN          shift and go to state 129


state 79

    (40) assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN . ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN . ASSIGN FALSE

    ASSIGN          shift and go to state 130


state 80

    (42) assignment_to_type -> variable_declarator VARIABLE COLON FLOAT . ASSIGN DECIMAL

    ASSIGN          shift and go to state 131


state 81

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET . integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET . STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET . BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET . FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (47) integer_options -> . INTEGER
    (48) integer_options -> . INT

    STRING          shift and go to state 133
    BOOLEAN         shift and go to state 134
    FLOAT           shift and go to state 135
    INTEGER         shift and go to state 136
    INT             shift and go to state 137

    integer_options                shift and go to state 132

state 82

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET . LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET . LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET . LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET . LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    LESSTHAN        shift and go to state 138


state 83

    (59) comparacion -> VARIABLE operadorComp . VARIABLE
    (63) comparacion -> VARIABLE operadorComp . DECIMAL
    (66) comparacion -> VARIABLE operadorComp . WSTRING
    (68) comparacion -> VARIABLE operadorComp . NUMBER

    VARIABLE        shift and go to state 139
    DECIMAL         shift and go to state 140
    WSTRING         shift and go to state 141
    NUMBER          shift and go to state 142


state 84

    (69) operadorComp -> GREATERTHAN .

    VARIABLE        reduce using rule 69 (operadorComp -> GREATERTHAN .)
    DECIMAL         reduce using rule 69 (operadorComp -> GREATERTHAN .)
    WSTRING         reduce using rule 69 (operadorComp -> GREATERTHAN .)
    NUMBER          reduce using rule 69 (operadorComp -> GREATERTHAN .)


state 85

    (70) operadorComp -> LESSTHAN .

    VARIABLE        reduce using rule 70 (operadorComp -> LESSTHAN .)
    DECIMAL         reduce using rule 70 (operadorComp -> LESSTHAN .)
    WSTRING         reduce using rule 70 (operadorComp -> LESSTHAN .)
    NUMBER          reduce using rule 70 (operadorComp -> LESSTHAN .)


state 86

    (71) operadorComp -> EQUALS .

    VARIABLE        reduce using rule 71 (operadorComp -> EQUALS .)
    DECIMAL         reduce using rule 71 (operadorComp -> EQUALS .)
    WSTRING         reduce using rule 71 (operadorComp -> EQUALS .)
    NUMBER          reduce using rule 71 (operadorComp -> EQUALS .)


state 87

    (72) operadorComp -> NOTEQUALS .

    VARIABLE        reduce using rule 72 (operadorComp -> NOTEQUALS .)
    DECIMAL         reduce using rule 72 (operadorComp -> NOTEQUALS .)
    WSTRING         reduce using rule 72 (operadorComp -> NOTEQUALS .)
    NUMBER          reduce using rule 72 (operadorComp -> NOTEQUALS .)


state 88

    (32) expression -> LPAREN expression . RPAREN
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    RPAREN          shift and go to state 143
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 89

    (84) boolean_expresion -> LPAREN boolean_option . logical_operator boolean_option RPAREN boolean_expresion
    (86) boolean_expresion -> boolean_option . logical_operator boolean_option
    (88) boolean_expresion -> boolean_option . logical_operator
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    AND             shift and go to state 50
    OR              shift and go to state 51

    logical_operator               shift and go to state 144

state 90

    (55) boolean_option -> TRUE .
    (75) type -> TRUE .

  ! reduce/reduce conflict for AND resolved using rule 55 (boolean_option -> TRUE .)
  ! reduce/reduce conflict for OR resolved using rule 55 (boolean_option -> TRUE .)
    AND             reduce using rule 55 (boolean_option -> TRUE .)
    OR              reduce using rule 55 (boolean_option -> TRUE .)
    RPAREN          reduce using rule 75 (type -> TRUE .)
    PLUS            reduce using rule 75 (type -> TRUE .)
    MINUS           reduce using rule 75 (type -> TRUE .)
    MULTIPLY        reduce using rule 75 (type -> TRUE .)
    DIVIDE          reduce using rule 75 (type -> TRUE .)
    GREATERTHAN     reduce using rule 75 (type -> TRUE .)
    LESSTHAN        reduce using rule 75 (type -> TRUE .)
    EQUALS          reduce using rule 75 (type -> TRUE .)
    NOTEQUALS       reduce using rule 75 (type -> TRUE .)
    COMMA           reduce using rule 75 (type -> TRUE .)
    COLON           reduce using rule 75 (type -> TRUE .)

  ! AND             [ reduce using rule 75 (type -> TRUE .) ]
  ! OR              [ reduce using rule 75 (type -> TRUE .) ]


state 91

    (56) boolean_option -> FALSE .
    (76) type -> FALSE .

  ! reduce/reduce conflict for AND resolved using rule 56 (boolean_option -> FALSE .)
  ! reduce/reduce conflict for OR resolved using rule 56 (boolean_option -> FALSE .)
    AND             reduce using rule 56 (boolean_option -> FALSE .)
    OR              reduce using rule 56 (boolean_option -> FALSE .)
    RPAREN          reduce using rule 76 (type -> FALSE .)
    PLUS            reduce using rule 76 (type -> FALSE .)
    MINUS           reduce using rule 76 (type -> FALSE .)
    MULTIPLY        reduce using rule 76 (type -> FALSE .)
    DIVIDE          reduce using rule 76 (type -> FALSE .)
    GREATERTHAN     reduce using rule 76 (type -> FALSE .)
    LESSTHAN        reduce using rule 76 (type -> FALSE .)
    EQUALS          reduce using rule 76 (type -> FALSE .)
    NOTEQUALS       reduce using rule 76 (type -> FALSE .)
    COMMA           reduce using rule 76 (type -> FALSE .)
    COLON           reduce using rule 76 (type -> FALSE .)

  ! AND             [ reduce using rule 76 (type -> FALSE .) ]
  ! OR              [ reduce using rule 76 (type -> FALSE .) ]


state 92

    (128) function_call -> VARIABLE LPAREN function_arguments RPAREN .

    LET             reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VAR             reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IF              reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PRINT           reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    WHILE           reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    REPEAT          reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    SWITCH          reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IMPORT          reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FOR             reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VARIABLE        reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    INIT            reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FUNC            reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    $end            reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RBRACES         reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DEFAULT         reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    CASE            reduce using rule 128 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)


state 93

    (129) function_arguments -> function_arguments COMMA . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 145
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 94

    (20) expression -> expression PLUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 146
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 95

    (21) expression -> expression MINUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 147
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 96

    (22) expression -> expression MULTIPLY . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 148
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 97

    (23) expression -> expression DIVIDE . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 149
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 98

    (24) expression -> expression GREATERTHAN . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 150
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 99

    (25) expression -> expression LESSTHAN . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 151
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 100

    (26) expression -> expression EQUALS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 152
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 101

    (27) expression -> expression NOTEQUALS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 153
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 102

    (28) expression -> expression AND . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 154
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 103

    (29) expression -> expression OR . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 155
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 104

    (30) expression -> expression COMMA . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 156
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 105

    (31) expression -> expression COLON . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 157
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 106

    (33) expression -> NOT expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 33 (expression -> NOT expression .)
    LET             reduce using rule 33 (expression -> NOT expression .)
    VAR             reduce using rule 33 (expression -> NOT expression .)
    IF              reduce using rule 33 (expression -> NOT expression .)
    PRINT           reduce using rule 33 (expression -> NOT expression .)
    WHILE           reduce using rule 33 (expression -> NOT expression .)
    REPEAT          reduce using rule 33 (expression -> NOT expression .)
    SWITCH          reduce using rule 33 (expression -> NOT expression .)
    IMPORT          reduce using rule 33 (expression -> NOT expression .)
    FOR             reduce using rule 33 (expression -> NOT expression .)
    VARIABLE        reduce using rule 33 (expression -> NOT expression .)
    INIT            reduce using rule 33 (expression -> NOT expression .)
    FUNC            reduce using rule 33 (expression -> NOT expression .)
    $end            reduce using rule 33 (expression -> NOT expression .)
    RBRACES         reduce using rule 33 (expression -> NOT expression .)
    DEFAULT         reduce using rule 33 (expression -> NOT expression .)
    CASE            reduce using rule 33 (expression -> NOT expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 33 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 33 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 33 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 33 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 33 (expression -> NOT expression .) ]
  ! NOTEQUALS       [ reduce using rule 33 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 33 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 33 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 33 (expression -> NOT expression .) ]
  ! COLON           [ reduce using rule 33 (expression -> NOT expression .) ]


state 107

    (85) boolean_expresion -> boolean_expresion LPAREN . boolean_option logical_operator boolean_option RPAREN
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 158

state 108

    (60) comparacion -> DECIMAL operadorComp . DECIMAL
    (64) comparacion -> DECIMAL operadorComp . VARIABLE

    DECIMAL         shift and go to state 159
    VARIABLE        shift and go to state 160


state 109

    (61) comparacion -> WSTRING operadorComp . WSTRING
    (65) comparacion -> WSTRING operadorComp . VARIABLE

    WSTRING         shift and go to state 161
    VARIABLE        shift and go to state 162


state 110

    (62) comparacion -> NUMBER operadorComp . NUMBER
    (67) comparacion -> NUMBER operadorComp . VARIABLE

    NUMBER          shift and go to state 163
    VARIABLE        shift and go to state 164


state 111

    (86) boolean_expresion -> boolean_option logical_operator . boolean_option
    (88) boolean_expresion -> boolean_option logical_operator .
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    LPAREN          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    PLUS            reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    MINUS           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    MULTIPLY        reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    DIVIDE          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    GREATERTHAN     reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    LESSTHAN        reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    EQUALS          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    NOTEQUALS       reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    AND             reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    OR              reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    COMMA           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    COLON           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    RPAREN          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    LET             reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    VAR             reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    IF              reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    PRINT           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    WHILE           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    REPEAT          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    SWITCH          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    IMPORT          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    FOR             reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    VARIABLE        reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    INIT            reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    FUNC            reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    $end            reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    RBRACES         reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    DEFAULT         reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    CASE            reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 165

state 112

    (87) boolean_expresion -> logical_operator boolean_option .

    LPAREN          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    PLUS            reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    MINUS           reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    MULTIPLY        reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    DIVIDE          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    GREATERTHAN     reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    LESSTHAN        reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    EQUALS          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    NOTEQUALS       reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    AND             reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    OR              reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    COMMA           reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    COLON           reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    RPAREN          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    LET             reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    VAR             reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    IF              reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    PRINT           reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    WHILE           reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    REPEAT          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    SWITCH          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    IMPORT          reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    FOR             reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    VARIABLE        reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    INIT            reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    FUNC            reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    $end            reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    RBRACES         reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    DEFAULT         reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)
    CASE            reduce using rule 87 (boolean_expresion -> logical_operator boolean_option .)


state 113

    (55) boolean_option -> TRUE .

    LPAREN          reduce using rule 55 (boolean_option -> TRUE .)
    PLUS            reduce using rule 55 (boolean_option -> TRUE .)
    MINUS           reduce using rule 55 (boolean_option -> TRUE .)
    MULTIPLY        reduce using rule 55 (boolean_option -> TRUE .)
    DIVIDE          reduce using rule 55 (boolean_option -> TRUE .)
    GREATERTHAN     reduce using rule 55 (boolean_option -> TRUE .)
    LESSTHAN        reduce using rule 55 (boolean_option -> TRUE .)
    EQUALS          reduce using rule 55 (boolean_option -> TRUE .)
    NOTEQUALS       reduce using rule 55 (boolean_option -> TRUE .)
    AND             reduce using rule 55 (boolean_option -> TRUE .)
    OR              reduce using rule 55 (boolean_option -> TRUE .)
    COMMA           reduce using rule 55 (boolean_option -> TRUE .)
    COLON           reduce using rule 55 (boolean_option -> TRUE .)
    RPAREN          reduce using rule 55 (boolean_option -> TRUE .)
    LET             reduce using rule 55 (boolean_option -> TRUE .)
    VAR             reduce using rule 55 (boolean_option -> TRUE .)
    IF              reduce using rule 55 (boolean_option -> TRUE .)
    PRINT           reduce using rule 55 (boolean_option -> TRUE .)
    WHILE           reduce using rule 55 (boolean_option -> TRUE .)
    REPEAT          reduce using rule 55 (boolean_option -> TRUE .)
    SWITCH          reduce using rule 55 (boolean_option -> TRUE .)
    IMPORT          reduce using rule 55 (boolean_option -> TRUE .)
    FOR             reduce using rule 55 (boolean_option -> TRUE .)
    VARIABLE        reduce using rule 55 (boolean_option -> TRUE .)
    INIT            reduce using rule 55 (boolean_option -> TRUE .)
    FUNC            reduce using rule 55 (boolean_option -> TRUE .)
    $end            reduce using rule 55 (boolean_option -> TRUE .)
    RBRACES         reduce using rule 55 (boolean_option -> TRUE .)
    DEFAULT         reduce using rule 55 (boolean_option -> TRUE .)
    CASE            reduce using rule 55 (boolean_option -> TRUE .)
    RSQUAREBRACKET  reduce using rule 55 (boolean_option -> TRUE .)


state 114

    (56) boolean_option -> FALSE .

    LPAREN          reduce using rule 56 (boolean_option -> FALSE .)
    PLUS            reduce using rule 56 (boolean_option -> FALSE .)
    MINUS           reduce using rule 56 (boolean_option -> FALSE .)
    MULTIPLY        reduce using rule 56 (boolean_option -> FALSE .)
    DIVIDE          reduce using rule 56 (boolean_option -> FALSE .)
    GREATERTHAN     reduce using rule 56 (boolean_option -> FALSE .)
    LESSTHAN        reduce using rule 56 (boolean_option -> FALSE .)
    EQUALS          reduce using rule 56 (boolean_option -> FALSE .)
    NOTEQUALS       reduce using rule 56 (boolean_option -> FALSE .)
    AND             reduce using rule 56 (boolean_option -> FALSE .)
    OR              reduce using rule 56 (boolean_option -> FALSE .)
    COMMA           reduce using rule 56 (boolean_option -> FALSE .)
    COLON           reduce using rule 56 (boolean_option -> FALSE .)
    RPAREN          reduce using rule 56 (boolean_option -> FALSE .)
    LET             reduce using rule 56 (boolean_option -> FALSE .)
    VAR             reduce using rule 56 (boolean_option -> FALSE .)
    IF              reduce using rule 56 (boolean_option -> FALSE .)
    PRINT           reduce using rule 56 (boolean_option -> FALSE .)
    WHILE           reduce using rule 56 (boolean_option -> FALSE .)
    REPEAT          reduce using rule 56 (boolean_option -> FALSE .)
    SWITCH          reduce using rule 56 (boolean_option -> FALSE .)
    IMPORT          reduce using rule 56 (boolean_option -> FALSE .)
    FOR             reduce using rule 56 (boolean_option -> FALSE .)
    VARIABLE        reduce using rule 56 (boolean_option -> FALSE .)
    INIT            reduce using rule 56 (boolean_option -> FALSE .)
    FUNC            reduce using rule 56 (boolean_option -> FALSE .)
    $end            reduce using rule 56 (boolean_option -> FALSE .)
    RBRACES         reduce using rule 56 (boolean_option -> FALSE .)
    DEFAULT         reduce using rule 56 (boolean_option -> FALSE .)
    CASE            reduce using rule 56 (boolean_option -> FALSE .)
    RSQUAREBRACKET  reduce using rule 56 (boolean_option -> FALSE .)


state 115

    (73) ifComp -> IF LPAREN comparacion RPAREN . LBRACES statements RBRACES
    (74) ifComp -> IF LPAREN comparacion RPAREN . LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LBRACES         shift and go to state 166


state 116

    (19) print_statement -> PRINT LPAREN expression RPAREN .

    LET             reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    REPEAT          reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    SWITCH          reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    IMPORT          reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    INIT            reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUNC            reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACES         reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    CASE            reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 19 (print_statement -> PRINT LPAREN expression RPAREN .)


state 117

    (94) while_statement -> WHILE LPAREN expression RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 167


state 118

    (95) while_statement -> REPEAT LBRACES statements RBRACES . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 168


state 119

    (96) switch_statement -> SWITCH VARIABLE LBRACES caso . RBRACES

    RBRACES         shift and go to state 169


state 120

    (97) caso -> CASE . expression COLON cuerpo_caso caso
    (98) caso -> CASE . expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 170
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 121

    (93) for_statement -> FOR VARIABLE IN VARIABLE . LBRACES statements RBRACES

    LBRACES         shift and go to state 171


state 122

    (92) for_statement -> FOR VARIABLE IN NUMBER . RANGE NUMBER LBRACES statements RBRACES

    RANGE           shift and go to state 172


state 123

    (127) function_init -> INIT LPAREN function_parameters RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 173


state 124

    (121) function_parameters -> function_parameters COMMA . VARIABLE COLON data_type

    VARIABLE        shift and go to state 174


state 125

    (122) function_parameters -> VARIABLE COLON . data_type
    (115) data_type -> . INTEGER
    (116) data_type -> . STRING
    (117) data_type -> . BOOLEAN
    (118) data_type -> . DOUBLE
    (119) data_type -> . FLOAT
    (120) data_type -> . INT

    INTEGER         shift and go to state 176
    STRING          shift and go to state 177
    BOOLEAN         shift and go to state 178
    DOUBLE          shift and go to state 179
    FLOAT           shift and go to state 180
    INT             shift and go to state 181

    data_type                      shift and go to state 175

state 126

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters . RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (121) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 182
    COMMA           shift and go to state 124


state 127

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty . RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RPAREN          shift and go to state 183


state 128

    (38) assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN . WSTRING

    WSTRING         shift and go to state 184


state 129

    (39) assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN . NUMBER

    NUMBER          shift and go to state 185


state 130

    (40) assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN . TRUE
    (41) assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN . FALSE

    TRUE            shift and go to state 186
    FALSE           shift and go to state 187


state 131

    (42) assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN . DECIMAL

    DECIMAL         shift and go to state 188


state 132

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options . RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 189


state 133

    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING . RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 190


state 134

    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN . RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 191


state 135

    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT . RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 192


state 136

    (47) integer_options -> INTEGER .

    RSQUAREBRACKET  reduce using rule 47 (integer_options -> INTEGER .)
    GREATERTHAN     reduce using rule 47 (integer_options -> INTEGER .)


state 137

    (48) integer_options -> INT .

    RSQUAREBRACKET  reduce using rule 48 (integer_options -> INT .)
    GREATERTHAN     reduce using rule 48 (integer_options -> INT .)


state 138

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN . integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN . STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN . BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN . FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (47) integer_options -> . INTEGER
    (48) integer_options -> . INT

    STRING          shift and go to state 194
    BOOLEAN         shift and go to state 195
    FLOAT           shift and go to state 196
    INTEGER         shift and go to state 136
    INT             shift and go to state 137

    integer_options                shift and go to state 193

state 139

    (59) comparacion -> VARIABLE operadorComp VARIABLE .

    PLUS            reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    MINUS           reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    MULTIPLY        reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    DIVIDE          reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    GREATERTHAN     reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    LESSTHAN        reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    EQUALS          reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    NOTEQUALS       reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    AND             reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    OR              reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    COMMA           reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    COLON           reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    RPAREN          reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    LET             reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    VAR             reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    IF              reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    PRINT           reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    WHILE           reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    REPEAT          reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    SWITCH          reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    IMPORT          reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    FOR             reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    VARIABLE        reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    INIT            reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    FUNC            reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    $end            reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    RBRACES         reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    DEFAULT         reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)
    CASE            reduce using rule 59 (comparacion -> VARIABLE operadorComp VARIABLE .)


state 140

    (63) comparacion -> VARIABLE operadorComp DECIMAL .

    PLUS            reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    MINUS           reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    MULTIPLY        reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    DIVIDE          reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    GREATERTHAN     reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    LESSTHAN        reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    EQUALS          reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    NOTEQUALS       reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    AND             reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    OR              reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    COMMA           reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    COLON           reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    RPAREN          reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    LET             reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    VAR             reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    IF              reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    PRINT           reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    WHILE           reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    REPEAT          reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    SWITCH          reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    IMPORT          reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    FOR             reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    VARIABLE        reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    INIT            reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    FUNC            reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    $end            reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    RBRACES         reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    DEFAULT         reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)
    CASE            reduce using rule 63 (comparacion -> VARIABLE operadorComp DECIMAL .)


state 141

    (66) comparacion -> VARIABLE operadorComp WSTRING .

    PLUS            reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    MINUS           reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    MULTIPLY        reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    DIVIDE          reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    GREATERTHAN     reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    LESSTHAN        reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    EQUALS          reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    NOTEQUALS       reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    AND             reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    OR              reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    COMMA           reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    COLON           reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    RPAREN          reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    LET             reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    VAR             reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    IF              reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    PRINT           reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    WHILE           reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    REPEAT          reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    SWITCH          reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    IMPORT          reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    FOR             reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    VARIABLE        reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    INIT            reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    FUNC            reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    $end            reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    RBRACES         reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    DEFAULT         reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)
    CASE            reduce using rule 66 (comparacion -> VARIABLE operadorComp WSTRING .)


state 142

    (68) comparacion -> VARIABLE operadorComp NUMBER .

    PLUS            reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    MINUS           reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    MULTIPLY        reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    DIVIDE          reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    GREATERTHAN     reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    LESSTHAN        reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    EQUALS          reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    NOTEQUALS       reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    AND             reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    OR              reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    COMMA           reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    COLON           reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    RPAREN          reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    LET             reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    VAR             reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    IF              reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    PRINT           reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    WHILE           reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    REPEAT          reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    SWITCH          reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    IMPORT          reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    FOR             reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    VARIABLE        reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    INIT            reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    FUNC            reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    $end            reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    RBRACES         reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    DEFAULT         reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)
    CASE            reduce using rule 68 (comparacion -> VARIABLE operadorComp NUMBER .)


state 143

    (32) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 32 (expression -> LPAREN expression RPAREN .)


state 144

    (84) boolean_expresion -> LPAREN boolean_option logical_operator . boolean_option RPAREN boolean_expresion
    (86) boolean_expresion -> boolean_option logical_operator . boolean_option
    (88) boolean_expresion -> boolean_option logical_operator .
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    LPAREN          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    RPAREN          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    PLUS            reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    MINUS           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    MULTIPLY        reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    DIVIDE          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    GREATERTHAN     reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    LESSTHAN        reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    EQUALS          reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    NOTEQUALS       reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    AND             reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    OR              reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    COMMA           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    COLON           reduce using rule 88 (boolean_expresion -> boolean_option logical_operator .)
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 197

state 145

    (129) function_arguments -> function_arguments COMMA expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 129 (function_arguments -> function_arguments COMMA expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! COMMA           [ reduce using rule 129 (function_arguments -> function_arguments COMMA expression .) ]


state 146

    (20) expression -> expression PLUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 20 (expression -> expression PLUS expression .)
    LET             reduce using rule 20 (expression -> expression PLUS expression .)
    VAR             reduce using rule 20 (expression -> expression PLUS expression .)
    IF              reduce using rule 20 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 20 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 20 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 20 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 20 (expression -> expression PLUS expression .)
    IMPORT          reduce using rule 20 (expression -> expression PLUS expression .)
    FOR             reduce using rule 20 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 20 (expression -> expression PLUS expression .)
    INIT            reduce using rule 20 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 20 (expression -> expression PLUS expression .)
    $end            reduce using rule 20 (expression -> expression PLUS expression .)
    RBRACES         reduce using rule 20 (expression -> expression PLUS expression .)
    DEFAULT         reduce using rule 20 (expression -> expression PLUS expression .)
    CASE            reduce using rule 20 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! COLON           [ reduce using rule 20 (expression -> expression PLUS expression .) ]


state 147

    (21) expression -> expression MINUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 21 (expression -> expression MINUS expression .)
    LET             reduce using rule 21 (expression -> expression MINUS expression .)
    VAR             reduce using rule 21 (expression -> expression MINUS expression .)
    IF              reduce using rule 21 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 21 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 21 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 21 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 21 (expression -> expression MINUS expression .)
    IMPORT          reduce using rule 21 (expression -> expression MINUS expression .)
    FOR             reduce using rule 21 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 21 (expression -> expression MINUS expression .)
    INIT            reduce using rule 21 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 21 (expression -> expression MINUS expression .)
    $end            reduce using rule 21 (expression -> expression MINUS expression .)
    RBRACES         reduce using rule 21 (expression -> expression MINUS expression .)
    DEFAULT         reduce using rule 21 (expression -> expression MINUS expression .)
    CASE            reduce using rule 21 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! COLON           [ reduce using rule 21 (expression -> expression MINUS expression .) ]


state 148

    (22) expression -> expression MULTIPLY expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 22 (expression -> expression MULTIPLY expression .)
    LET             reduce using rule 22 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 22 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 22 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 22 (expression -> expression MULTIPLY expression .)
    REPEAT          reduce using rule 22 (expression -> expression MULTIPLY expression .)
    SWITCH          reduce using rule 22 (expression -> expression MULTIPLY expression .)
    IMPORT          reduce using rule 22 (expression -> expression MULTIPLY expression .)
    FOR             reduce using rule 22 (expression -> expression MULTIPLY expression .)
    VARIABLE        reduce using rule 22 (expression -> expression MULTIPLY expression .)
    INIT            reduce using rule 22 (expression -> expression MULTIPLY expression .)
    FUNC            reduce using rule 22 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 22 (expression -> expression MULTIPLY expression .)
    RBRACES         reduce using rule 22 (expression -> expression MULTIPLY expression .)
    DEFAULT         reduce using rule 22 (expression -> expression MULTIPLY expression .)
    CASE            reduce using rule 22 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUALS       [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]
  ! COLON           [ reduce using rule 22 (expression -> expression MULTIPLY expression .) ]


state 149

    (23) expression -> expression DIVIDE expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 23 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 23 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 23 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 23 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 23 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 23 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 23 (expression -> expression DIVIDE expression .)
    SWITCH          reduce using rule 23 (expression -> expression DIVIDE expression .)
    IMPORT          reduce using rule 23 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 23 (expression -> expression DIVIDE expression .)
    VARIABLE        reduce using rule 23 (expression -> expression DIVIDE expression .)
    INIT            reduce using rule 23 (expression -> expression DIVIDE expression .)
    FUNC            reduce using rule 23 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 23 (expression -> expression DIVIDE expression .)
    RBRACES         reduce using rule 23 (expression -> expression DIVIDE expression .)
    DEFAULT         reduce using rule 23 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 23 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUALS       [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! COLON           [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]


state 150

    (24) expression -> expression GREATERTHAN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    LET             reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    VAR             reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    IF              reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    PRINT           reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    WHILE           reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    REPEAT          reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    SWITCH          reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    IMPORT          reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    FOR             reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    VARIABLE        reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    INIT            reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    FUNC            reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    $end            reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    RBRACES         reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    DEFAULT         reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    CASE            reduce using rule 24 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! EQUALS          [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]
  ! COLON           [ reduce using rule 24 (expression -> expression GREATERTHAN expression .) ]


state 151

    (25) expression -> expression LESSTHAN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 25 (expression -> expression LESSTHAN expression .)
    LET             reduce using rule 25 (expression -> expression LESSTHAN expression .)
    VAR             reduce using rule 25 (expression -> expression LESSTHAN expression .)
    IF              reduce using rule 25 (expression -> expression LESSTHAN expression .)
    PRINT           reduce using rule 25 (expression -> expression LESSTHAN expression .)
    WHILE           reduce using rule 25 (expression -> expression LESSTHAN expression .)
    REPEAT          reduce using rule 25 (expression -> expression LESSTHAN expression .)
    SWITCH          reduce using rule 25 (expression -> expression LESSTHAN expression .)
    IMPORT          reduce using rule 25 (expression -> expression LESSTHAN expression .)
    FOR             reduce using rule 25 (expression -> expression LESSTHAN expression .)
    VARIABLE        reduce using rule 25 (expression -> expression LESSTHAN expression .)
    INIT            reduce using rule 25 (expression -> expression LESSTHAN expression .)
    FUNC            reduce using rule 25 (expression -> expression LESSTHAN expression .)
    $end            reduce using rule 25 (expression -> expression LESSTHAN expression .)
    RBRACES         reduce using rule 25 (expression -> expression LESSTHAN expression .)
    DEFAULT         reduce using rule 25 (expression -> expression LESSTHAN expression .)
    CASE            reduce using rule 25 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! EQUALS          [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]
  ! COLON           [ reduce using rule 25 (expression -> expression LESSTHAN expression .) ]


state 152

    (26) expression -> expression EQUALS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 26 (expression -> expression EQUALS expression .)
    LET             reduce using rule 26 (expression -> expression EQUALS expression .)
    VAR             reduce using rule 26 (expression -> expression EQUALS expression .)
    IF              reduce using rule 26 (expression -> expression EQUALS expression .)
    PRINT           reduce using rule 26 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 26 (expression -> expression EQUALS expression .)
    REPEAT          reduce using rule 26 (expression -> expression EQUALS expression .)
    SWITCH          reduce using rule 26 (expression -> expression EQUALS expression .)
    IMPORT          reduce using rule 26 (expression -> expression EQUALS expression .)
    FOR             reduce using rule 26 (expression -> expression EQUALS expression .)
    VARIABLE        reduce using rule 26 (expression -> expression EQUALS expression .)
    INIT            reduce using rule 26 (expression -> expression EQUALS expression .)
    FUNC            reduce using rule 26 (expression -> expression EQUALS expression .)
    $end            reduce using rule 26 (expression -> expression EQUALS expression .)
    RBRACES         reduce using rule 26 (expression -> expression EQUALS expression .)
    DEFAULT         reduce using rule 26 (expression -> expression EQUALS expression .)
    CASE            reduce using rule 26 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! COMMA           [ reduce using rule 26 (expression -> expression EQUALS expression .) ]
  ! COLON           [ reduce using rule 26 (expression -> expression EQUALS expression .) ]


state 153

    (27) expression -> expression NOTEQUALS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    LET             reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    VAR             reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    IF              reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    PRINT           reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    WHILE           reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    REPEAT          reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    SWITCH          reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    IMPORT          reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    FOR             reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    VARIABLE        reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    INIT            reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    FUNC            reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    $end            reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    RBRACES         reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    DEFAULT         reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    CASE            reduce using rule 27 (expression -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! EQUALS          [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! COMMA           [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]
  ! COLON           [ reduce using rule 27 (expression -> expression NOTEQUALS expression .) ]


state 154

    (28) expression -> expression AND expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 28 (expression -> expression AND expression .)
    LET             reduce using rule 28 (expression -> expression AND expression .)
    VAR             reduce using rule 28 (expression -> expression AND expression .)
    IF              reduce using rule 28 (expression -> expression AND expression .)
    PRINT           reduce using rule 28 (expression -> expression AND expression .)
    WHILE           reduce using rule 28 (expression -> expression AND expression .)
    REPEAT          reduce using rule 28 (expression -> expression AND expression .)
    SWITCH          reduce using rule 28 (expression -> expression AND expression .)
    IMPORT          reduce using rule 28 (expression -> expression AND expression .)
    FOR             reduce using rule 28 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 28 (expression -> expression AND expression .)
    INIT            reduce using rule 28 (expression -> expression AND expression .)
    FUNC            reduce using rule 28 (expression -> expression AND expression .)
    $end            reduce using rule 28 (expression -> expression AND expression .)
    RBRACES         reduce using rule 28 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 28 (expression -> expression AND expression .)
    CASE            reduce using rule 28 (expression -> expression AND expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! NOTEQUALS       [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 28 (expression -> expression AND expression .) ]
  ! COLON           [ reduce using rule 28 (expression -> expression AND expression .) ]


state 155

    (29) expression -> expression OR expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 29 (expression -> expression OR expression .)
    LET             reduce using rule 29 (expression -> expression OR expression .)
    VAR             reduce using rule 29 (expression -> expression OR expression .)
    IF              reduce using rule 29 (expression -> expression OR expression .)
    PRINT           reduce using rule 29 (expression -> expression OR expression .)
    WHILE           reduce using rule 29 (expression -> expression OR expression .)
    REPEAT          reduce using rule 29 (expression -> expression OR expression .)
    SWITCH          reduce using rule 29 (expression -> expression OR expression .)
    IMPORT          reduce using rule 29 (expression -> expression OR expression .)
    FOR             reduce using rule 29 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 29 (expression -> expression OR expression .)
    INIT            reduce using rule 29 (expression -> expression OR expression .)
    FUNC            reduce using rule 29 (expression -> expression OR expression .)
    $end            reduce using rule 29 (expression -> expression OR expression .)
    RBRACES         reduce using rule 29 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 29 (expression -> expression OR expression .)
    CASE            reduce using rule 29 (expression -> expression OR expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! NOTEQUALS       [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! COLON           [ reduce using rule 29 (expression -> expression OR expression .) ]


state 156

    (30) expression -> expression COMMA expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 30 (expression -> expression COMMA expression .)
    LET             reduce using rule 30 (expression -> expression COMMA expression .)
    VAR             reduce using rule 30 (expression -> expression COMMA expression .)
    IF              reduce using rule 30 (expression -> expression COMMA expression .)
    PRINT           reduce using rule 30 (expression -> expression COMMA expression .)
    WHILE           reduce using rule 30 (expression -> expression COMMA expression .)
    REPEAT          reduce using rule 30 (expression -> expression COMMA expression .)
    SWITCH          reduce using rule 30 (expression -> expression COMMA expression .)
    IMPORT          reduce using rule 30 (expression -> expression COMMA expression .)
    FOR             reduce using rule 30 (expression -> expression COMMA expression .)
    VARIABLE        reduce using rule 30 (expression -> expression COMMA expression .)
    INIT            reduce using rule 30 (expression -> expression COMMA expression .)
    FUNC            reduce using rule 30 (expression -> expression COMMA expression .)
    $end            reduce using rule 30 (expression -> expression COMMA expression .)
    RBRACES         reduce using rule 30 (expression -> expression COMMA expression .)
    DEFAULT         reduce using rule 30 (expression -> expression COMMA expression .)
    CASE            reduce using rule 30 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! NOTEQUALS       [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 30 (expression -> expression COMMA expression .) ]
  ! COLON           [ reduce using rule 30 (expression -> expression COMMA expression .) ]


state 157

    (31) expression -> expression COLON expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    RPAREN          reduce using rule 31 (expression -> expression COLON expression .)
    LET             reduce using rule 31 (expression -> expression COLON expression .)
    VAR             reduce using rule 31 (expression -> expression COLON expression .)
    IF              reduce using rule 31 (expression -> expression COLON expression .)
    PRINT           reduce using rule 31 (expression -> expression COLON expression .)
    WHILE           reduce using rule 31 (expression -> expression COLON expression .)
    REPEAT          reduce using rule 31 (expression -> expression COLON expression .)
    SWITCH          reduce using rule 31 (expression -> expression COLON expression .)
    IMPORT          reduce using rule 31 (expression -> expression COLON expression .)
    FOR             reduce using rule 31 (expression -> expression COLON expression .)
    VARIABLE        reduce using rule 31 (expression -> expression COLON expression .)
    INIT            reduce using rule 31 (expression -> expression COLON expression .)
    FUNC            reduce using rule 31 (expression -> expression COLON expression .)
    $end            reduce using rule 31 (expression -> expression COLON expression .)
    RBRACES         reduce using rule 31 (expression -> expression COLON expression .)
    DEFAULT         reduce using rule 31 (expression -> expression COLON expression .)
    CASE            reduce using rule 31 (expression -> expression COLON expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! PLUS            [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! GREATERTHAN     [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! LESSTHAN        [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! COMMA           [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! COLON           [ reduce using rule 31 (expression -> expression COLON expression .) ]


state 158

    (85) boolean_expresion -> boolean_expresion LPAREN boolean_option . logical_operator boolean_option RPAREN
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    AND             shift and go to state 50
    OR              shift and go to state 51

    logical_operator               shift and go to state 198

state 159

    (60) comparacion -> DECIMAL operadorComp DECIMAL .

    PLUS            reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    MINUS           reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    MULTIPLY        reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    DIVIDE          reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    GREATERTHAN     reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    LESSTHAN        reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    EQUALS          reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    NOTEQUALS       reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    AND             reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    OR              reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    COMMA           reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    COLON           reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    RPAREN          reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    LET             reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    VAR             reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    IF              reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    PRINT           reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    WHILE           reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    REPEAT          reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    SWITCH          reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    IMPORT          reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    FOR             reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    VARIABLE        reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    INIT            reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    FUNC            reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    $end            reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    RBRACES         reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    DEFAULT         reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)
    CASE            reduce using rule 60 (comparacion -> DECIMAL operadorComp DECIMAL .)


state 160

    (64) comparacion -> DECIMAL operadorComp VARIABLE .

    PLUS            reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    MINUS           reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    MULTIPLY        reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    DIVIDE          reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    GREATERTHAN     reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    LESSTHAN        reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    EQUALS          reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    NOTEQUALS       reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    AND             reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    OR              reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    COMMA           reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    COLON           reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    RPAREN          reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    LET             reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    VAR             reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    IF              reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    PRINT           reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    WHILE           reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    REPEAT          reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    SWITCH          reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    IMPORT          reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    FOR             reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    VARIABLE        reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    INIT            reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    FUNC            reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    $end            reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    RBRACES         reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    DEFAULT         reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)
    CASE            reduce using rule 64 (comparacion -> DECIMAL operadorComp VARIABLE .)


state 161

    (61) comparacion -> WSTRING operadorComp WSTRING .

    PLUS            reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    MINUS           reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    MULTIPLY        reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    DIVIDE          reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    GREATERTHAN     reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    LESSTHAN        reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    EQUALS          reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    NOTEQUALS       reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    AND             reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    OR              reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    COMMA           reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    COLON           reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    RPAREN          reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    LET             reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    VAR             reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    IF              reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    PRINT           reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    WHILE           reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    REPEAT          reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    SWITCH          reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    IMPORT          reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    FOR             reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    VARIABLE        reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    INIT            reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    FUNC            reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    $end            reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    RBRACES         reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    DEFAULT         reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)
    CASE            reduce using rule 61 (comparacion -> WSTRING operadorComp WSTRING .)


state 162

    (65) comparacion -> WSTRING operadorComp VARIABLE .

    PLUS            reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    MINUS           reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    MULTIPLY        reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    DIVIDE          reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    GREATERTHAN     reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    LESSTHAN        reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    EQUALS          reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    NOTEQUALS       reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    AND             reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    OR              reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    COMMA           reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    COLON           reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    RPAREN          reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    LET             reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    VAR             reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    IF              reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    PRINT           reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    WHILE           reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    REPEAT          reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    SWITCH          reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    IMPORT          reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    FOR             reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    VARIABLE        reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    INIT            reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    FUNC            reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    $end            reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    RBRACES         reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    DEFAULT         reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)
    CASE            reduce using rule 65 (comparacion -> WSTRING operadorComp VARIABLE .)


state 163

    (62) comparacion -> NUMBER operadorComp NUMBER .

    PLUS            reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    MINUS           reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    MULTIPLY        reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    DIVIDE          reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    GREATERTHAN     reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    LESSTHAN        reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    EQUALS          reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    NOTEQUALS       reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    AND             reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    OR              reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    COMMA           reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    COLON           reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    RPAREN          reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    LET             reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    VAR             reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    IF              reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    PRINT           reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    WHILE           reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    REPEAT          reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    SWITCH          reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    IMPORT          reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    FOR             reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    VARIABLE        reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    INIT            reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    FUNC            reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    $end            reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    RBRACES         reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    DEFAULT         reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)
    CASE            reduce using rule 62 (comparacion -> NUMBER operadorComp NUMBER .)


state 164

    (67) comparacion -> NUMBER operadorComp VARIABLE .

    PLUS            reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    MINUS           reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    MULTIPLY        reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    DIVIDE          reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    GREATERTHAN     reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    LESSTHAN        reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    EQUALS          reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    NOTEQUALS       reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    AND             reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    OR              reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    COMMA           reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    COLON           reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    RPAREN          reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    LET             reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    VAR             reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    IF              reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    PRINT           reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    WHILE           reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    REPEAT          reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    SWITCH          reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    IMPORT          reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    FOR             reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    VARIABLE        reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    INIT            reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    FUNC            reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    $end            reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    RBRACES         reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    DEFAULT         reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)
    CASE            reduce using rule 67 (comparacion -> NUMBER operadorComp VARIABLE .)


state 165

    (86) boolean_expresion -> boolean_option logical_operator boolean_option .

    LPAREN          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    PLUS            reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    MINUS           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    MULTIPLY        reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    DIVIDE          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    GREATERTHAN     reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    LESSTHAN        reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    EQUALS          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    NOTEQUALS       reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    AND             reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    OR              reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    COMMA           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    COLON           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    RPAREN          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    LET             reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    VAR             reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    IF              reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    PRINT           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    WHILE           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    REPEAT          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    SWITCH          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    IMPORT          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    FOR             reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    VARIABLE        reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    INIT            reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    FUNC            reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    $end            reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    RBRACES         reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    DEFAULT         reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    CASE            reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)


state 166

    (73) ifComp -> IF LPAREN comparacion RPAREN LBRACES . statements RBRACES
    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES . statements RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 199
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 167

    (94) while_statement -> WHILE LPAREN expression RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 200
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 168

    (95) while_statement -> REPEAT LBRACES statements RBRACES WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 201


state 169

    (96) switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .

    LET             reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    VAR             reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IF              reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    PRINT           reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    WHILE           reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    REPEAT          reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    SWITCH          reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IMPORT          reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FOR             reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    VARIABLE        reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    INIT            reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FUNC            reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    $end            reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RBRACES         reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    DEFAULT         reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    CASE            reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RETURN          reduce using rule 96 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)


state 170

    (97) caso -> CASE expression . COLON cuerpo_caso caso
    (98) caso -> CASE expression . COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    COLON           shift and go to state 202
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104


state 171

    (93) for_statement -> FOR VARIABLE IN VARIABLE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 203
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 172

    (92) for_statement -> FOR VARIABLE IN NUMBER RANGE . NUMBER LBRACES statements RBRACES

    NUMBER          shift and go to state 204


state 173

    (127) function_init -> INIT LPAREN function_parameters RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 205
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 174

    (121) function_parameters -> function_parameters COMMA VARIABLE . COLON data_type

    COLON           shift and go to state 206


state 175

    (122) function_parameters -> VARIABLE COLON data_type .

    RPAREN          reduce using rule 122 (function_parameters -> VARIABLE COLON data_type .)
    COMMA           reduce using rule 122 (function_parameters -> VARIABLE COLON data_type .)


state 176

    (115) data_type -> INTEGER .

    RPAREN          reduce using rule 115 (data_type -> INTEGER .)
    COMMA           reduce using rule 115 (data_type -> INTEGER .)
    LBRACES         reduce using rule 115 (data_type -> INTEGER .)


state 177

    (116) data_type -> STRING .

    RPAREN          reduce using rule 116 (data_type -> STRING .)
    COMMA           reduce using rule 116 (data_type -> STRING .)
    LBRACES         reduce using rule 116 (data_type -> STRING .)


state 178

    (117) data_type -> BOOLEAN .

    RPAREN          reduce using rule 117 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 117 (data_type -> BOOLEAN .)
    LBRACES         reduce using rule 117 (data_type -> BOOLEAN .)


state 179

    (118) data_type -> DOUBLE .

    RPAREN          reduce using rule 118 (data_type -> DOUBLE .)
    COMMA           reduce using rule 118 (data_type -> DOUBLE .)
    LBRACES         reduce using rule 118 (data_type -> DOUBLE .)


state 180

    (119) data_type -> FLOAT .

    RPAREN          reduce using rule 119 (data_type -> FLOAT .)
    COMMA           reduce using rule 119 (data_type -> FLOAT .)
    LBRACES         reduce using rule 119 (data_type -> FLOAT .)


state 181

    (120) data_type -> INT .

    RPAREN          reduce using rule 120 (data_type -> INT .)
    COMMA           reduce using rule 120 (data_type -> INT .)
    LBRACES         reduce using rule 120 (data_type -> INT .)


state 182

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN . function_return_type LBRACES functionstatements return_statement RBRACES
    (123) function_return_type -> . ARROW data_type
    (124) function_return_type -> . ARROW LPAREN function_parameters RPAREN
    (125) function_return_type -> . empty
    (132) empty -> .

    ARROW           shift and go to state 208
    LBRACES         reduce using rule 132 (empty -> .)

    function_return_type           shift and go to state 207
    empty                          shift and go to state 209

state 183

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN . function_return_type LBRACES functionstatements return_statement RBRACES
    (123) function_return_type -> . ARROW data_type
    (124) function_return_type -> . ARROW LPAREN function_parameters RPAREN
    (125) function_return_type -> . empty
    (132) empty -> .

    ARROW           shift and go to state 208
    LBRACES         reduce using rule 132 (empty -> .)

    empty                          shift and go to state 209
    function_return_type           shift and go to state 210

state 184

    (38) assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .

    LET             reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    VAR             reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    IF              reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    PRINT           reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    WHILE           reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    REPEAT          reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    SWITCH          reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    IMPORT          reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    FOR             reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    VARIABLE        reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    INIT            reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    FUNC            reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    $end            reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    RBRACES         reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    DEFAULT         reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    CASE            reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)
    RETURN          reduce using rule 38 (assignment_to_type -> variable_declarator VARIABLE COLON STRING ASSIGN WSTRING .)


state 185

    (39) assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .

    LET             reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    VAR             reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    IF              reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    PRINT           reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    WHILE           reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    REPEAT          reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    SWITCH          reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    IMPORT          reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    FOR             reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    VARIABLE        reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    INIT            reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    FUNC            reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    $end            reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    RBRACES         reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    DEFAULT         reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    CASE            reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)
    RETURN          reduce using rule 39 (assignment_to_type -> variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER .)


state 186

    (40) assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .

    LET             reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    VAR             reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    IF              reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    PRINT           reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    WHILE           reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    REPEAT          reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    SWITCH          reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    IMPORT          reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    FOR             reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    VARIABLE        reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    INIT            reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    FUNC            reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    $end            reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    RBRACES         reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    DEFAULT         reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    CASE            reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)
    RETURN          reduce using rule 40 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE .)


state 187

    (41) assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .

    LET             reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    VAR             reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    IF              reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    PRINT           reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    WHILE           reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    REPEAT          reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    SWITCH          reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    IMPORT          reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    FOR             reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    VARIABLE        reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    INIT            reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    FUNC            reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    $end            reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    RBRACES         reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    DEFAULT         reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    CASE            reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)
    RETURN          reduce using rule 41 (assignment_to_type -> variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE .)


state 188

    (42) assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .

    LET             reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    VAR             reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    IF              reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    PRINT           reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    WHILE           reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    REPEAT          reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    SWITCH          reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    IMPORT          reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    FOR             reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    VARIABLE        reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    INIT            reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    FUNC            reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    $end            reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    RBRACES         reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    DEFAULT         reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    CASE            reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)
    RETURN          reduce using rule 42 (assignment_to_type -> variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL .)


state 189

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET . ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET

    ASSIGN          shift and go to state 211


state 190

    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET . ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET

    ASSIGN          shift and go to state 212


state 191

    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET . ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET

    ASSIGN          shift and go to state 213


state 192

    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET . ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    ASSIGN          shift and go to state 214


state 193

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options . GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET

    GREATERTHAN     shift and go to state 215


state 194

    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING . GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET

    GREATERTHAN     shift and go to state 216


state 195

    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN . GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET

    GREATERTHAN     shift and go to state 217


state 196

    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT . GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    GREATERTHAN     shift and go to state 218


state 197

    (84) boolean_expresion -> LPAREN boolean_option logical_operator boolean_option . RPAREN boolean_expresion
    (86) boolean_expresion -> boolean_option logical_operator boolean_option .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 219
    LPAREN          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    PLUS            reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    MINUS           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    MULTIPLY        reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    DIVIDE          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    GREATERTHAN     reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    LESSTHAN        reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    EQUALS          reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    NOTEQUALS       reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    AND             reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    OR              reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    COMMA           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)
    COLON           reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .)

  ! RPAREN          [ reduce using rule 86 (boolean_expresion -> boolean_option logical_operator boolean_option .) ]


state 198

    (85) boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator . boolean_option RPAREN
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 220

state 199

    (73) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements . RBRACES
    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements . RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 221
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 200

    (94) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 222
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 201

    (95) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN . expression RPAREN
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 223
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 202

    (97) caso -> CASE expression COLON . cuerpo_caso caso
    (98) caso -> CASE expression COLON . cuerpo_caso DEFAULT COLON cuerpo_caso
    (31) expression -> expression COLON . expression
    (99) cuerpo_caso -> . expression
    (100) cuerpo_caso -> . statement
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 227
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    INIT            shift and go to state 29
    AND             shift and go to state 50
    OR              shift and go to state 51
    FUNC            shift and go to state 30

    expression                     shift and go to state 224
    cuerpo_caso                    shift and go to state 225
    statement                      shift and go to state 226
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 203

    (93) for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 228
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 204

    (92) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER . LBRACES statements RBRACES

    LBRACES         shift and go to state 229


state 205

    (127) function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 230
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 206

    (121) function_parameters -> function_parameters COMMA VARIABLE COLON . data_type
    (115) data_type -> . INTEGER
    (116) data_type -> . STRING
    (117) data_type -> . BOOLEAN
    (118) data_type -> . DOUBLE
    (119) data_type -> . FLOAT
    (120) data_type -> . INT

    INTEGER         shift and go to state 176
    STRING          shift and go to state 177
    BOOLEAN         shift and go to state 178
    DOUBLE          shift and go to state 179
    FLOAT           shift and go to state 180
    INT             shift and go to state 181

    data_type                      shift and go to state 231

state 207

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type . LBRACES functionstatements return_statement RBRACES

    LBRACES         shift and go to state 232


state 208

    (123) function_return_type -> ARROW . data_type
    (124) function_return_type -> ARROW . LPAREN function_parameters RPAREN
    (115) data_type -> . INTEGER
    (116) data_type -> . STRING
    (117) data_type -> . BOOLEAN
    (118) data_type -> . DOUBLE
    (119) data_type -> . FLOAT
    (120) data_type -> . INT

    LPAREN          shift and go to state 234
    INTEGER         shift and go to state 176
    STRING          shift and go to state 177
    BOOLEAN         shift and go to state 178
    DOUBLE          shift and go to state 179
    FLOAT           shift and go to state 180
    INT             shift and go to state 181

    data_type                      shift and go to state 233

state 209

    (125) function_return_type -> empty .

    LBRACES         reduce using rule 125 (function_return_type -> empty .)


state 210

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type . LBRACES functionstatements return_statement RBRACES

    LBRACES         shift and go to state 235


state 211

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN . LSQUAREBRACKET mul_integuer RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 236


state 212

    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN . LSQUAREBRACKET mul_string RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 237


state 213

    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN . LSQUAREBRACKET mul_booleano RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 238


state 214

    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN . LSQUAREBRACKET mul_float RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 239


state 215

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN . ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET

    ASSIGN          shift and go to state 240


state 216

    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN . ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET

    ASSIGN          shift and go to state 241


state 217

    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN . ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET

    ASSIGN          shift and go to state 242


state 218

    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN . ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET

    ASSIGN          shift and go to state 243


state 219

    (84) boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN . boolean_expresion
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 244
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    AND             shift and go to state 50
    OR              shift and go to state 51

    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62
    boolean_expresion              shift and go to state 245

state 220

    (85) boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option . RPAREN

    RPAREN          shift and go to state 246


state 221

    (73) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .
    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES . ELSE LBRACES statements RBRACES

    LET             reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    VARIABLE        reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    RETURN          reduce using rule 73 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES .)
    ELSE            shift and go to state 247


state 222

    (94) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .

    LET             reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    VARIABLE        reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RETURN          reduce using rule 94 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)


state 223

    (95) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression . RPAREN
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    RPAREN          shift and go to state 248
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 224

    (31) expression -> expression COLON expression .
    (99) cuerpo_caso -> expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    DEFAULT         reduce using rule 99 (cuerpo_caso -> expression .)
    CASE            reduce using rule 99 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105

  ! COLON           [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! PLUS            [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! GREATERTHAN     [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! LESSTHAN        [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression COLON expression .) ]
  ! COMMA           [ reduce using rule 31 (expression -> expression COLON expression .) ]


state 225

    (97) caso -> CASE expression COLON cuerpo_caso . caso
    (98) caso -> CASE expression COLON cuerpo_caso . DEFAULT COLON cuerpo_caso
    (97) caso -> . CASE expression COLON cuerpo_caso caso
    (98) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    DEFAULT         shift and go to state 250
    CASE            shift and go to state 120

    caso                           shift and go to state 249

state 226

    (100) cuerpo_caso -> statement .

    DEFAULT         reduce using rule 100 (cuerpo_caso -> statement .)
    CASE            reduce using rule 100 (cuerpo_caso -> statement .)
    RBRACES         reduce using rule 100 (cuerpo_caso -> statement .)


state 227

    (34) expression -> VARIABLE .
    (59) comparacion -> VARIABLE . operadorComp VARIABLE
    (63) comparacion -> VARIABLE . operadorComp DECIMAL
    (66) comparacion -> VARIABLE . operadorComp WSTRING
    (68) comparacion -> VARIABLE . operadorComp NUMBER
    (128) function_call -> VARIABLE . LPAREN function_arguments RPAREN
    (69) operadorComp -> . GREATERTHAN
    (70) operadorComp -> . LESSTHAN
    (71) operadorComp -> . EQUALS
    (72) operadorComp -> . NOTEQUALS

  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    PLUS            reduce using rule 34 (expression -> VARIABLE .)
    MINUS           reduce using rule 34 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 34 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 34 (expression -> VARIABLE .)
    AND             reduce using rule 34 (expression -> VARIABLE .)
    OR              reduce using rule 34 (expression -> VARIABLE .)
    COMMA           reduce using rule 34 (expression -> VARIABLE .)
    COLON           reduce using rule 34 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 34 (expression -> VARIABLE .)
    CASE            reduce using rule 34 (expression -> VARIABLE .)
    RBRACES         reduce using rule 34 (expression -> VARIABLE .)
    LPAREN          shift and go to state 33
    GREATERTHAN     shift and go to state 84
    LESSTHAN        shift and go to state 85
    EQUALS          shift and go to state 86
    NOTEQUALS       shift and go to state 87

  ! GREATERTHAN     [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! NOTEQUALS       [ reduce using rule 34 (expression -> VARIABLE .) ]

    operadorComp                   shift and go to state 83

state 228

    (93) for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .

    LET             reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    VAR             reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    IF              reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    PRINT           reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    WHILE           reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    REPEAT          reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    IMPORT          reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    FOR             reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    VARIABLE        reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    INIT            reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    FUNC            reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    $end            reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    CASE            reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    RETURN          reduce using rule 93 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)


state 229

    (92) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 251
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 230

    (127) function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .

    LET             reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    VARIABLE        reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 127 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)


state 231

    (121) function_parameters -> function_parameters COMMA VARIABLE COLON data_type .

    RPAREN          reduce using rule 121 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)
    COMMA           reduce using rule 121 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)


state 232

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES . functionstatements return_statement RBRACES
    (101) functionstatements -> . functionstatements functionbody
    (102) functionstatements -> . functionbody
    (103) functionbody -> . assignment_to_type
    (104) functionbody -> . print_statement
    (105) functionbody -> . ifComp
    (106) functionbody -> . while_statement
    (107) functionbody -> . switch_statement
    (108) functionbody -> . import_statement
    (109) functionbody -> . for_statement
    (110) functionbody -> . empty
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (132) empty -> .
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    PRINT           shift and go to state 21
    IF              shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    RETURN          reduce using rule 132 (empty -> .)
    LET             shift and go to state 18
    VAR             shift and go to state 19

  ! PRINT           [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! REPEAT          [ reduce using rule 132 (empty -> .) ]
  ! SWITCH          [ reduce using rule 132 (empty -> .) ]
  ! IMPORT          [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! LET             [ reduce using rule 132 (empty -> .) ]
  ! VAR             [ reduce using rule 132 (empty -> .) ]

    functionstatements             shift and go to state 252
    functionbody                   shift and go to state 253
    assignment_to_type             shift and go to state 254
    print_statement                shift and go to state 255
    ifComp                         shift and go to state 256
    while_statement                shift and go to state 257
    switch_statement               shift and go to state 258
    import_statement               shift and go to state 259
    for_statement                  shift and go to state 260
    empty                          shift and go to state 261
    variable_declarator            shift and go to state 262

state 233

    (123) function_return_type -> ARROW data_type .

    LBRACES         reduce using rule 123 (function_return_type -> ARROW data_type .)


state 234

    (124) function_return_type -> ARROW LPAREN . function_parameters RPAREN
    (121) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (122) function_parameters -> . VARIABLE COLON data_type

    VARIABLE        shift and go to state 74

    function_parameters            shift and go to state 263

state 235

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES . functionstatements return_statement RBRACES
    (101) functionstatements -> . functionstatements functionbody
    (102) functionstatements -> . functionbody
    (103) functionbody -> . assignment_to_type
    (104) functionbody -> . print_statement
    (105) functionbody -> . ifComp
    (106) functionbody -> . while_statement
    (107) functionbody -> . switch_statement
    (108) functionbody -> . import_statement
    (109) functionbody -> . for_statement
    (110) functionbody -> . empty
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (132) empty -> .
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    PRINT           shift and go to state 21
    IF              shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    RETURN          reduce using rule 132 (empty -> .)
    LET             shift and go to state 18
    VAR             shift and go to state 19

  ! PRINT           [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! REPEAT          [ reduce using rule 132 (empty -> .) ]
  ! SWITCH          [ reduce using rule 132 (empty -> .) ]
  ! IMPORT          [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! LET             [ reduce using rule 132 (empty -> .) ]
  ! VAR             [ reduce using rule 132 (empty -> .) ]

    empty                          shift and go to state 261
    functionstatements             shift and go to state 264
    functionbody                   shift and go to state 253
    assignment_to_type             shift and go to state 254
    print_statement                shift and go to state 255
    ifComp                         shift and go to state 256
    while_statement                shift and go to state 257
    switch_statement               shift and go to state 258
    import_statement               shift and go to state 259
    for_statement                  shift and go to state 260
    variable_declarator            shift and go to state 262

state 236

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET . mul_integuer RSQUAREBRACKET
    (49) mul_integuer -> . mul_integuer COMMA NUMBER
    (50) mul_integuer -> . NUMBER

    NUMBER          shift and go to state 266

    mul_integuer                   shift and go to state 265

state 237

    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET . mul_string RSQUAREBRACKET
    (51) mul_string -> . mul_string COMMA WSTRING
    (52) mul_string -> . WSTRING

    WSTRING         shift and go to state 268

    mul_string                     shift and go to state 267

state 238

    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET . mul_booleano RSQUAREBRACKET
    (53) mul_booleano -> . mul_booleano COMMA boolean_option
    (54) mul_booleano -> . boolean_option
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    mul_booleano                   shift and go to state 269
    boolean_option                 shift and go to state 270

state 239

    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET . mul_float RSQUAREBRACKET
    (57) mul_float -> . mul_float COMMA DECIMAL
    (58) mul_float -> . DECIMAL

    DECIMAL         shift and go to state 272

    mul_float                      shift and go to state 271

state 240

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN . LSQUAREBRACKET mul_integuer RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 273


state 241

    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN . LSQUAREBRACKET mul_string RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 274


state 242

    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN . LSQUAREBRACKET mul_booleano RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 275


state 243

    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN . LSQUAREBRACKET mul_float RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 276


state 244

    (84) boolean_expresion -> LPAREN . boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 277

state 245

    (84) boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .
    (85) boolean_expresion -> boolean_expresion . LPAREN boolean_option logical_operator boolean_option RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    PLUS            reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    MINUS           reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    MULTIPLY        reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    DIVIDE          reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    GREATERTHAN     reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    LESSTHAN        reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    EQUALS          reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    NOTEQUALS       reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    AND             reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    OR              reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    COMMA           reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    COLON           reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    RPAREN          reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    LET             reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    VAR             reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    IF              reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    PRINT           reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    WHILE           reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    REPEAT          reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    SWITCH          reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    IMPORT          reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    FOR             reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    VARIABLE        reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    INIT            reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    FUNC            reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    $end            reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    RBRACES         reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    DEFAULT         reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    CASE            reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .)
    LPAREN          shift and go to state 107

  ! LPAREN          [ reduce using rule 84 (boolean_expresion -> LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion .) ]


state 246

    (85) boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .

    LPAREN          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    PLUS            reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    MINUS           reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    MULTIPLY        reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    DIVIDE          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    GREATERTHAN     reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    LESSTHAN        reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    EQUALS          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    NOTEQUALS       reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    AND             reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    OR              reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    COMMA           reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    COLON           reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    RPAREN          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    LET             reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    VAR             reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    IF              reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    PRINT           reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    WHILE           reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    REPEAT          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    SWITCH          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    IMPORT          reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    FOR             reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    VARIABLE        reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    INIT            reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    FUNC            reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    $end            reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    RBRACES         reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    DEFAULT         reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)
    CASE            reduce using rule 85 (boolean_expresion -> boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN .)


state 247

    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE . LBRACES statements RBRACES

    LBRACES         shift and go to state 278


state 248

    (95) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .

    LET             reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    PRINT           reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    REPEAT          reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    FUNC            reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    RBRACES         reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 95 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)


state 249

    (97) caso -> CASE expression COLON cuerpo_caso caso .

    RBRACES         reduce using rule 97 (caso -> CASE expression COLON cuerpo_caso caso .)


state 250

    (98) caso -> CASE expression COLON cuerpo_caso DEFAULT . COLON cuerpo_caso

    COLON           shift and go to state 279


state 251

    (92) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 280
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 252

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements . return_statement RBRACES
    (101) functionstatements -> functionstatements . functionbody
    (126) return_statement -> . RETURN expression
    (103) functionbody -> . assignment_to_type
    (104) functionbody -> . print_statement
    (105) functionbody -> . ifComp
    (106) functionbody -> . while_statement
    (107) functionbody -> . switch_statement
    (108) functionbody -> . import_statement
    (109) functionbody -> . for_statement
    (110) functionbody -> . empty
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (132) empty -> .
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          shift and go to state 283
    PRINT           shift and go to state 21
    IF              shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 18
    VAR             shift and go to state 19

  ! RETURN          [ reduce using rule 132 (empty -> .) ]
  ! PRINT           [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! REPEAT          [ reduce using rule 132 (empty -> .) ]
  ! SWITCH          [ reduce using rule 132 (empty -> .) ]
  ! IMPORT          [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! LET             [ reduce using rule 132 (empty -> .) ]
  ! VAR             [ reduce using rule 132 (empty -> .) ]

    return_statement               shift and go to state 281
    functionbody                   shift and go to state 282
    assignment_to_type             shift and go to state 254
    print_statement                shift and go to state 255
    ifComp                         shift and go to state 256
    while_statement                shift and go to state 257
    switch_statement               shift and go to state 258
    import_statement               shift and go to state 259
    for_statement                  shift and go to state 260
    empty                          shift and go to state 261
    variable_declarator            shift and go to state 262

state 253

    (102) functionstatements -> functionbody .

    RETURN          reduce using rule 102 (functionstatements -> functionbody .)
    PRINT           reduce using rule 102 (functionstatements -> functionbody .)
    IF              reduce using rule 102 (functionstatements -> functionbody .)
    WHILE           reduce using rule 102 (functionstatements -> functionbody .)
    REPEAT          reduce using rule 102 (functionstatements -> functionbody .)
    SWITCH          reduce using rule 102 (functionstatements -> functionbody .)
    IMPORT          reduce using rule 102 (functionstatements -> functionbody .)
    FOR             reduce using rule 102 (functionstatements -> functionbody .)
    LET             reduce using rule 102 (functionstatements -> functionbody .)
    VAR             reduce using rule 102 (functionstatements -> functionbody .)


state 254

    (103) functionbody -> assignment_to_type .

    RETURN          reduce using rule 103 (functionbody -> assignment_to_type .)
    PRINT           reduce using rule 103 (functionbody -> assignment_to_type .)
    IF              reduce using rule 103 (functionbody -> assignment_to_type .)
    WHILE           reduce using rule 103 (functionbody -> assignment_to_type .)
    REPEAT          reduce using rule 103 (functionbody -> assignment_to_type .)
    SWITCH          reduce using rule 103 (functionbody -> assignment_to_type .)
    IMPORT          reduce using rule 103 (functionbody -> assignment_to_type .)
    FOR             reduce using rule 103 (functionbody -> assignment_to_type .)
    LET             reduce using rule 103 (functionbody -> assignment_to_type .)
    VAR             reduce using rule 103 (functionbody -> assignment_to_type .)


state 255

    (104) functionbody -> print_statement .

    RETURN          reduce using rule 104 (functionbody -> print_statement .)
    PRINT           reduce using rule 104 (functionbody -> print_statement .)
    IF              reduce using rule 104 (functionbody -> print_statement .)
    WHILE           reduce using rule 104 (functionbody -> print_statement .)
    REPEAT          reduce using rule 104 (functionbody -> print_statement .)
    SWITCH          reduce using rule 104 (functionbody -> print_statement .)
    IMPORT          reduce using rule 104 (functionbody -> print_statement .)
    FOR             reduce using rule 104 (functionbody -> print_statement .)
    LET             reduce using rule 104 (functionbody -> print_statement .)
    VAR             reduce using rule 104 (functionbody -> print_statement .)


state 256

    (105) functionbody -> ifComp .

    RETURN          reduce using rule 105 (functionbody -> ifComp .)
    PRINT           reduce using rule 105 (functionbody -> ifComp .)
    IF              reduce using rule 105 (functionbody -> ifComp .)
    WHILE           reduce using rule 105 (functionbody -> ifComp .)
    REPEAT          reduce using rule 105 (functionbody -> ifComp .)
    SWITCH          reduce using rule 105 (functionbody -> ifComp .)
    IMPORT          reduce using rule 105 (functionbody -> ifComp .)
    FOR             reduce using rule 105 (functionbody -> ifComp .)
    LET             reduce using rule 105 (functionbody -> ifComp .)
    VAR             reduce using rule 105 (functionbody -> ifComp .)


state 257

    (106) functionbody -> while_statement .

    RETURN          reduce using rule 106 (functionbody -> while_statement .)
    PRINT           reduce using rule 106 (functionbody -> while_statement .)
    IF              reduce using rule 106 (functionbody -> while_statement .)
    WHILE           reduce using rule 106 (functionbody -> while_statement .)
    REPEAT          reduce using rule 106 (functionbody -> while_statement .)
    SWITCH          reduce using rule 106 (functionbody -> while_statement .)
    IMPORT          reduce using rule 106 (functionbody -> while_statement .)
    FOR             reduce using rule 106 (functionbody -> while_statement .)
    LET             reduce using rule 106 (functionbody -> while_statement .)
    VAR             reduce using rule 106 (functionbody -> while_statement .)


state 258

    (107) functionbody -> switch_statement .

    RETURN          reduce using rule 107 (functionbody -> switch_statement .)
    PRINT           reduce using rule 107 (functionbody -> switch_statement .)
    IF              reduce using rule 107 (functionbody -> switch_statement .)
    WHILE           reduce using rule 107 (functionbody -> switch_statement .)
    REPEAT          reduce using rule 107 (functionbody -> switch_statement .)
    SWITCH          reduce using rule 107 (functionbody -> switch_statement .)
    IMPORT          reduce using rule 107 (functionbody -> switch_statement .)
    FOR             reduce using rule 107 (functionbody -> switch_statement .)
    LET             reduce using rule 107 (functionbody -> switch_statement .)
    VAR             reduce using rule 107 (functionbody -> switch_statement .)


state 259

    (108) functionbody -> import_statement .

    RETURN          reduce using rule 108 (functionbody -> import_statement .)
    PRINT           reduce using rule 108 (functionbody -> import_statement .)
    IF              reduce using rule 108 (functionbody -> import_statement .)
    WHILE           reduce using rule 108 (functionbody -> import_statement .)
    REPEAT          reduce using rule 108 (functionbody -> import_statement .)
    SWITCH          reduce using rule 108 (functionbody -> import_statement .)
    IMPORT          reduce using rule 108 (functionbody -> import_statement .)
    FOR             reduce using rule 108 (functionbody -> import_statement .)
    LET             reduce using rule 108 (functionbody -> import_statement .)
    VAR             reduce using rule 108 (functionbody -> import_statement .)


state 260

    (109) functionbody -> for_statement .

    RETURN          reduce using rule 109 (functionbody -> for_statement .)
    PRINT           reduce using rule 109 (functionbody -> for_statement .)
    IF              reduce using rule 109 (functionbody -> for_statement .)
    WHILE           reduce using rule 109 (functionbody -> for_statement .)
    REPEAT          reduce using rule 109 (functionbody -> for_statement .)
    SWITCH          reduce using rule 109 (functionbody -> for_statement .)
    IMPORT          reduce using rule 109 (functionbody -> for_statement .)
    FOR             reduce using rule 109 (functionbody -> for_statement .)
    LET             reduce using rule 109 (functionbody -> for_statement .)
    VAR             reduce using rule 109 (functionbody -> for_statement .)


state 261

    (110) functionbody -> empty .

    RETURN          reduce using rule 110 (functionbody -> empty .)
    PRINT           reduce using rule 110 (functionbody -> empty .)
    IF              reduce using rule 110 (functionbody -> empty .)
    WHILE           reduce using rule 110 (functionbody -> empty .)
    REPEAT          reduce using rule 110 (functionbody -> empty .)
    SWITCH          reduce using rule 110 (functionbody -> empty .)
    IMPORT          reduce using rule 110 (functionbody -> empty .)
    FOR             reduce using rule 110 (functionbody -> empty .)
    LET             reduce using rule 110 (functionbody -> empty .)
    VAR             reduce using rule 110 (functionbody -> empty .)


state 262

    (38) assignment_to_type -> variable_declarator . VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> variable_declarator . VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> variable_declarator . VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator . VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> variable_declarator . VARIABLE COLON FLOAT ASSIGN DECIMAL

    VARIABLE        shift and go to state 284


state 263

    (124) function_return_type -> ARROW LPAREN function_parameters . RPAREN
    (121) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 285
    COMMA           shift and go to state 124


state 264

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements . return_statement RBRACES
    (101) functionstatements -> functionstatements . functionbody
    (126) return_statement -> . RETURN expression
    (103) functionbody -> . assignment_to_type
    (104) functionbody -> . print_statement
    (105) functionbody -> . ifComp
    (106) functionbody -> . while_statement
    (107) functionbody -> . switch_statement
    (108) functionbody -> . import_statement
    (109) functionbody -> . for_statement
    (110) functionbody -> . empty
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (132) empty -> .
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          shift and go to state 283
    PRINT           shift and go to state 21
    IF              shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    LET             shift and go to state 18
    VAR             shift and go to state 19

  ! RETURN          [ reduce using rule 132 (empty -> .) ]
  ! PRINT           [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! REPEAT          [ reduce using rule 132 (empty -> .) ]
  ! SWITCH          [ reduce using rule 132 (empty -> .) ]
  ! IMPORT          [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! LET             [ reduce using rule 132 (empty -> .) ]
  ! VAR             [ reduce using rule 132 (empty -> .) ]

    empty                          shift and go to state 261
    return_statement               shift and go to state 286
    functionbody                   shift and go to state 282
    assignment_to_type             shift and go to state 254
    print_statement                shift and go to state 255
    ifComp                         shift and go to state 256
    while_statement                shift and go to state 257
    switch_statement               shift and go to state 258
    import_statement               shift and go to state 259
    for_statement                  shift and go to state 260
    variable_declarator            shift and go to state 262

state 265

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer . RSQUAREBRACKET
    (49) mul_integuer -> mul_integuer . COMMA NUMBER

    RSQUAREBRACKET  shift and go to state 287
    COMMA           shift and go to state 288


state 266

    (50) mul_integuer -> NUMBER .

    RSQUAREBRACKET  reduce using rule 50 (mul_integuer -> NUMBER .)
    COMMA           reduce using rule 50 (mul_integuer -> NUMBER .)


state 267

    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string . RSQUAREBRACKET
    (51) mul_string -> mul_string . COMMA WSTRING

    RSQUAREBRACKET  shift and go to state 289
    COMMA           shift and go to state 290


state 268

    (52) mul_string -> WSTRING .

    RSQUAREBRACKET  reduce using rule 52 (mul_string -> WSTRING .)
    COMMA           reduce using rule 52 (mul_string -> WSTRING .)


state 269

    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano . RSQUAREBRACKET
    (53) mul_booleano -> mul_booleano . COMMA boolean_option

    RSQUAREBRACKET  shift and go to state 291
    COMMA           shift and go to state 292


state 270

    (54) mul_booleano -> boolean_option .

    RSQUAREBRACKET  reduce using rule 54 (mul_booleano -> boolean_option .)
    COMMA           reduce using rule 54 (mul_booleano -> boolean_option .)


state 271

    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float . RSQUAREBRACKET
    (57) mul_float -> mul_float . COMMA DECIMAL

    RSQUAREBRACKET  shift and go to state 293
    COMMA           shift and go to state 294


state 272

    (58) mul_float -> DECIMAL .

    RSQUAREBRACKET  reduce using rule 58 (mul_float -> DECIMAL .)
    COMMA           reduce using rule 58 (mul_float -> DECIMAL .)


state 273

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET . mul_integuer RSQUAREBRACKET
    (49) mul_integuer -> . mul_integuer COMMA NUMBER
    (50) mul_integuer -> . NUMBER

    NUMBER          shift and go to state 266

    mul_integuer                   shift and go to state 295

state 274

    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET . mul_string RSQUAREBRACKET
    (51) mul_string -> . mul_string COMMA WSTRING
    (52) mul_string -> . WSTRING

    WSTRING         shift and go to state 268

    mul_string                     shift and go to state 296

state 275

    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET . mul_booleano RSQUAREBRACKET
    (53) mul_booleano -> . mul_booleano COMMA boolean_option
    (54) mul_booleano -> . boolean_option
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    mul_booleano                   shift and go to state 297
    boolean_option                 shift and go to state 270

state 276

    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET . mul_float RSQUAREBRACKET
    (57) mul_float -> . mul_float COMMA DECIMAL
    (58) mul_float -> . DECIMAL

    DECIMAL         shift and go to state 272

    mul_float                      shift and go to state 298

state 277

    (84) boolean_expresion -> LPAREN boolean_option . logical_operator boolean_option RPAREN boolean_expresion
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    AND             shift and go to state 50
    OR              shift and go to state 51

    logical_operator               shift and go to state 299

state 278

    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statements                     shift and go to state 300
    statement                      shift and go to state 3
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 279

    (98) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON . cuerpo_caso
    (99) cuerpo_caso -> . expression
    (100) cuerpo_caso -> . statement
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 227
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    INIT            shift and go to state 29
    AND             shift and go to state 50
    OR              shift and go to state 51
    FUNC            shift and go to state 30

    expression                     shift and go to state 301
    cuerpo_caso                    shift and go to state 302
    statement                      shift and go to state 226
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 280

    (92) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .

    LET             reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    VAR             reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    IF              reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    PRINT           reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    WHILE           reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    REPEAT          reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    SWITCH          reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    IMPORT          reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    FOR             reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    VARIABLE        reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    INIT            reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    FUNC            reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    $end            reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    RBRACES         reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    CASE            reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    RETURN          reduce using rule 92 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)


state 281

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement . RBRACES

    RBRACES         shift and go to state 303


state 282

    (101) functionstatements -> functionstatements functionbody .

    RETURN          reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    PRINT           reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    IF              reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    WHILE           reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    REPEAT          reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    SWITCH          reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    IMPORT          reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    FOR             reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    LET             reduce using rule 101 (functionstatements -> functionstatements functionbody .)
    VAR             reduce using rule 101 (functionstatements -> functionstatements functionbody .)


state 283

    (126) return_statement -> RETURN . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression GREATERTHAN expression
    (25) expression -> . expression LESSTHAN expression
    (26) expression -> . expression EQUALS expression
    (27) expression -> . expression NOTEQUALS expression
    (28) expression -> . expression AND expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression COMMA expression
    (31) expression -> . expression COLON expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NOT expression
    (34) expression -> . VARIABLE
    (35) expression -> . type
    (36) expression -> . comparacion
    (37) expression -> . boolean_expresion
    (75) type -> . TRUE
    (76) type -> . FALSE
    (77) type -> . DECIMAL
    (78) type -> . WSTRING
    (79) type -> . NUMBER
    (59) comparacion -> . VARIABLE operadorComp VARIABLE
    (60) comparacion -> . DECIMAL operadorComp DECIMAL
    (61) comparacion -> . WSTRING operadorComp WSTRING
    (62) comparacion -> . NUMBER operadorComp NUMBER
    (63) comparacion -> . VARIABLE operadorComp DECIMAL
    (64) comparacion -> . DECIMAL operadorComp VARIABLE
    (65) comparacion -> . WSTRING operadorComp VARIABLE
    (66) comparacion -> . VARIABLE operadorComp WSTRING
    (67) comparacion -> . NUMBER operadorComp VARIABLE
    (68) comparacion -> . VARIABLE operadorComp NUMBER
    (84) boolean_expresion -> . LPAREN boolean_option logical_operator boolean_option RPAREN boolean_expresion
    (85) boolean_expresion -> . boolean_expresion LPAREN boolean_option logical_operator boolean_option RPAREN
    (86) boolean_expresion -> . boolean_option logical_operator boolean_option
    (87) boolean_expresion -> . logical_operator boolean_option
    (88) boolean_expresion -> . boolean_option logical_operator
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE
    (89) logical_operator -> . AND
    (90) logical_operator -> . OR

    LPAREN          shift and go to state 46
    NOT             shift and go to state 52
    VARIABLE        shift and go to state 45
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    DECIMAL         shift and go to state 58
    WSTRING         shift and go to state 59
    NUMBER          shift and go to state 60
    AND             shift and go to state 50
    OR              shift and go to state 51

    expression                     shift and go to state 304
    type                           shift and go to state 53
    comparacion                    shift and go to state 54
    boolean_expresion              shift and go to state 55
    boolean_option                 shift and go to state 61
    logical_operator               shift and go to state 62

state 284

    (38) assignment_to_type -> variable_declarator VARIABLE . COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> variable_declarator VARIABLE . COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> variable_declarator VARIABLE . COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator VARIABLE . COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> variable_declarator VARIABLE . COLON FLOAT ASSIGN DECIMAL

    COLON           shift and go to state 305


state 285

    (124) function_return_type -> ARROW LPAREN function_parameters RPAREN .

    LBRACES         reduce using rule 124 (function_return_type -> ARROW LPAREN function_parameters RPAREN .)


state 286

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement . RBRACES

    RBRACES         shift and go to state 306


state 287

    (43) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .

    LET             reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    VAR             reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    IF              reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    PRINT           reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    WHILE           reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    REPEAT          reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    SWITCH          reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    IMPORT          reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    FOR             reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    VARIABLE        reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    INIT            reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    FUNC            reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    $end            reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    RBRACES         reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    DEFAULT         reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    CASE            reduce using rule 43 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)


state 288

    (49) mul_integuer -> mul_integuer COMMA . NUMBER

    NUMBER          shift and go to state 307


state 289

    (44) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .

    LET             reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    VAR             reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    IF              reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    PRINT           reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    WHILE           reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    REPEAT          reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    SWITCH          reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    IMPORT          reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    FOR             reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    VARIABLE        reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    INIT            reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    FUNC            reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    $end            reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    RBRACES         reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    DEFAULT         reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    CASE            reduce using rule 44 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)


state 290

    (51) mul_string -> mul_string COMMA . WSTRING

    WSTRING         shift and go to state 308


state 291

    (45) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .

    LET             reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    VAR             reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    IF              reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    PRINT           reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    WHILE           reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    REPEAT          reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    SWITCH          reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    IMPORT          reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    FOR             reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    VARIABLE        reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    INIT            reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    FUNC            reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    $end            reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    RBRACES         reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    DEFAULT         reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    CASE            reduce using rule 45 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)


state 292

    (53) mul_booleano -> mul_booleano COMMA . boolean_option
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 309

state 293

    (46) assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .

    LET             reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    VAR             reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    IF              reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    PRINT           reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    WHILE           reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    REPEAT          reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    SWITCH          reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    IMPORT          reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    FOR             reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    VARIABLE        reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    INIT            reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    FUNC            reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    $end            reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    RBRACES         reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    DEFAULT         reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    CASE            reduce using rule 46 (assignment_to_type_collection -> variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)


state 294

    (57) mul_float -> mul_float COMMA . DECIMAL

    DECIMAL         shift and go to state 310


state 295

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer . RSQUAREBRACKET
    (49) mul_integuer -> mul_integuer . COMMA NUMBER

    RSQUAREBRACKET  shift and go to state 311
    COMMA           shift and go to state 288


state 296

    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string . RSQUAREBRACKET
    (51) mul_string -> mul_string . COMMA WSTRING

    RSQUAREBRACKET  shift and go to state 312
    COMMA           shift and go to state 290


state 297

    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano . RSQUAREBRACKET
    (53) mul_booleano -> mul_booleano . COMMA boolean_option

    RSQUAREBRACKET  shift and go to state 313
    COMMA           shift and go to state 292


state 298

    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float . RSQUAREBRACKET
    (57) mul_float -> mul_float . COMMA DECIMAL

    RSQUAREBRACKET  shift and go to state 314
    COMMA           shift and go to state 294


state 299

    (84) boolean_expresion -> LPAREN boolean_option logical_operator . boolean_option RPAREN boolean_expresion
    (55) boolean_option -> . TRUE
    (56) boolean_option -> . FALSE

    TRUE            shift and go to state 113
    FALSE           shift and go to state 114

    boolean_option                 shift and go to state 315

state 300

    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_to_type
    (5) statement -> . assignment_to_type_collection
    (6) statement -> . assignment_to_type_collection_set
    (7) statement -> . variable_declarator VARIABLE ASSIGN expression
    (8) statement -> . ifComp
    (9) statement -> . print_statement
    (10) statement -> . while_statement
    (11) statement -> . switch_statement
    (12) statement -> . import_statement
    (13) statement -> . for_statement
    (14) statement -> . function_general
    (15) statement -> . function_call
    (16) statement -> . function_init
    (38) assignment_to_type -> . variable_declarator VARIABLE COLON STRING ASSIGN WSTRING
    (39) assignment_to_type -> . variable_declarator VARIABLE COLON INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> . variable_declarator VARIABLE COLON BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> . variable_declarator VARIABLE COLON FLOAT ASSIGN DECIMAL
    (43) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET integer_options RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (44) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET STRING RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (45) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET BOOLEAN RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (46) assignment_to_type_collection -> . variable_declarator VARIABLE COLON LSQUAREBRACKET FLOAT RSQUAREBRACKET ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (80) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET
    (81) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET
    (82) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET
    (83) assignment_to_type_collection_set -> . variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET
    (17) variable_declarator -> . LET
    (18) variable_declarator -> . VAR
    (73) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES
    (74) ifComp -> . IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (19) print_statement -> . PRINT LPAREN expression RPAREN
    (94) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (95) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (96) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (91) import_statement -> . IMPORT VARIABLE
    (92) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (93) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (111) function_general -> . function_declaration
    (112) function_general -> . function_declaration_empty
    (128) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (127) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (113) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (114) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 316
    LET             shift and go to state 18
    VAR             shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    SWITCH          shift and go to state 24
    IMPORT          shift and go to state 25
    FOR             shift and go to state 26
    VARIABLE        shift and go to state 8
    INIT            shift and go to state 29
    FUNC            shift and go to state 30

    statement                      shift and go to state 31
    assignment_to_type             shift and go to state 4
    assignment_to_type_collection  shift and go to state 5
    assignment_to_type_collection_set shift and go to state 6
    variable_declarator            shift and go to state 7
    ifComp                         shift and go to state 9
    print_statement                shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    function_general               shift and go to state 15
    function_call                  shift and go to state 16
    function_init                  shift and go to state 17
    function_declaration           shift and go to state 27
    function_declaration_empty     shift and go to state 28

state 301

    (99) cuerpo_caso -> expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    RBRACES         reduce using rule 99 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 302

    (98) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .

    RBRACES         reduce using rule 98 (caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .)


state 303

    (113) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .

    LET             reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VAR             reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IF              reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    PRINT           reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    WHILE           reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    REPEAT          reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    SWITCH          reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IMPORT          reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FOR             reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VARIABLE        reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    INIT            reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FUNC            reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    $end            reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    RBRACES         reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    DEFAULT         reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    CASE            reduce using rule 113 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)


state 304

    (126) return_statement -> RETURN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . GREATERTHAN expression
    (25) expression -> expression . LESSTHAN expression
    (26) expression -> expression . EQUALS expression
    (27) expression -> expression . NOTEQUALS expression
    (28) expression -> expression . AND expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . COMMA expression
    (31) expression -> expression . COLON expression

    RBRACES         reduce using rule 126 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 97
    GREATERTHAN     shift and go to state 98
    LESSTHAN        shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           shift and go to state 104
    COLON           shift and go to state 105


state 305

    (38) assignment_to_type -> variable_declarator VARIABLE COLON . STRING ASSIGN WSTRING
    (39) assignment_to_type -> variable_declarator VARIABLE COLON . INTEGER ASSIGN NUMBER
    (40) assignment_to_type -> variable_declarator VARIABLE COLON . BOOLEAN ASSIGN TRUE
    (41) assignment_to_type -> variable_declarator VARIABLE COLON . BOOLEAN ASSIGN FALSE
    (42) assignment_to_type -> variable_declarator VARIABLE COLON . FLOAT ASSIGN DECIMAL

    STRING          shift and go to state 77
    INTEGER         shift and go to state 78
    BOOLEAN         shift and go to state 79
    FLOAT           shift and go to state 80


state 306

    (114) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .

    LET             reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VAR             reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IF              reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    PRINT           reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    WHILE           reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    REPEAT          reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    SWITCH          reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IMPORT          reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FOR             reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VARIABLE        reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    INIT            reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FUNC            reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    $end            reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    RBRACES         reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    DEFAULT         reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    CASE            reduce using rule 114 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)


state 307

    (49) mul_integuer -> mul_integuer COMMA NUMBER .

    RSQUAREBRACKET  reduce using rule 49 (mul_integuer -> mul_integuer COMMA NUMBER .)
    COMMA           reduce using rule 49 (mul_integuer -> mul_integuer COMMA NUMBER .)


state 308

    (51) mul_string -> mul_string COMMA WSTRING .

    RSQUAREBRACKET  reduce using rule 51 (mul_string -> mul_string COMMA WSTRING .)
    COMMA           reduce using rule 51 (mul_string -> mul_string COMMA WSTRING .)


state 309

    (53) mul_booleano -> mul_booleano COMMA boolean_option .

    RSQUAREBRACKET  reduce using rule 53 (mul_booleano -> mul_booleano COMMA boolean_option .)
    COMMA           reduce using rule 53 (mul_booleano -> mul_booleano COMMA boolean_option .)


state 310

    (57) mul_float -> mul_float COMMA DECIMAL .

    RSQUAREBRACKET  reduce using rule 57 (mul_float -> mul_float COMMA DECIMAL .)
    COMMA           reduce using rule 57 (mul_float -> mul_float COMMA DECIMAL .)


state 311

    (80) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .

    LET             reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    VAR             reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    IF              reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    PRINT           reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    WHILE           reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    REPEAT          reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    SWITCH          reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    IMPORT          reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    FOR             reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    VARIABLE        reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    INIT            reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    FUNC            reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    $end            reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    RBRACES         reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    DEFAULT         reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)
    CASE            reduce using rule 80 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN integer_options GREATERTHAN ASSIGN LSQUAREBRACKET mul_integuer RSQUAREBRACKET .)


state 312

    (81) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .

    LET             reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    VAR             reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    IF              reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    PRINT           reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    WHILE           reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    REPEAT          reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    SWITCH          reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    IMPORT          reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    FOR             reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    VARIABLE        reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    INIT            reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    FUNC            reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    $end            reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    RBRACES         reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    DEFAULT         reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)
    CASE            reduce using rule 81 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN STRING GREATERTHAN ASSIGN LSQUAREBRACKET mul_string RSQUAREBRACKET .)


state 313

    (82) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .

    LET             reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    VAR             reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    IF              reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    PRINT           reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    WHILE           reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    REPEAT          reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    SWITCH          reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    IMPORT          reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    FOR             reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    VARIABLE        reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    INIT            reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    FUNC            reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    $end            reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    RBRACES         reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    DEFAULT         reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)
    CASE            reduce using rule 82 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN BOOLEAN GREATERTHAN ASSIGN LSQUAREBRACKET mul_booleano RSQUAREBRACKET .)


state 314

    (83) assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .

    LET             reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    VAR             reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    IF              reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    PRINT           reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    WHILE           reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    REPEAT          reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    SWITCH          reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    IMPORT          reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    FOR             reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    VARIABLE        reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    INIT            reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    FUNC            reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    $end            reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    RBRACES         reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    DEFAULT         reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)
    CASE            reduce using rule 83 (assignment_to_type_collection_set -> variable_declarator VARIABLE COLON SET LESSTHAN FLOAT GREATERTHAN ASSIGN LSQUAREBRACKET mul_float RSQUAREBRACKET .)


state 315

    (84) boolean_expresion -> LPAREN boolean_option logical_operator boolean_option . RPAREN boolean_expresion

    RPAREN          shift and go to state 219


state 316

    (74) ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .

    LET             reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VAR             reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IF              reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    PRINT           reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    WHILE           reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    REPEAT          reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IMPORT          reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FOR             reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VARIABLE        reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    INIT            reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FUNC            reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    $end            reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    CASE            reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RETURN          reduce using rule 74 (ifComp -> IF LPAREN comparacion RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GREATERTHAN in state 45 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 45 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 45 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 45 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 48 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 58 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 106 resolved as shift
WARNING: shift/reduce conflict for COLON in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 145 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 146 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 146 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 146 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 146 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 146 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 146 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 146 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 146 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 146 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 146 resolved as shift
WARNING: shift/reduce conflict for COLON in state 146 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 147 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 147 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 147 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 147 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 147 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 147 resolved as shift
WARNING: shift/reduce conflict for COLON in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 148 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 148 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 148 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 148 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 148 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 148 resolved as shift
WARNING: shift/reduce conflict for AND in state 148 resolved as shift
WARNING: shift/reduce conflict for OR in state 148 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 148 resolved as shift
WARNING: shift/reduce conflict for COLON in state 148 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 149 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 149 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 149 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 149 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 149 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 149 resolved as shift
WARNING: shift/reduce conflict for OR in state 149 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 149 resolved as shift
WARNING: shift/reduce conflict for COLON in state 149 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 150 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 150 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 150 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 150 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 150 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 150 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 150 resolved as shift
WARNING: shift/reduce conflict for COLON in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 151 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 151 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 151 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 151 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 151 resolved as shift
WARNING: shift/reduce conflict for AND in state 151 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 151 resolved as shift
WARNING: shift/reduce conflict for COLON in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 152 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 152 resolved as shift
WARNING: shift/reduce conflict for COLON in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 153 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 153 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 153 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 153 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 153 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 153 resolved as shift
WARNING: shift/reduce conflict for AND in state 153 resolved as shift
WARNING: shift/reduce conflict for OR in state 153 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 153 resolved as shift
WARNING: shift/reduce conflict for COLON in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 154 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 154 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 154 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 154 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 154 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 154 resolved as shift
WARNING: shift/reduce conflict for COLON in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 155 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 155 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 155 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 155 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 155 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 155 resolved as shift
WARNING: shift/reduce conflict for AND in state 155 resolved as shift
WARNING: shift/reduce conflict for OR in state 155 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 155 resolved as shift
WARNING: shift/reduce conflict for COLON in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 156 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 156 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 156 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 156 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 156 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 156 resolved as shift
WARNING: shift/reduce conflict for AND in state 156 resolved as shift
WARNING: shift/reduce conflict for OR in state 156 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 156 resolved as shift
WARNING: shift/reduce conflict for COLON in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 157 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 157 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 157 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 157 resolved as shift
WARNING: shift/reduce conflict for AND in state 157 resolved as shift
WARNING: shift/reduce conflict for OR in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 157 resolved as shift
WARNING: shift/reduce conflict for COLON in state 157 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 197 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 224 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 224 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 224 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 224 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 224 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 224 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 224 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 224 resolved as shift
WARNING: shift/reduce conflict for AND in state 224 resolved as shift
WARNING: shift/reduce conflict for OR in state 224 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 224 resolved as shift
WARNING: shift/reduce conflict for COLON in state 224 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 227 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 227 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 227 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 227 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 232 resolved as shift
WARNING: shift/reduce conflict for IF in state 232 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 232 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 232 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 232 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 232 resolved as shift
WARNING: shift/reduce conflict for FOR in state 232 resolved as shift
WARNING: shift/reduce conflict for LET in state 232 resolved as shift
WARNING: shift/reduce conflict for VAR in state 232 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 235 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 235 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 235 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 235 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 235 resolved as shift
WARNING: shift/reduce conflict for FOR in state 235 resolved as shift
WARNING: shift/reduce conflict for LET in state 235 resolved as shift
WARNING: shift/reduce conflict for VAR in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 245 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 252 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 252 resolved as shift
WARNING: shift/reduce conflict for IF in state 252 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 252 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 252 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 252 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 252 resolved as shift
WARNING: shift/reduce conflict for FOR in state 252 resolved as shift
WARNING: shift/reduce conflict for LET in state 252 resolved as shift
WARNING: shift/reduce conflict for VAR in state 252 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 264 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 264 resolved as shift
WARNING: shift/reduce conflict for IF in state 264 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 264 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 264 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 264 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 264 resolved as shift
WARNING: shift/reduce conflict for FOR in state 264 resolved as shift
WARNING: shift/reduce conflict for LET in state 264 resolved as shift
WARNING: shift/reduce conflict for VAR in state 264 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (boolean_option -> TRUE)
WARNING: rejected rule (type -> TRUE) in state 56
WARNING: reduce/reduce conflict in state 57 resolved using rule (boolean_option -> FALSE)
WARNING: rejected rule (type -> FALSE) in state 57
WARNING: reduce/reduce conflict in state 90 resolved using rule (boolean_option -> TRUE)
WARNING: rejected rule (type -> TRUE) in state 90
WARNING: reduce/reduce conflict in state 91 resolved using rule (boolean_option -> FALSE)
WARNING: rejected rule (type -> FALSE) in state 91
