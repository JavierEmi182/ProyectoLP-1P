Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    BOOL
    CALLMETHOD
    CHARACTER
    CLASS
    COLLECTIONTYPE
    CONTINUE
    ENUM
    GUARD
    MINUSONE
    PLUSONE
    PRIVATE
    PUBLIC
    RESIDUE
    SETVARIABLE
    STATIC
    STRUCT
    TYPEALIAS
    VALUESTYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> assignment_statement_type
Rule 6     statement -> print_statement
Rule 7     statement -> if_statement
Rule 8     statement -> function_general
Rule 9     statement -> function_call
Rule 10    statement -> function_init
Rule 11    statement -> while_statement
Rule 12    statement -> switch_statement
Rule 13    statement -> import_statement
Rule 14    statement -> for_statement
Rule 15    statement -> comment
Rule 16    functionstatements -> functionstatements functionbody
Rule 17    functionstatements -> functionbody
Rule 18    functionbody -> assignment_statement
Rule 19    functionbody -> assignment_statement_type
Rule 20    functionbody -> print_statement
Rule 21    functionbody -> if_statement
Rule 22    functionbody -> while_statement
Rule 23    functionbody -> switch_statement
Rule 24    functionbody -> import_statement
Rule 25    functionbody -> for_statement
Rule 26    functionbody -> empty
Rule 27    functionbody -> comment
Rule 28    assignment_statement -> variable_declarator VARIABLE ASSIGN expression
Rule 29    assignment_statement -> variable_declarator VARIABLE ASSIGN READLN
Rule 30    assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
Rule 31    assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
Rule 32    assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block
Rule 33    assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
Rule 34    assignment_statement -> VARIABLE ASSIGN expression
Rule 35    assignment_statement -> VARIABLE ASSIGN READLN
Rule 36    assignment_statement_type -> variable_declarator VARIABLE COLON data_type
Rule 37    assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
Rule 38    assignment_statement_type -> variable_declarator multiple_variables COLON data_type
Rule 39    assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression
Rule 40    assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN
Rule 41    multiple_assign -> multiple_assign assignment_statement
Rule 42    multiple_assign -> assignment_statement
Rule 43    import_statement -> IMPORT VARIABLE
Rule 44    for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
Rule 45    for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
Rule 46    multiple_variables -> multiple_variables COMMA VARIABLE
Rule 47    multiple_variables -> VARIABLE
Rule 48    collection_block -> LSQUAREBRACKET types RSQUAREBRACKET
Rule 49    print_statement -> PRINT LPAREN expression RPAREN
Rule 50    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES
Rule 51    if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
Rule 52    while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES
Rule 53    while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
Rule 54    switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES
Rule 55    caso -> CASE expression COLON cuerpo_caso caso
Rule 56    caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
Rule 57    cuerpo_caso -> expression
Rule 58    cuerpo_caso -> statement
Rule 59    function_general -> function_declaration
Rule 60    function_general -> function_declaration_empty
Rule 61    function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
Rule 62    function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
Rule 63    function_parameters -> function_parameters COMMA VARIABLE COLON data_type
Rule 64    function_parameters -> VARIABLE COLON data_type
Rule 65    function_return_type -> ARROW data_type
Rule 66    function_return_type -> ARROW LPAREN function_parameters RPAREN
Rule 67    function_return_type -> empty
Rule 68    return_statement -> RETURN expression
Rule 69    function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
Rule 70    function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES
Rule 71    variable_declarator -> LET
Rule 72    variable_declarator -> VAR
Rule 73    data_type -> INTEGER
Rule 74    data_type -> STRING
Rule 75    data_type -> BOOLEAN
Rule 76    data_type -> DOUBLE
Rule 77    data_type -> FLOAT
Rule 78    data_type -> INT
Rule 79    data_collection_type -> LSQUAREBRACKET INTEGER RSQUAREBRACKET
Rule 80    data_collection_type -> LSQUAREBRACKET STRING RSQUAREBRACKET
Rule 81    data_collection_type -> LSQUAREBRACKET BOOLEAN RSQUAREBRACKET
Rule 82    data_collection_type -> LSQUAREBRACKET DOUBLE RSQUAREBRACKET
Rule 83    data_collection_type -> LSQUAREBRACKET INT RSQUAREBRACKET
Rule 84    data_collection_type -> LSQUAREBRACKET DICTIONARYTYPE RSQUAREBRACKET
Rule 85    data_diamond_type -> LESSTHAN INTEGER GREATERTHAN
Rule 86    data_diamond_type -> LESSTHAN STRING GREATERTHAN
Rule 87    data_diamond_type -> LESSTHAN BOOLEAN GREATERTHAN
Rule 88    data_diamond_type -> LESSTHAN DOUBLE GREATERTHAN
Rule 89    data_diamond_type -> LESSTHAN INT GREATERTHAN
Rule 90    break_statement -> BREAK
Rule 91    expression -> expression PLUS expression
Rule 92    expression -> expression MINUS expression
Rule 93    expression -> expression MULTIPLY expression
Rule 94    expression -> expression DIVIDE expression
Rule 95    expression -> expression GREATERTHAN expression
Rule 96    expression -> expression LESSTHAN expression
Rule 97    expression -> expression EQUALS expression
Rule 98    expression -> expression NOTEQUALS expression
Rule 99    expression -> expression AND expression
Rule 100   expression -> expression OR expression
Rule 101   expression -> expression COMMA expression
Rule 102   expression -> expression COLON expression
Rule 103   expression -> LPAREN expression RPAREN
Rule 104   expression -> NOT expression
Rule 105   expression -> VARIABLE
Rule 106   expression -> type
Rule 107   expression -> function_call
Rule 108   types -> types COMMA type
Rule 109   types -> key_value COMMA types
Rule 110   types -> key_value
Rule 111   types -> type
Rule 112   type -> TRUE
Rule 113   type -> FALSE
Rule 114   type -> DECIMAL
Rule 115   type -> WSTRING
Rule 116   type -> NUMBER
Rule 117   key_value -> type COLON type
Rule 118   function_call -> VARIABLE LPAREN function_arguments RPAREN
Rule 119   function_arguments -> function_arguments COMMA expression
Rule 120   function_arguments -> expression
Rule 121   function_arguments -> empty
Rule 122   empty -> <empty>
Rule 123   comment -> COMMENT

Terminals, with rules where they appear

AND                  : 99
ARRAY                : 
ARROW                : 65 66
ASSIGN               : 28 29 30 31 32 33 34 35 39 40
BOOL                 : 
BOOLEAN              : 75 81 87
BREAK                : 90
CALLMETHOD           : 
CASE                 : 55 56
CHARACTER            : 
CLASS                : 
COLLECTIONTYPE       : 
COLON                : 30 31 32 33 36 37 38 39 40 55 56 56 63 64 102 117
COMMA                : 46 63 101 108 109 119
COMMENT              : 123
CONTINUE             : 
DECIMAL              : 114
DEFAULT              : 56
DICTIONARYTYPE       : 33 84
DIVIDE               : 94
DOUBLE               : 76 82 88
ELSE                 : 51
ENUM                 : 
EQUALS               : 97
FALSE                : 113
FLOAT                : 77
FOR                  : 44 45
FUNC                 : 61 62
GREATERTHAN          : 85 86 87 88 89 95
GUARD                : 
IF                   : 50 51
IMPORT               : 43
IN                   : 44 45
INIT                 : 69 70
INT                  : 78 83 89
INTEGER              : 73 79 85
LBRACES              : 44 45 50 51 51 52 53 54 61 62 69 70
LESSTHAN             : 85 86 87 88 89 96
LET                  : 71
LPAREN               : 49 50 51 52 53 61 62 66 69 70 103 118
LSQUAREBRACKET       : 48 79 80 81 82 83 84
MINUS                : 92
MINUSONE             : 
MULTIPLY             : 93
NOT                  : 104
NOTEQUALS            : 98
NUMBER               : 44 44 116
OPTIONALVARIABLE     : 37
OR                   : 100
PLUS                 : 91
PLUSONE              : 
PRINT                : 49
PRIVATE              : 
PUBLIC               : 
RANGE                : 44
RBRACES              : 44 45 50 51 51 52 53 54 61 62 69 70
READLN               : 29 35 40
REPEAT               : 53
RESIDUE              : 
RETURN               : 68
RPAREN               : 49 50 51 52 53 61 62 66 69 70 103 118
RSQUAREBRACKET       : 48 79 80 81 82 83 84
SET                  : 31 32
SETVARIABLE          : 
STATIC               : 
STRING               : 74 80 86
STRUCT               : 
SWITCH               : 54
TRUE                 : 112
TYPEALIAS            : 
VALUESTYPE           : 
VAR                  : 72
VARIABLE             : 28 29 30 31 32 33 34 35 36 37 39 40 43 44 45 45 46 47 54 61 62 63 64 105 118
WHILE                : 52 53
WSTRING              : 115
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4 18 41 42
assignment_statement_type : 5 19
break_statement      : 
caso                 : 54 55
collection_block     : 30 31 32 33
comment              : 15 27
cuerpo_caso          : 55 56 56
data_collection_type : 30
data_diamond_type    : 31
data_type            : 36 37 38 39 40 63 64 65
empty                : 26 62 67 70 121
expression           : 28 34 39 49 50 51 52 53 55 56 57 68 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 104 119 120
for_statement        : 14 25
function_arguments   : 118 119
function_call        : 9 107
function_declaration : 59
function_declaration_empty : 60
function_general     : 8
function_init        : 10
function_parameters  : 61 63 66 69
function_return_type : 61 62
functionbody         : 16 17
functionstatements   : 16 61 62
if_statement         : 7 21
import_statement     : 13 24
key_value            : 109 110
multiple_assign      : 41
multiple_variables   : 38 46
print_statement      : 6 20
program              : 0
return_statement     : 61 62
statement            : 2 3 58
statements           : 1 2 44 45 50 51 51 52 53 69 70
switch_statement     : 12 23
type                 : 106 108 111 117 117
types                : 48 108 109
variable_declarator  : 28 29 30 31 32 33 36 37 38 39 40
while_statement      : 11 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    INIT            reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    REPEAT          reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    IMPORT          reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    COMMENT         reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACES         reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment_statement .

    VARIABLE        reduce using rule 4 (statement -> assignment_statement .)
    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    INIT            reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)
    REPEAT          reduce using rule 4 (statement -> assignment_statement .)
    SWITCH          reduce using rule 4 (statement -> assignment_statement .)
    IMPORT          reduce using rule 4 (statement -> assignment_statement .)
    FOR             reduce using rule 4 (statement -> assignment_statement .)
    COMMENT         reduce using rule 4 (statement -> assignment_statement .)
    LET             reduce using rule 4 (statement -> assignment_statement .)
    VAR             reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACES         reduce using rule 4 (statement -> assignment_statement .)
    DEFAULT         reduce using rule 4 (statement -> assignment_statement .)
    CASE            reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> assignment_statement_type .

    VARIABLE        reduce using rule 5 (statement -> assignment_statement_type .)
    PRINT           reduce using rule 5 (statement -> assignment_statement_type .)
    IF              reduce using rule 5 (statement -> assignment_statement_type .)
    INIT            reduce using rule 5 (statement -> assignment_statement_type .)
    WHILE           reduce using rule 5 (statement -> assignment_statement_type .)
    REPEAT          reduce using rule 5 (statement -> assignment_statement_type .)
    SWITCH          reduce using rule 5 (statement -> assignment_statement_type .)
    IMPORT          reduce using rule 5 (statement -> assignment_statement_type .)
    FOR             reduce using rule 5 (statement -> assignment_statement_type .)
    COMMENT         reduce using rule 5 (statement -> assignment_statement_type .)
    LET             reduce using rule 5 (statement -> assignment_statement_type .)
    VAR             reduce using rule 5 (statement -> assignment_statement_type .)
    FUNC            reduce using rule 5 (statement -> assignment_statement_type .)
    $end            reduce using rule 5 (statement -> assignment_statement_type .)
    RBRACES         reduce using rule 5 (statement -> assignment_statement_type .)
    DEFAULT         reduce using rule 5 (statement -> assignment_statement_type .)
    CASE            reduce using rule 5 (statement -> assignment_statement_type .)


state 6

    (6) statement -> print_statement .

    VARIABLE        reduce using rule 6 (statement -> print_statement .)
    PRINT           reduce using rule 6 (statement -> print_statement .)
    IF              reduce using rule 6 (statement -> print_statement .)
    INIT            reduce using rule 6 (statement -> print_statement .)
    WHILE           reduce using rule 6 (statement -> print_statement .)
    REPEAT          reduce using rule 6 (statement -> print_statement .)
    SWITCH          reduce using rule 6 (statement -> print_statement .)
    IMPORT          reduce using rule 6 (statement -> print_statement .)
    FOR             reduce using rule 6 (statement -> print_statement .)
    COMMENT         reduce using rule 6 (statement -> print_statement .)
    LET             reduce using rule 6 (statement -> print_statement .)
    VAR             reduce using rule 6 (statement -> print_statement .)
    FUNC            reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)
    RBRACES         reduce using rule 6 (statement -> print_statement .)
    DEFAULT         reduce using rule 6 (statement -> print_statement .)
    CASE            reduce using rule 6 (statement -> print_statement .)


state 7

    (7) statement -> if_statement .

    VARIABLE        reduce using rule 7 (statement -> if_statement .)
    PRINT           reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    INIT            reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    REPEAT          reduce using rule 7 (statement -> if_statement .)
    SWITCH          reduce using rule 7 (statement -> if_statement .)
    IMPORT          reduce using rule 7 (statement -> if_statement .)
    FOR             reduce using rule 7 (statement -> if_statement .)
    COMMENT         reduce using rule 7 (statement -> if_statement .)
    LET             reduce using rule 7 (statement -> if_statement .)
    VAR             reduce using rule 7 (statement -> if_statement .)
    FUNC            reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACES         reduce using rule 7 (statement -> if_statement .)
    DEFAULT         reduce using rule 7 (statement -> if_statement .)
    CASE            reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> function_general .

    VARIABLE        reduce using rule 8 (statement -> function_general .)
    PRINT           reduce using rule 8 (statement -> function_general .)
    IF              reduce using rule 8 (statement -> function_general .)
    INIT            reduce using rule 8 (statement -> function_general .)
    WHILE           reduce using rule 8 (statement -> function_general .)
    REPEAT          reduce using rule 8 (statement -> function_general .)
    SWITCH          reduce using rule 8 (statement -> function_general .)
    IMPORT          reduce using rule 8 (statement -> function_general .)
    FOR             reduce using rule 8 (statement -> function_general .)
    COMMENT         reduce using rule 8 (statement -> function_general .)
    LET             reduce using rule 8 (statement -> function_general .)
    VAR             reduce using rule 8 (statement -> function_general .)
    FUNC            reduce using rule 8 (statement -> function_general .)
    $end            reduce using rule 8 (statement -> function_general .)
    RBRACES         reduce using rule 8 (statement -> function_general .)
    DEFAULT         reduce using rule 8 (statement -> function_general .)
    CASE            reduce using rule 8 (statement -> function_general .)


state 9

    (9) statement -> function_call .

    VARIABLE        reduce using rule 9 (statement -> function_call .)
    PRINT           reduce using rule 9 (statement -> function_call .)
    IF              reduce using rule 9 (statement -> function_call .)
    INIT            reduce using rule 9 (statement -> function_call .)
    WHILE           reduce using rule 9 (statement -> function_call .)
    REPEAT          reduce using rule 9 (statement -> function_call .)
    SWITCH          reduce using rule 9 (statement -> function_call .)
    IMPORT          reduce using rule 9 (statement -> function_call .)
    FOR             reduce using rule 9 (statement -> function_call .)
    COMMENT         reduce using rule 9 (statement -> function_call .)
    LET             reduce using rule 9 (statement -> function_call .)
    VAR             reduce using rule 9 (statement -> function_call .)
    FUNC            reduce using rule 9 (statement -> function_call .)
    $end            reduce using rule 9 (statement -> function_call .)
    RBRACES         reduce using rule 9 (statement -> function_call .)


state 10

    (10) statement -> function_init .

    VARIABLE        reduce using rule 10 (statement -> function_init .)
    PRINT           reduce using rule 10 (statement -> function_init .)
    IF              reduce using rule 10 (statement -> function_init .)
    INIT            reduce using rule 10 (statement -> function_init .)
    WHILE           reduce using rule 10 (statement -> function_init .)
    REPEAT          reduce using rule 10 (statement -> function_init .)
    SWITCH          reduce using rule 10 (statement -> function_init .)
    IMPORT          reduce using rule 10 (statement -> function_init .)
    FOR             reduce using rule 10 (statement -> function_init .)
    COMMENT         reduce using rule 10 (statement -> function_init .)
    LET             reduce using rule 10 (statement -> function_init .)
    VAR             reduce using rule 10 (statement -> function_init .)
    FUNC            reduce using rule 10 (statement -> function_init .)
    $end            reduce using rule 10 (statement -> function_init .)
    RBRACES         reduce using rule 10 (statement -> function_init .)
    DEFAULT         reduce using rule 10 (statement -> function_init .)
    CASE            reduce using rule 10 (statement -> function_init .)


state 11

    (11) statement -> while_statement .

    VARIABLE        reduce using rule 11 (statement -> while_statement .)
    PRINT           reduce using rule 11 (statement -> while_statement .)
    IF              reduce using rule 11 (statement -> while_statement .)
    INIT            reduce using rule 11 (statement -> while_statement .)
    WHILE           reduce using rule 11 (statement -> while_statement .)
    REPEAT          reduce using rule 11 (statement -> while_statement .)
    SWITCH          reduce using rule 11 (statement -> while_statement .)
    IMPORT          reduce using rule 11 (statement -> while_statement .)
    FOR             reduce using rule 11 (statement -> while_statement .)
    COMMENT         reduce using rule 11 (statement -> while_statement .)
    LET             reduce using rule 11 (statement -> while_statement .)
    VAR             reduce using rule 11 (statement -> while_statement .)
    FUNC            reduce using rule 11 (statement -> while_statement .)
    $end            reduce using rule 11 (statement -> while_statement .)
    RBRACES         reduce using rule 11 (statement -> while_statement .)
    DEFAULT         reduce using rule 11 (statement -> while_statement .)
    CASE            reduce using rule 11 (statement -> while_statement .)


state 12

    (12) statement -> switch_statement .

    VARIABLE        reduce using rule 12 (statement -> switch_statement .)
    PRINT           reduce using rule 12 (statement -> switch_statement .)
    IF              reduce using rule 12 (statement -> switch_statement .)
    INIT            reduce using rule 12 (statement -> switch_statement .)
    WHILE           reduce using rule 12 (statement -> switch_statement .)
    REPEAT          reduce using rule 12 (statement -> switch_statement .)
    SWITCH          reduce using rule 12 (statement -> switch_statement .)
    IMPORT          reduce using rule 12 (statement -> switch_statement .)
    FOR             reduce using rule 12 (statement -> switch_statement .)
    COMMENT         reduce using rule 12 (statement -> switch_statement .)
    LET             reduce using rule 12 (statement -> switch_statement .)
    VAR             reduce using rule 12 (statement -> switch_statement .)
    FUNC            reduce using rule 12 (statement -> switch_statement .)
    $end            reduce using rule 12 (statement -> switch_statement .)
    RBRACES         reduce using rule 12 (statement -> switch_statement .)
    DEFAULT         reduce using rule 12 (statement -> switch_statement .)
    CASE            reduce using rule 12 (statement -> switch_statement .)


state 13

    (13) statement -> import_statement .

    VARIABLE        reduce using rule 13 (statement -> import_statement .)
    PRINT           reduce using rule 13 (statement -> import_statement .)
    IF              reduce using rule 13 (statement -> import_statement .)
    INIT            reduce using rule 13 (statement -> import_statement .)
    WHILE           reduce using rule 13 (statement -> import_statement .)
    REPEAT          reduce using rule 13 (statement -> import_statement .)
    SWITCH          reduce using rule 13 (statement -> import_statement .)
    IMPORT          reduce using rule 13 (statement -> import_statement .)
    FOR             reduce using rule 13 (statement -> import_statement .)
    COMMENT         reduce using rule 13 (statement -> import_statement .)
    LET             reduce using rule 13 (statement -> import_statement .)
    VAR             reduce using rule 13 (statement -> import_statement .)
    FUNC            reduce using rule 13 (statement -> import_statement .)
    $end            reduce using rule 13 (statement -> import_statement .)
    RBRACES         reduce using rule 13 (statement -> import_statement .)
    DEFAULT         reduce using rule 13 (statement -> import_statement .)
    CASE            reduce using rule 13 (statement -> import_statement .)


state 14

    (14) statement -> for_statement .

    VARIABLE        reduce using rule 14 (statement -> for_statement .)
    PRINT           reduce using rule 14 (statement -> for_statement .)
    IF              reduce using rule 14 (statement -> for_statement .)
    INIT            reduce using rule 14 (statement -> for_statement .)
    WHILE           reduce using rule 14 (statement -> for_statement .)
    REPEAT          reduce using rule 14 (statement -> for_statement .)
    SWITCH          reduce using rule 14 (statement -> for_statement .)
    IMPORT          reduce using rule 14 (statement -> for_statement .)
    FOR             reduce using rule 14 (statement -> for_statement .)
    COMMENT         reduce using rule 14 (statement -> for_statement .)
    LET             reduce using rule 14 (statement -> for_statement .)
    VAR             reduce using rule 14 (statement -> for_statement .)
    FUNC            reduce using rule 14 (statement -> for_statement .)
    $end            reduce using rule 14 (statement -> for_statement .)
    RBRACES         reduce using rule 14 (statement -> for_statement .)
    DEFAULT         reduce using rule 14 (statement -> for_statement .)
    CASE            reduce using rule 14 (statement -> for_statement .)


state 15

    (15) statement -> comment .

    VARIABLE        reduce using rule 15 (statement -> comment .)
    PRINT           reduce using rule 15 (statement -> comment .)
    IF              reduce using rule 15 (statement -> comment .)
    INIT            reduce using rule 15 (statement -> comment .)
    WHILE           reduce using rule 15 (statement -> comment .)
    REPEAT          reduce using rule 15 (statement -> comment .)
    SWITCH          reduce using rule 15 (statement -> comment .)
    IMPORT          reduce using rule 15 (statement -> comment .)
    FOR             reduce using rule 15 (statement -> comment .)
    COMMENT         reduce using rule 15 (statement -> comment .)
    LET             reduce using rule 15 (statement -> comment .)
    VAR             reduce using rule 15 (statement -> comment .)
    FUNC            reduce using rule 15 (statement -> comment .)
    $end            reduce using rule 15 (statement -> comment .)
    RBRACES         reduce using rule 15 (statement -> comment .)
    DEFAULT         reduce using rule 15 (statement -> comment .)
    CASE            reduce using rule 15 (statement -> comment .)


state 16

    (28) assignment_statement -> variable_declarator . VARIABLE ASSIGN expression
    (29) assignment_statement -> variable_declarator . VARIABLE ASSIGN READLN
    (30) assignment_statement -> variable_declarator . VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> variable_declarator . VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> variable_declarator . VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> variable_declarator . VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (36) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type
    (37) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> variable_declarator . multiple_variables COLON data_type
    (39) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> variable_declarator . VARIABLE COLON data_type ASSIGN READLN
    (46) multiple_variables -> . multiple_variables COMMA VARIABLE
    (47) multiple_variables -> . VARIABLE

    VARIABLE        shift and go to state 33

    multiple_variables             shift and go to state 34

state 17

    (34) assignment_statement -> VARIABLE . ASSIGN expression
    (35) assignment_statement -> VARIABLE . ASSIGN READLN
    (118) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    ASSIGN          shift and go to state 35
    LPAREN          shift and go to state 36


state 18

    (49) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 37


state 19

    (50) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> IF . LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LPAREN          shift and go to state 38


state 20

    (59) function_general -> function_declaration .

    VARIABLE        reduce using rule 59 (function_general -> function_declaration .)
    PRINT           reduce using rule 59 (function_general -> function_declaration .)
    IF              reduce using rule 59 (function_general -> function_declaration .)
    INIT            reduce using rule 59 (function_general -> function_declaration .)
    WHILE           reduce using rule 59 (function_general -> function_declaration .)
    REPEAT          reduce using rule 59 (function_general -> function_declaration .)
    SWITCH          reduce using rule 59 (function_general -> function_declaration .)
    IMPORT          reduce using rule 59 (function_general -> function_declaration .)
    FOR             reduce using rule 59 (function_general -> function_declaration .)
    COMMENT         reduce using rule 59 (function_general -> function_declaration .)
    LET             reduce using rule 59 (function_general -> function_declaration .)
    VAR             reduce using rule 59 (function_general -> function_declaration .)
    FUNC            reduce using rule 59 (function_general -> function_declaration .)
    $end            reduce using rule 59 (function_general -> function_declaration .)
    RBRACES         reduce using rule 59 (function_general -> function_declaration .)
    DEFAULT         reduce using rule 59 (function_general -> function_declaration .)
    CASE            reduce using rule 59 (function_general -> function_declaration .)


state 21

    (60) function_general -> function_declaration_empty .

    VARIABLE        reduce using rule 60 (function_general -> function_declaration_empty .)
    PRINT           reduce using rule 60 (function_general -> function_declaration_empty .)
    IF              reduce using rule 60 (function_general -> function_declaration_empty .)
    INIT            reduce using rule 60 (function_general -> function_declaration_empty .)
    WHILE           reduce using rule 60 (function_general -> function_declaration_empty .)
    REPEAT          reduce using rule 60 (function_general -> function_declaration_empty .)
    SWITCH          reduce using rule 60 (function_general -> function_declaration_empty .)
    IMPORT          reduce using rule 60 (function_general -> function_declaration_empty .)
    FOR             reduce using rule 60 (function_general -> function_declaration_empty .)
    COMMENT         reduce using rule 60 (function_general -> function_declaration_empty .)
    LET             reduce using rule 60 (function_general -> function_declaration_empty .)
    VAR             reduce using rule 60 (function_general -> function_declaration_empty .)
    FUNC            reduce using rule 60 (function_general -> function_declaration_empty .)
    $end            reduce using rule 60 (function_general -> function_declaration_empty .)
    RBRACES         reduce using rule 60 (function_general -> function_declaration_empty .)
    DEFAULT         reduce using rule 60 (function_general -> function_declaration_empty .)
    CASE            reduce using rule 60 (function_general -> function_declaration_empty .)


state 22

    (69) function_init -> INIT . LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> INIT . LPAREN empty RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 39


state 23

    (52) while_statement -> WHILE . LPAREN expression RPAREN LBRACES statements RBRACES

    LPAREN          shift and go to state 40


state 24

    (53) while_statement -> REPEAT . LBRACES statements RBRACES WHILE LPAREN expression RPAREN

    LBRACES         shift and go to state 41


state 25

    (54) switch_statement -> SWITCH . VARIABLE LBRACES caso RBRACES

    VARIABLE        shift and go to state 42


state 26

    (43) import_statement -> IMPORT . VARIABLE

    VARIABLE        shift and go to state 43


state 27

    (44) for_statement -> FOR . VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> FOR . VARIABLE IN VARIABLE LBRACES statements RBRACES

    VARIABLE        shift and go to state 44


state 28

    (123) comment -> COMMENT .

    VARIABLE        reduce using rule 123 (comment -> COMMENT .)
    PRINT           reduce using rule 123 (comment -> COMMENT .)
    IF              reduce using rule 123 (comment -> COMMENT .)
    INIT            reduce using rule 123 (comment -> COMMENT .)
    WHILE           reduce using rule 123 (comment -> COMMENT .)
    REPEAT          reduce using rule 123 (comment -> COMMENT .)
    SWITCH          reduce using rule 123 (comment -> COMMENT .)
    IMPORT          reduce using rule 123 (comment -> COMMENT .)
    FOR             reduce using rule 123 (comment -> COMMENT .)
    COMMENT         reduce using rule 123 (comment -> COMMENT .)
    LET             reduce using rule 123 (comment -> COMMENT .)
    VAR             reduce using rule 123 (comment -> COMMENT .)
    FUNC            reduce using rule 123 (comment -> COMMENT .)
    $end            reduce using rule 123 (comment -> COMMENT .)
    RBRACES         reduce using rule 123 (comment -> COMMENT .)
    DEFAULT         reduce using rule 123 (comment -> COMMENT .)
    CASE            reduce using rule 123 (comment -> COMMENT .)
    RETURN          reduce using rule 123 (comment -> COMMENT .)


state 29

    (71) variable_declarator -> LET .

    VARIABLE        reduce using rule 71 (variable_declarator -> LET .)


state 30

    (72) variable_declarator -> VAR .

    VARIABLE        reduce using rule 72 (variable_declarator -> VAR .)


state 31

    (61) function_declaration -> FUNC . VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> FUNC . VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 45


state 32

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    INIT            reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    COMMENT         reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACES         reduce using rule 2 (statements -> statements statement .)


state 33

    (28) assignment_statement -> variable_declarator VARIABLE . ASSIGN expression
    (29) assignment_statement -> variable_declarator VARIABLE . ASSIGN READLN
    (30) assignment_statement -> variable_declarator VARIABLE . COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> variable_declarator VARIABLE . COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> variable_declarator VARIABLE . COLON SET ASSIGN collection_block
    (33) assignment_statement -> variable_declarator VARIABLE . COLON DICTIONARYTYPE ASSIGN collection_block
    (36) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type
    (37) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type OPTIONALVARIABLE
    (39) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type ASSIGN expression
    (40) assignment_statement_type -> variable_declarator VARIABLE . COLON data_type ASSIGN READLN
    (47) multiple_variables -> VARIABLE .

  ! shift/reduce conflict for COLON resolved as shift
    ASSIGN          shift and go to state 46
    COLON           shift and go to state 47
    COMMA           reduce using rule 47 (multiple_variables -> VARIABLE .)

  ! COLON           [ reduce using rule 47 (multiple_variables -> VARIABLE .) ]


state 34

    (38) assignment_statement_type -> variable_declarator multiple_variables . COLON data_type
    (46) multiple_variables -> multiple_variables . COMMA VARIABLE

    COLON           shift and go to state 48
    COMMA           shift and go to state 49


state 35

    (34) assignment_statement -> VARIABLE ASSIGN . expression
    (35) assignment_statement -> VARIABLE ASSIGN . READLN
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    READLN          shift and go to state 52
    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 51
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 36

    (118) function_call -> VARIABLE LPAREN . function_arguments RPAREN
    (119) function_arguments -> . function_arguments COMMA expression
    (120) function_arguments -> . expression
    (121) function_arguments -> . empty
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (122) empty -> .
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    function_arguments             shift and go to state 62
    expression                     shift and go to state 63
    empty                          shift and go to state 64
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 37

    (49) print_statement -> PRINT LPAREN . expression RPAREN
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 65
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 38

    (50) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> IF LPAREN . expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 66
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 39

    (69) function_init -> INIT LPAREN . function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> INIT LPAREN . empty RPAREN LBRACES statements RBRACES
    (63) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (64) function_parameters -> . VARIABLE COLON data_type
    (122) empty -> .

    VARIABLE        shift and go to state 69
    RPAREN          reduce using rule 122 (empty -> .)

    function_parameters            shift and go to state 67
    empty                          shift and go to state 68

state 40

    (52) while_statement -> WHILE LPAREN . expression RPAREN LBRACES statements RBRACES
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 70
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 41

    (53) while_statement -> REPEAT LBRACES . statements RBRACES WHILE LPAREN expression RPAREN
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 71
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 42

    (54) switch_statement -> SWITCH VARIABLE . LBRACES caso RBRACES

    LBRACES         shift and go to state 72


state 43

    (43) import_statement -> IMPORT VARIABLE .

    VARIABLE        reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    PRINT           reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    IF              reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    INIT            reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    WHILE           reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    REPEAT          reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    SWITCH          reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    IMPORT          reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    FOR             reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    COMMENT         reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    LET             reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    VAR             reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    FUNC            reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    $end            reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    RBRACES         reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    DEFAULT         reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    CASE            reduce using rule 43 (import_statement -> IMPORT VARIABLE .)
    RETURN          reduce using rule 43 (import_statement -> IMPORT VARIABLE .)


state 44

    (44) for_statement -> FOR VARIABLE . IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> FOR VARIABLE . IN VARIABLE LBRACES statements RBRACES

    IN              shift and go to state 73


state 45

    (61) function_declaration -> FUNC VARIABLE . LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> FUNC VARIABLE . LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 74


state 46

    (28) assignment_statement -> variable_declarator VARIABLE ASSIGN . expression
    (29) assignment_statement -> variable_declarator VARIABLE ASSIGN . READLN
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    READLN          shift and go to state 76
    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 75
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 47

    (30) assignment_statement -> variable_declarator VARIABLE COLON . data_collection_type ASSIGN collection_block
    (31) assignment_statement -> variable_declarator VARIABLE COLON . SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> variable_declarator VARIABLE COLON . SET ASSIGN collection_block
    (33) assignment_statement -> variable_declarator VARIABLE COLON . DICTIONARYTYPE ASSIGN collection_block
    (36) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type
    (37) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type OPTIONALVARIABLE
    (39) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type ASSIGN expression
    (40) assignment_statement_type -> variable_declarator VARIABLE COLON . data_type ASSIGN READLN
    (79) data_collection_type -> . LSQUAREBRACKET INTEGER RSQUAREBRACKET
    (80) data_collection_type -> . LSQUAREBRACKET STRING RSQUAREBRACKET
    (81) data_collection_type -> . LSQUAREBRACKET BOOLEAN RSQUAREBRACKET
    (82) data_collection_type -> . LSQUAREBRACKET DOUBLE RSQUAREBRACKET
    (83) data_collection_type -> . LSQUAREBRACKET INT RSQUAREBRACKET
    (84) data_collection_type -> . LSQUAREBRACKET DICTIONARYTYPE RSQUAREBRACKET
    (73) data_type -> . INTEGER
    (74) data_type -> . STRING
    (75) data_type -> . BOOLEAN
    (76) data_type -> . DOUBLE
    (77) data_type -> . FLOAT
    (78) data_type -> . INT

    SET             shift and go to state 78
    DICTIONARYTYPE  shift and go to state 79
    LSQUAREBRACKET  shift and go to state 81
    INTEGER         shift and go to state 82
    STRING          shift and go to state 83
    BOOLEAN         shift and go to state 84
    DOUBLE          shift and go to state 85
    FLOAT           shift and go to state 87
    INT             shift and go to state 86

    data_collection_type           shift and go to state 77
    data_type                      shift and go to state 80

state 48

    (38) assignment_statement_type -> variable_declarator multiple_variables COLON . data_type
    (73) data_type -> . INTEGER
    (74) data_type -> . STRING
    (75) data_type -> . BOOLEAN
    (76) data_type -> . DOUBLE
    (77) data_type -> . FLOAT
    (78) data_type -> . INT

    INTEGER         shift and go to state 82
    STRING          shift and go to state 83
    BOOLEAN         shift and go to state 84
    DOUBLE          shift and go to state 85
    FLOAT           shift and go to state 87
    INT             shift and go to state 86

    data_type                      shift and go to state 88

state 49

    (46) multiple_variables -> multiple_variables COMMA . VARIABLE

    VARIABLE        shift and go to state 89


state 50

    (105) expression -> VARIABLE .
    (118) function_call -> VARIABLE . LPAREN function_arguments RPAREN

    PLUS            reduce using rule 105 (expression -> VARIABLE .)
    MINUS           reduce using rule 105 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 105 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 105 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 105 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 105 (expression -> VARIABLE .)
    EQUALS          reduce using rule 105 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 105 (expression -> VARIABLE .)
    AND             reduce using rule 105 (expression -> VARIABLE .)
    OR              reduce using rule 105 (expression -> VARIABLE .)
    COMMA           reduce using rule 105 (expression -> VARIABLE .)
    COLON           reduce using rule 105 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 105 (expression -> VARIABLE .)
    PRINT           reduce using rule 105 (expression -> VARIABLE .)
    IF              reduce using rule 105 (expression -> VARIABLE .)
    INIT            reduce using rule 105 (expression -> VARIABLE .)
    WHILE           reduce using rule 105 (expression -> VARIABLE .)
    REPEAT          reduce using rule 105 (expression -> VARIABLE .)
    SWITCH          reduce using rule 105 (expression -> VARIABLE .)
    IMPORT          reduce using rule 105 (expression -> VARIABLE .)
    FOR             reduce using rule 105 (expression -> VARIABLE .)
    COMMENT         reduce using rule 105 (expression -> VARIABLE .)
    LET             reduce using rule 105 (expression -> VARIABLE .)
    VAR             reduce using rule 105 (expression -> VARIABLE .)
    FUNC            reduce using rule 105 (expression -> VARIABLE .)
    $end            reduce using rule 105 (expression -> VARIABLE .)
    RBRACES         reduce using rule 105 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 105 (expression -> VARIABLE .)
    CASE            reduce using rule 105 (expression -> VARIABLE .)
    RETURN          reduce using rule 105 (expression -> VARIABLE .)
    RPAREN          reduce using rule 105 (expression -> VARIABLE .)
    LPAREN          shift and go to state 36


state 51

    (34) assignment_statement -> VARIABLE ASSIGN expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    VARIABLE        reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    INIT            reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    REPEAT          reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    IMPORT          reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    FOR             reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    COMMENT         reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    LET             reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    VAR             reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 34 (assignment_statement -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 52

    (35) assignment_statement -> VARIABLE ASSIGN READLN .

    VARIABLE        reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    PRINT           reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    IF              reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    INIT            reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    WHILE           reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    REPEAT          reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    SWITCH          reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    IMPORT          reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    FOR             reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    COMMENT         reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    LET             reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    VAR             reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    FUNC            reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    $end            reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    RBRACES         reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    DEFAULT         reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    CASE            reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)
    RETURN          reduce using rule 35 (assignment_statement -> VARIABLE ASSIGN READLN .)


state 53

    (103) expression -> LPAREN . expression RPAREN
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 102
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 54

    (104) expression -> NOT . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 103
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 55

    (106) expression -> type .

    PLUS            reduce using rule 106 (expression -> type .)
    MINUS           reduce using rule 106 (expression -> type .)
    MULTIPLY        reduce using rule 106 (expression -> type .)
    DIVIDE          reduce using rule 106 (expression -> type .)
    GREATERTHAN     reduce using rule 106 (expression -> type .)
    LESSTHAN        reduce using rule 106 (expression -> type .)
    EQUALS          reduce using rule 106 (expression -> type .)
    NOTEQUALS       reduce using rule 106 (expression -> type .)
    AND             reduce using rule 106 (expression -> type .)
    OR              reduce using rule 106 (expression -> type .)
    COMMA           reduce using rule 106 (expression -> type .)
    COLON           reduce using rule 106 (expression -> type .)
    VARIABLE        reduce using rule 106 (expression -> type .)
    PRINT           reduce using rule 106 (expression -> type .)
    IF              reduce using rule 106 (expression -> type .)
    INIT            reduce using rule 106 (expression -> type .)
    WHILE           reduce using rule 106 (expression -> type .)
    REPEAT          reduce using rule 106 (expression -> type .)
    SWITCH          reduce using rule 106 (expression -> type .)
    IMPORT          reduce using rule 106 (expression -> type .)
    FOR             reduce using rule 106 (expression -> type .)
    COMMENT         reduce using rule 106 (expression -> type .)
    LET             reduce using rule 106 (expression -> type .)
    VAR             reduce using rule 106 (expression -> type .)
    FUNC            reduce using rule 106 (expression -> type .)
    $end            reduce using rule 106 (expression -> type .)
    RBRACES         reduce using rule 106 (expression -> type .)
    DEFAULT         reduce using rule 106 (expression -> type .)
    CASE            reduce using rule 106 (expression -> type .)
    RETURN          reduce using rule 106 (expression -> type .)
    RPAREN          reduce using rule 106 (expression -> type .)


state 56

    (107) expression -> function_call .

    PLUS            reduce using rule 107 (expression -> function_call .)
    MINUS           reduce using rule 107 (expression -> function_call .)
    MULTIPLY        reduce using rule 107 (expression -> function_call .)
    DIVIDE          reduce using rule 107 (expression -> function_call .)
    GREATERTHAN     reduce using rule 107 (expression -> function_call .)
    LESSTHAN        reduce using rule 107 (expression -> function_call .)
    EQUALS          reduce using rule 107 (expression -> function_call .)
    NOTEQUALS       reduce using rule 107 (expression -> function_call .)
    AND             reduce using rule 107 (expression -> function_call .)
    OR              reduce using rule 107 (expression -> function_call .)
    COMMA           reduce using rule 107 (expression -> function_call .)
    COLON           reduce using rule 107 (expression -> function_call .)
    VARIABLE        reduce using rule 107 (expression -> function_call .)
    PRINT           reduce using rule 107 (expression -> function_call .)
    IF              reduce using rule 107 (expression -> function_call .)
    INIT            reduce using rule 107 (expression -> function_call .)
    WHILE           reduce using rule 107 (expression -> function_call .)
    REPEAT          reduce using rule 107 (expression -> function_call .)
    SWITCH          reduce using rule 107 (expression -> function_call .)
    IMPORT          reduce using rule 107 (expression -> function_call .)
    FOR             reduce using rule 107 (expression -> function_call .)
    COMMENT         reduce using rule 107 (expression -> function_call .)
    LET             reduce using rule 107 (expression -> function_call .)
    VAR             reduce using rule 107 (expression -> function_call .)
    FUNC            reduce using rule 107 (expression -> function_call .)
    $end            reduce using rule 107 (expression -> function_call .)
    RBRACES         reduce using rule 107 (expression -> function_call .)
    DEFAULT         reduce using rule 107 (expression -> function_call .)
    CASE            reduce using rule 107 (expression -> function_call .)
    RETURN          reduce using rule 107 (expression -> function_call .)
    RPAREN          reduce using rule 107 (expression -> function_call .)


state 57

    (112) type -> TRUE .

    PLUS            reduce using rule 112 (type -> TRUE .)
    MINUS           reduce using rule 112 (type -> TRUE .)
    MULTIPLY        reduce using rule 112 (type -> TRUE .)
    DIVIDE          reduce using rule 112 (type -> TRUE .)
    GREATERTHAN     reduce using rule 112 (type -> TRUE .)
    LESSTHAN        reduce using rule 112 (type -> TRUE .)
    EQUALS          reduce using rule 112 (type -> TRUE .)
    NOTEQUALS       reduce using rule 112 (type -> TRUE .)
    AND             reduce using rule 112 (type -> TRUE .)
    OR              reduce using rule 112 (type -> TRUE .)
    COMMA           reduce using rule 112 (type -> TRUE .)
    COLON           reduce using rule 112 (type -> TRUE .)
    VARIABLE        reduce using rule 112 (type -> TRUE .)
    PRINT           reduce using rule 112 (type -> TRUE .)
    IF              reduce using rule 112 (type -> TRUE .)
    INIT            reduce using rule 112 (type -> TRUE .)
    WHILE           reduce using rule 112 (type -> TRUE .)
    REPEAT          reduce using rule 112 (type -> TRUE .)
    SWITCH          reduce using rule 112 (type -> TRUE .)
    IMPORT          reduce using rule 112 (type -> TRUE .)
    FOR             reduce using rule 112 (type -> TRUE .)
    COMMENT         reduce using rule 112 (type -> TRUE .)
    LET             reduce using rule 112 (type -> TRUE .)
    VAR             reduce using rule 112 (type -> TRUE .)
    FUNC            reduce using rule 112 (type -> TRUE .)
    $end            reduce using rule 112 (type -> TRUE .)
    RBRACES         reduce using rule 112 (type -> TRUE .)
    DEFAULT         reduce using rule 112 (type -> TRUE .)
    CASE            reduce using rule 112 (type -> TRUE .)
    RETURN          reduce using rule 112 (type -> TRUE .)
    RPAREN          reduce using rule 112 (type -> TRUE .)
    RSQUAREBRACKET  reduce using rule 112 (type -> TRUE .)


state 58

    (113) type -> FALSE .

    PLUS            reduce using rule 113 (type -> FALSE .)
    MINUS           reduce using rule 113 (type -> FALSE .)
    MULTIPLY        reduce using rule 113 (type -> FALSE .)
    DIVIDE          reduce using rule 113 (type -> FALSE .)
    GREATERTHAN     reduce using rule 113 (type -> FALSE .)
    LESSTHAN        reduce using rule 113 (type -> FALSE .)
    EQUALS          reduce using rule 113 (type -> FALSE .)
    NOTEQUALS       reduce using rule 113 (type -> FALSE .)
    AND             reduce using rule 113 (type -> FALSE .)
    OR              reduce using rule 113 (type -> FALSE .)
    COMMA           reduce using rule 113 (type -> FALSE .)
    COLON           reduce using rule 113 (type -> FALSE .)
    VARIABLE        reduce using rule 113 (type -> FALSE .)
    PRINT           reduce using rule 113 (type -> FALSE .)
    IF              reduce using rule 113 (type -> FALSE .)
    INIT            reduce using rule 113 (type -> FALSE .)
    WHILE           reduce using rule 113 (type -> FALSE .)
    REPEAT          reduce using rule 113 (type -> FALSE .)
    SWITCH          reduce using rule 113 (type -> FALSE .)
    IMPORT          reduce using rule 113 (type -> FALSE .)
    FOR             reduce using rule 113 (type -> FALSE .)
    COMMENT         reduce using rule 113 (type -> FALSE .)
    LET             reduce using rule 113 (type -> FALSE .)
    VAR             reduce using rule 113 (type -> FALSE .)
    FUNC            reduce using rule 113 (type -> FALSE .)
    $end            reduce using rule 113 (type -> FALSE .)
    RBRACES         reduce using rule 113 (type -> FALSE .)
    DEFAULT         reduce using rule 113 (type -> FALSE .)
    CASE            reduce using rule 113 (type -> FALSE .)
    RETURN          reduce using rule 113 (type -> FALSE .)
    RPAREN          reduce using rule 113 (type -> FALSE .)
    RSQUAREBRACKET  reduce using rule 113 (type -> FALSE .)


state 59

    (114) type -> DECIMAL .

    PLUS            reduce using rule 114 (type -> DECIMAL .)
    MINUS           reduce using rule 114 (type -> DECIMAL .)
    MULTIPLY        reduce using rule 114 (type -> DECIMAL .)
    DIVIDE          reduce using rule 114 (type -> DECIMAL .)
    GREATERTHAN     reduce using rule 114 (type -> DECIMAL .)
    LESSTHAN        reduce using rule 114 (type -> DECIMAL .)
    EQUALS          reduce using rule 114 (type -> DECIMAL .)
    NOTEQUALS       reduce using rule 114 (type -> DECIMAL .)
    AND             reduce using rule 114 (type -> DECIMAL .)
    OR              reduce using rule 114 (type -> DECIMAL .)
    COMMA           reduce using rule 114 (type -> DECIMAL .)
    COLON           reduce using rule 114 (type -> DECIMAL .)
    VARIABLE        reduce using rule 114 (type -> DECIMAL .)
    PRINT           reduce using rule 114 (type -> DECIMAL .)
    IF              reduce using rule 114 (type -> DECIMAL .)
    INIT            reduce using rule 114 (type -> DECIMAL .)
    WHILE           reduce using rule 114 (type -> DECIMAL .)
    REPEAT          reduce using rule 114 (type -> DECIMAL .)
    SWITCH          reduce using rule 114 (type -> DECIMAL .)
    IMPORT          reduce using rule 114 (type -> DECIMAL .)
    FOR             reduce using rule 114 (type -> DECIMAL .)
    COMMENT         reduce using rule 114 (type -> DECIMAL .)
    LET             reduce using rule 114 (type -> DECIMAL .)
    VAR             reduce using rule 114 (type -> DECIMAL .)
    FUNC            reduce using rule 114 (type -> DECIMAL .)
    $end            reduce using rule 114 (type -> DECIMAL .)
    RBRACES         reduce using rule 114 (type -> DECIMAL .)
    DEFAULT         reduce using rule 114 (type -> DECIMAL .)
    CASE            reduce using rule 114 (type -> DECIMAL .)
    RETURN          reduce using rule 114 (type -> DECIMAL .)
    RPAREN          reduce using rule 114 (type -> DECIMAL .)
    RSQUAREBRACKET  reduce using rule 114 (type -> DECIMAL .)


state 60

    (115) type -> WSTRING .

    PLUS            reduce using rule 115 (type -> WSTRING .)
    MINUS           reduce using rule 115 (type -> WSTRING .)
    MULTIPLY        reduce using rule 115 (type -> WSTRING .)
    DIVIDE          reduce using rule 115 (type -> WSTRING .)
    GREATERTHAN     reduce using rule 115 (type -> WSTRING .)
    LESSTHAN        reduce using rule 115 (type -> WSTRING .)
    EQUALS          reduce using rule 115 (type -> WSTRING .)
    NOTEQUALS       reduce using rule 115 (type -> WSTRING .)
    AND             reduce using rule 115 (type -> WSTRING .)
    OR              reduce using rule 115 (type -> WSTRING .)
    COMMA           reduce using rule 115 (type -> WSTRING .)
    COLON           reduce using rule 115 (type -> WSTRING .)
    VARIABLE        reduce using rule 115 (type -> WSTRING .)
    PRINT           reduce using rule 115 (type -> WSTRING .)
    IF              reduce using rule 115 (type -> WSTRING .)
    INIT            reduce using rule 115 (type -> WSTRING .)
    WHILE           reduce using rule 115 (type -> WSTRING .)
    REPEAT          reduce using rule 115 (type -> WSTRING .)
    SWITCH          reduce using rule 115 (type -> WSTRING .)
    IMPORT          reduce using rule 115 (type -> WSTRING .)
    FOR             reduce using rule 115 (type -> WSTRING .)
    COMMENT         reduce using rule 115 (type -> WSTRING .)
    LET             reduce using rule 115 (type -> WSTRING .)
    VAR             reduce using rule 115 (type -> WSTRING .)
    FUNC            reduce using rule 115 (type -> WSTRING .)
    $end            reduce using rule 115 (type -> WSTRING .)
    RBRACES         reduce using rule 115 (type -> WSTRING .)
    DEFAULT         reduce using rule 115 (type -> WSTRING .)
    CASE            reduce using rule 115 (type -> WSTRING .)
    RETURN          reduce using rule 115 (type -> WSTRING .)
    RPAREN          reduce using rule 115 (type -> WSTRING .)
    RSQUAREBRACKET  reduce using rule 115 (type -> WSTRING .)


state 61

    (116) type -> NUMBER .

    PLUS            reduce using rule 116 (type -> NUMBER .)
    MINUS           reduce using rule 116 (type -> NUMBER .)
    MULTIPLY        reduce using rule 116 (type -> NUMBER .)
    DIVIDE          reduce using rule 116 (type -> NUMBER .)
    GREATERTHAN     reduce using rule 116 (type -> NUMBER .)
    LESSTHAN        reduce using rule 116 (type -> NUMBER .)
    EQUALS          reduce using rule 116 (type -> NUMBER .)
    NOTEQUALS       reduce using rule 116 (type -> NUMBER .)
    AND             reduce using rule 116 (type -> NUMBER .)
    OR              reduce using rule 116 (type -> NUMBER .)
    COMMA           reduce using rule 116 (type -> NUMBER .)
    COLON           reduce using rule 116 (type -> NUMBER .)
    VARIABLE        reduce using rule 116 (type -> NUMBER .)
    PRINT           reduce using rule 116 (type -> NUMBER .)
    IF              reduce using rule 116 (type -> NUMBER .)
    INIT            reduce using rule 116 (type -> NUMBER .)
    WHILE           reduce using rule 116 (type -> NUMBER .)
    REPEAT          reduce using rule 116 (type -> NUMBER .)
    SWITCH          reduce using rule 116 (type -> NUMBER .)
    IMPORT          reduce using rule 116 (type -> NUMBER .)
    FOR             reduce using rule 116 (type -> NUMBER .)
    COMMENT         reduce using rule 116 (type -> NUMBER .)
    LET             reduce using rule 116 (type -> NUMBER .)
    VAR             reduce using rule 116 (type -> NUMBER .)
    FUNC            reduce using rule 116 (type -> NUMBER .)
    $end            reduce using rule 116 (type -> NUMBER .)
    RBRACES         reduce using rule 116 (type -> NUMBER .)
    DEFAULT         reduce using rule 116 (type -> NUMBER .)
    CASE            reduce using rule 116 (type -> NUMBER .)
    RETURN          reduce using rule 116 (type -> NUMBER .)
    RPAREN          reduce using rule 116 (type -> NUMBER .)
    RSQUAREBRACKET  reduce using rule 116 (type -> NUMBER .)


state 62

    (118) function_call -> VARIABLE LPAREN function_arguments . RPAREN
    (119) function_arguments -> function_arguments . COMMA expression

    RPAREN          shift and go to state 104
    COMMA           shift and go to state 105


state 63

    (120) function_arguments -> expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 120 (function_arguments -> expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! COMMA           [ reduce using rule 120 (function_arguments -> expression .) ]


state 64

    (121) function_arguments -> empty .

    RPAREN          reduce using rule 121 (function_arguments -> empty .)
    COMMA           reduce using rule 121 (function_arguments -> empty .)


state 65

    (49) print_statement -> PRINT LPAREN expression . RPAREN
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RPAREN          shift and go to state 106
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 66

    (50) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES
    (51) if_statement -> IF LPAREN expression . RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 67

    (69) function_init -> INIT LPAREN function_parameters . RPAREN LBRACES statements RBRACES
    (63) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 109


state 68

    (70) function_init -> INIT LPAREN empty . RPAREN LBRACES statements RBRACES

    RPAREN          shift and go to state 110


state 69

    (64) function_parameters -> VARIABLE . COLON data_type

    COLON           shift and go to state 111


state 70

    (52) while_statement -> WHILE LPAREN expression . RPAREN LBRACES statements RBRACES
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RPAREN          shift and go to state 112
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 71

    (53) while_statement -> REPEAT LBRACES statements . RBRACES WHILE LPAREN expression RPAREN
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 113
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 72

    (54) switch_statement -> SWITCH VARIABLE LBRACES . caso RBRACES
    (55) caso -> . CASE expression COLON cuerpo_caso caso
    (56) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    CASE            shift and go to state 115

    caso                           shift and go to state 114

state 73

    (44) for_statement -> FOR VARIABLE IN . NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> FOR VARIABLE IN . VARIABLE LBRACES statements RBRACES

    NUMBER          shift and go to state 117
    VARIABLE        shift and go to state 116


state 74

    (61) function_declaration -> FUNC VARIABLE LPAREN . function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> FUNC VARIABLE LPAREN . empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (63) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (64) function_parameters -> . VARIABLE COLON data_type
    (122) empty -> .

    VARIABLE        shift and go to state 69
    RPAREN          reduce using rule 122 (empty -> .)

    function_parameters            shift and go to state 118
    empty                          shift and go to state 119

state 75

    (28) assignment_statement -> variable_declarator VARIABLE ASSIGN expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    VARIABLE        reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PRINT           reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IF              reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    INIT            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    WHILE           reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    REPEAT          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    IMPORT          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FOR             reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    COMMENT         reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    LET             reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    VAR             reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    $end            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RBRACES         reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    CASE            reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 28 (assignment_statement -> variable_declarator VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 76

    (29) assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .

    VARIABLE        reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    PRINT           reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    IF              reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    INIT            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    WHILE           reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    REPEAT          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    SWITCH          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    IMPORT          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    FOR             reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    COMMENT         reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    LET             reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    VAR             reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    FUNC            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    $end            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    RBRACES         reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    DEFAULT         reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    CASE            reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)
    RETURN          reduce using rule 29 (assignment_statement -> variable_declarator VARIABLE ASSIGN READLN .)


state 77

    (30) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type . ASSIGN collection_block

    ASSIGN          shift and go to state 120


state 78

    (31) assignment_statement -> variable_declarator VARIABLE COLON SET . data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> variable_declarator VARIABLE COLON SET . ASSIGN collection_block
    (85) data_diamond_type -> . LESSTHAN INTEGER GREATERTHAN
    (86) data_diamond_type -> . LESSTHAN STRING GREATERTHAN
    (87) data_diamond_type -> . LESSTHAN BOOLEAN GREATERTHAN
    (88) data_diamond_type -> . LESSTHAN DOUBLE GREATERTHAN
    (89) data_diamond_type -> . LESSTHAN INT GREATERTHAN

    ASSIGN          shift and go to state 122
    LESSTHAN        shift and go to state 123

    data_diamond_type              shift and go to state 121

state 79

    (33) assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE . ASSIGN collection_block

    ASSIGN          shift and go to state 124


state 80

    (36) assignment_statement_type -> variable_declarator VARIABLE COLON data_type .
    (37) assignment_statement_type -> variable_declarator VARIABLE COLON data_type . OPTIONALVARIABLE
    (39) assignment_statement_type -> variable_declarator VARIABLE COLON data_type . ASSIGN expression
    (40) assignment_statement_type -> variable_declarator VARIABLE COLON data_type . ASSIGN READLN

    VARIABLE        reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    PRINT           reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    IF              reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    INIT            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    WHILE           reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    REPEAT          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    SWITCH          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    IMPORT          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    FOR             reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    COMMENT         reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    LET             reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    VAR             reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    FUNC            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    $end            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    RBRACES         reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    DEFAULT         reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    CASE            reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    RETURN          reduce using rule 36 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type .)
    OPTIONALVARIABLE shift and go to state 125
    ASSIGN          shift and go to state 126


state 81

    (79) data_collection_type -> LSQUAREBRACKET . INTEGER RSQUAREBRACKET
    (80) data_collection_type -> LSQUAREBRACKET . STRING RSQUAREBRACKET
    (81) data_collection_type -> LSQUAREBRACKET . BOOLEAN RSQUAREBRACKET
    (82) data_collection_type -> LSQUAREBRACKET . DOUBLE RSQUAREBRACKET
    (83) data_collection_type -> LSQUAREBRACKET . INT RSQUAREBRACKET
    (84) data_collection_type -> LSQUAREBRACKET . DICTIONARYTYPE RSQUAREBRACKET

    INTEGER         shift and go to state 127
    STRING          shift and go to state 128
    BOOLEAN         shift and go to state 129
    DOUBLE          shift and go to state 130
    INT             shift and go to state 131
    DICTIONARYTYPE  shift and go to state 132


state 82

    (73) data_type -> INTEGER .

    OPTIONALVARIABLE reduce using rule 73 (data_type -> INTEGER .)
    ASSIGN          reduce using rule 73 (data_type -> INTEGER .)
    VARIABLE        reduce using rule 73 (data_type -> INTEGER .)
    PRINT           reduce using rule 73 (data_type -> INTEGER .)
    IF              reduce using rule 73 (data_type -> INTEGER .)
    INIT            reduce using rule 73 (data_type -> INTEGER .)
    WHILE           reduce using rule 73 (data_type -> INTEGER .)
    REPEAT          reduce using rule 73 (data_type -> INTEGER .)
    SWITCH          reduce using rule 73 (data_type -> INTEGER .)
    IMPORT          reduce using rule 73 (data_type -> INTEGER .)
    FOR             reduce using rule 73 (data_type -> INTEGER .)
    COMMENT         reduce using rule 73 (data_type -> INTEGER .)
    LET             reduce using rule 73 (data_type -> INTEGER .)
    VAR             reduce using rule 73 (data_type -> INTEGER .)
    FUNC            reduce using rule 73 (data_type -> INTEGER .)
    $end            reduce using rule 73 (data_type -> INTEGER .)
    RBRACES         reduce using rule 73 (data_type -> INTEGER .)
    DEFAULT         reduce using rule 73 (data_type -> INTEGER .)
    CASE            reduce using rule 73 (data_type -> INTEGER .)
    RETURN          reduce using rule 73 (data_type -> INTEGER .)
    RPAREN          reduce using rule 73 (data_type -> INTEGER .)
    COMMA           reduce using rule 73 (data_type -> INTEGER .)
    LBRACES         reduce using rule 73 (data_type -> INTEGER .)


state 83

    (74) data_type -> STRING .

    OPTIONALVARIABLE reduce using rule 74 (data_type -> STRING .)
    ASSIGN          reduce using rule 74 (data_type -> STRING .)
    VARIABLE        reduce using rule 74 (data_type -> STRING .)
    PRINT           reduce using rule 74 (data_type -> STRING .)
    IF              reduce using rule 74 (data_type -> STRING .)
    INIT            reduce using rule 74 (data_type -> STRING .)
    WHILE           reduce using rule 74 (data_type -> STRING .)
    REPEAT          reduce using rule 74 (data_type -> STRING .)
    SWITCH          reduce using rule 74 (data_type -> STRING .)
    IMPORT          reduce using rule 74 (data_type -> STRING .)
    FOR             reduce using rule 74 (data_type -> STRING .)
    COMMENT         reduce using rule 74 (data_type -> STRING .)
    LET             reduce using rule 74 (data_type -> STRING .)
    VAR             reduce using rule 74 (data_type -> STRING .)
    FUNC            reduce using rule 74 (data_type -> STRING .)
    $end            reduce using rule 74 (data_type -> STRING .)
    RBRACES         reduce using rule 74 (data_type -> STRING .)
    DEFAULT         reduce using rule 74 (data_type -> STRING .)
    CASE            reduce using rule 74 (data_type -> STRING .)
    RETURN          reduce using rule 74 (data_type -> STRING .)
    RPAREN          reduce using rule 74 (data_type -> STRING .)
    COMMA           reduce using rule 74 (data_type -> STRING .)
    LBRACES         reduce using rule 74 (data_type -> STRING .)


state 84

    (75) data_type -> BOOLEAN .

    OPTIONALVARIABLE reduce using rule 75 (data_type -> BOOLEAN .)
    ASSIGN          reduce using rule 75 (data_type -> BOOLEAN .)
    VARIABLE        reduce using rule 75 (data_type -> BOOLEAN .)
    PRINT           reduce using rule 75 (data_type -> BOOLEAN .)
    IF              reduce using rule 75 (data_type -> BOOLEAN .)
    INIT            reduce using rule 75 (data_type -> BOOLEAN .)
    WHILE           reduce using rule 75 (data_type -> BOOLEAN .)
    REPEAT          reduce using rule 75 (data_type -> BOOLEAN .)
    SWITCH          reduce using rule 75 (data_type -> BOOLEAN .)
    IMPORT          reduce using rule 75 (data_type -> BOOLEAN .)
    FOR             reduce using rule 75 (data_type -> BOOLEAN .)
    COMMENT         reduce using rule 75 (data_type -> BOOLEAN .)
    LET             reduce using rule 75 (data_type -> BOOLEAN .)
    VAR             reduce using rule 75 (data_type -> BOOLEAN .)
    FUNC            reduce using rule 75 (data_type -> BOOLEAN .)
    $end            reduce using rule 75 (data_type -> BOOLEAN .)
    RBRACES         reduce using rule 75 (data_type -> BOOLEAN .)
    DEFAULT         reduce using rule 75 (data_type -> BOOLEAN .)
    CASE            reduce using rule 75 (data_type -> BOOLEAN .)
    RETURN          reduce using rule 75 (data_type -> BOOLEAN .)
    RPAREN          reduce using rule 75 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 75 (data_type -> BOOLEAN .)
    LBRACES         reduce using rule 75 (data_type -> BOOLEAN .)


state 85

    (76) data_type -> DOUBLE .

    OPTIONALVARIABLE reduce using rule 76 (data_type -> DOUBLE .)
    ASSIGN          reduce using rule 76 (data_type -> DOUBLE .)
    VARIABLE        reduce using rule 76 (data_type -> DOUBLE .)
    PRINT           reduce using rule 76 (data_type -> DOUBLE .)
    IF              reduce using rule 76 (data_type -> DOUBLE .)
    INIT            reduce using rule 76 (data_type -> DOUBLE .)
    WHILE           reduce using rule 76 (data_type -> DOUBLE .)
    REPEAT          reduce using rule 76 (data_type -> DOUBLE .)
    SWITCH          reduce using rule 76 (data_type -> DOUBLE .)
    IMPORT          reduce using rule 76 (data_type -> DOUBLE .)
    FOR             reduce using rule 76 (data_type -> DOUBLE .)
    COMMENT         reduce using rule 76 (data_type -> DOUBLE .)
    LET             reduce using rule 76 (data_type -> DOUBLE .)
    VAR             reduce using rule 76 (data_type -> DOUBLE .)
    FUNC            reduce using rule 76 (data_type -> DOUBLE .)
    $end            reduce using rule 76 (data_type -> DOUBLE .)
    RBRACES         reduce using rule 76 (data_type -> DOUBLE .)
    DEFAULT         reduce using rule 76 (data_type -> DOUBLE .)
    CASE            reduce using rule 76 (data_type -> DOUBLE .)
    RETURN          reduce using rule 76 (data_type -> DOUBLE .)
    RPAREN          reduce using rule 76 (data_type -> DOUBLE .)
    COMMA           reduce using rule 76 (data_type -> DOUBLE .)
    LBRACES         reduce using rule 76 (data_type -> DOUBLE .)


state 86

    (78) data_type -> INT .

    OPTIONALVARIABLE reduce using rule 78 (data_type -> INT .)
    ASSIGN          reduce using rule 78 (data_type -> INT .)
    VARIABLE        reduce using rule 78 (data_type -> INT .)
    PRINT           reduce using rule 78 (data_type -> INT .)
    IF              reduce using rule 78 (data_type -> INT .)
    INIT            reduce using rule 78 (data_type -> INT .)
    WHILE           reduce using rule 78 (data_type -> INT .)
    REPEAT          reduce using rule 78 (data_type -> INT .)
    SWITCH          reduce using rule 78 (data_type -> INT .)
    IMPORT          reduce using rule 78 (data_type -> INT .)
    FOR             reduce using rule 78 (data_type -> INT .)
    COMMENT         reduce using rule 78 (data_type -> INT .)
    LET             reduce using rule 78 (data_type -> INT .)
    VAR             reduce using rule 78 (data_type -> INT .)
    FUNC            reduce using rule 78 (data_type -> INT .)
    $end            reduce using rule 78 (data_type -> INT .)
    RBRACES         reduce using rule 78 (data_type -> INT .)
    DEFAULT         reduce using rule 78 (data_type -> INT .)
    CASE            reduce using rule 78 (data_type -> INT .)
    RETURN          reduce using rule 78 (data_type -> INT .)
    RPAREN          reduce using rule 78 (data_type -> INT .)
    COMMA           reduce using rule 78 (data_type -> INT .)
    LBRACES         reduce using rule 78 (data_type -> INT .)


state 87

    (77) data_type -> FLOAT .

    OPTIONALVARIABLE reduce using rule 77 (data_type -> FLOAT .)
    ASSIGN          reduce using rule 77 (data_type -> FLOAT .)
    VARIABLE        reduce using rule 77 (data_type -> FLOAT .)
    PRINT           reduce using rule 77 (data_type -> FLOAT .)
    IF              reduce using rule 77 (data_type -> FLOAT .)
    INIT            reduce using rule 77 (data_type -> FLOAT .)
    WHILE           reduce using rule 77 (data_type -> FLOAT .)
    REPEAT          reduce using rule 77 (data_type -> FLOAT .)
    SWITCH          reduce using rule 77 (data_type -> FLOAT .)
    IMPORT          reduce using rule 77 (data_type -> FLOAT .)
    FOR             reduce using rule 77 (data_type -> FLOAT .)
    COMMENT         reduce using rule 77 (data_type -> FLOAT .)
    LET             reduce using rule 77 (data_type -> FLOAT .)
    VAR             reduce using rule 77 (data_type -> FLOAT .)
    FUNC            reduce using rule 77 (data_type -> FLOAT .)
    $end            reduce using rule 77 (data_type -> FLOAT .)
    RBRACES         reduce using rule 77 (data_type -> FLOAT .)
    DEFAULT         reduce using rule 77 (data_type -> FLOAT .)
    CASE            reduce using rule 77 (data_type -> FLOAT .)
    RETURN          reduce using rule 77 (data_type -> FLOAT .)
    RPAREN          reduce using rule 77 (data_type -> FLOAT .)
    COMMA           reduce using rule 77 (data_type -> FLOAT .)
    LBRACES         reduce using rule 77 (data_type -> FLOAT .)


state 88

    (38) assignment_statement_type -> variable_declarator multiple_variables COLON data_type .

    VARIABLE        reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    PRINT           reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    IF              reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    INIT            reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    WHILE           reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    REPEAT          reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    SWITCH          reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    IMPORT          reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    FOR             reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    COMMENT         reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    LET             reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    VAR             reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    FUNC            reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    $end            reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    RBRACES         reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    DEFAULT         reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    CASE            reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)
    RETURN          reduce using rule 38 (assignment_statement_type -> variable_declarator multiple_variables COLON data_type .)


state 89

    (46) multiple_variables -> multiple_variables COMMA VARIABLE .

    COLON           reduce using rule 46 (multiple_variables -> multiple_variables COMMA VARIABLE .)
    COMMA           reduce using rule 46 (multiple_variables -> multiple_variables COMMA VARIABLE .)


state 90

    (91) expression -> expression PLUS . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 133
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 91

    (92) expression -> expression MINUS . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 134
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 92

    (93) expression -> expression MULTIPLY . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 135
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 93

    (94) expression -> expression DIVIDE . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 136
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 94

    (95) expression -> expression GREATERTHAN . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 137
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 95

    (96) expression -> expression LESSTHAN . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 138
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 96

    (97) expression -> expression EQUALS . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 139
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 97

    (98) expression -> expression NOTEQUALS . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 140
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 98

    (99) expression -> expression AND . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 141
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 99

    (100) expression -> expression OR . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 142
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 100

    (101) expression -> expression COMMA . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 143
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 101

    (102) expression -> expression COLON . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 144
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 102

    (103) expression -> LPAREN expression . RPAREN
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RPAREN          shift and go to state 145
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 103

    (104) expression -> NOT expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 104 (expression -> NOT expression .)
    PRINT           reduce using rule 104 (expression -> NOT expression .)
    IF              reduce using rule 104 (expression -> NOT expression .)
    INIT            reduce using rule 104 (expression -> NOT expression .)
    WHILE           reduce using rule 104 (expression -> NOT expression .)
    REPEAT          reduce using rule 104 (expression -> NOT expression .)
    SWITCH          reduce using rule 104 (expression -> NOT expression .)
    IMPORT          reduce using rule 104 (expression -> NOT expression .)
    FOR             reduce using rule 104 (expression -> NOT expression .)
    COMMENT         reduce using rule 104 (expression -> NOT expression .)
    LET             reduce using rule 104 (expression -> NOT expression .)
    VAR             reduce using rule 104 (expression -> NOT expression .)
    FUNC            reduce using rule 104 (expression -> NOT expression .)
    $end            reduce using rule 104 (expression -> NOT expression .)
    RBRACES         reduce using rule 104 (expression -> NOT expression .)
    DEFAULT         reduce using rule 104 (expression -> NOT expression .)
    CASE            reduce using rule 104 (expression -> NOT expression .)
    RETURN          reduce using rule 104 (expression -> NOT expression .)
    RPAREN          reduce using rule 104 (expression -> NOT expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 104 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 104 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 104 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 104 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 104 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 104 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 104 (expression -> NOT expression .) ]
  ! NOTEQUALS       [ reduce using rule 104 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 104 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 104 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 104 (expression -> NOT expression .) ]
  ! COLON           [ reduce using rule 104 (expression -> NOT expression .) ]


state 104

    (118) function_call -> VARIABLE LPAREN function_arguments RPAREN .

    VARIABLE        reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PRINT           reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IF              reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    INIT            reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    WHILE           reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    REPEAT          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    SWITCH          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    IMPORT          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FOR             reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COMMENT         reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LET             reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    VAR             reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    FUNC            reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    $end            reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    PLUS            reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MINUS           reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    MULTIPLY        reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DIVIDE          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    GREATERTHAN     reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    LESSTHAN        reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    EQUALS          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    NOTEQUALS       reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    AND             reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    OR              reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COMMA           reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    COLON           reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RBRACES         reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    DEFAULT         reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    CASE            reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RETURN          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)
    RPAREN          reduce using rule 118 (function_call -> VARIABLE LPAREN function_arguments RPAREN .)


state 105

    (119) function_arguments -> function_arguments COMMA . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 146
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 106

    (49) print_statement -> PRINT LPAREN expression RPAREN .

    VARIABLE        reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    INIT            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    REPEAT          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    SWITCH          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    IMPORT          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    COMMENT         reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    LET             reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUNC            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACES         reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    CASE            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN .)


state 107

    (50) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES
    (51) if_statement -> IF LPAREN expression RPAREN . LBRACES statements RBRACES ELSE LBRACES statements RBRACES

    LBRACES         shift and go to state 147


state 108

    (69) function_init -> INIT LPAREN function_parameters RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 148


state 109

    (63) function_parameters -> function_parameters COMMA . VARIABLE COLON data_type

    VARIABLE        shift and go to state 149


state 110

    (70) function_init -> INIT LPAREN empty RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 150


state 111

    (64) function_parameters -> VARIABLE COLON . data_type
    (73) data_type -> . INTEGER
    (74) data_type -> . STRING
    (75) data_type -> . BOOLEAN
    (76) data_type -> . DOUBLE
    (77) data_type -> . FLOAT
    (78) data_type -> . INT

    INTEGER         shift and go to state 82
    STRING          shift and go to state 83
    BOOLEAN         shift and go to state 84
    DOUBLE          shift and go to state 85
    FLOAT           shift and go to state 87
    INT             shift and go to state 86

    data_type                      shift and go to state 151

state 112

    (52) while_statement -> WHILE LPAREN expression RPAREN . LBRACES statements RBRACES

    LBRACES         shift and go to state 152


state 113

    (53) while_statement -> REPEAT LBRACES statements RBRACES . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 153


state 114

    (54) switch_statement -> SWITCH VARIABLE LBRACES caso . RBRACES

    RBRACES         shift and go to state 154


state 115

    (55) caso -> CASE . expression COLON cuerpo_caso caso
    (56) caso -> CASE . expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 155
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 116

    (45) for_statement -> FOR VARIABLE IN VARIABLE . LBRACES statements RBRACES

    LBRACES         shift and go to state 156


state 117

    (44) for_statement -> FOR VARIABLE IN NUMBER . RANGE NUMBER LBRACES statements RBRACES

    RANGE           shift and go to state 157


state 118

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters . RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (63) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 109


state 119

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty . RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RPAREN          shift and go to state 159


state 120

    (30) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN . collection_block
    (48) collection_block -> . LSQUAREBRACKET types RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 161

    collection_block               shift and go to state 160

state 121

    (31) assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type . ASSIGN collection_block

    ASSIGN          shift and go to state 162


state 122

    (32) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN . collection_block
    (48) collection_block -> . LSQUAREBRACKET types RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 161

    collection_block               shift and go to state 163

state 123

    (85) data_diamond_type -> LESSTHAN . INTEGER GREATERTHAN
    (86) data_diamond_type -> LESSTHAN . STRING GREATERTHAN
    (87) data_diamond_type -> LESSTHAN . BOOLEAN GREATERTHAN
    (88) data_diamond_type -> LESSTHAN . DOUBLE GREATERTHAN
    (89) data_diamond_type -> LESSTHAN . INT GREATERTHAN

    INTEGER         shift and go to state 164
    STRING          shift and go to state 165
    BOOLEAN         shift and go to state 166
    DOUBLE          shift and go to state 167
    INT             shift and go to state 168


state 124

    (33) assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN . collection_block
    (48) collection_block -> . LSQUAREBRACKET types RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 161

    collection_block               shift and go to state 169

state 125

    (37) assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .

    VARIABLE        reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    PRINT           reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    IF              reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    INIT            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    WHILE           reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    REPEAT          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    SWITCH          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    IMPORT          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    FOR             reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    COMMENT         reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    LET             reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    VAR             reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    FUNC            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    $end            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    RBRACES         reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    DEFAULT         reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    CASE            reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)
    RETURN          reduce using rule 37 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE .)


state 126

    (39) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN . expression
    (40) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN . READLN
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    READLN          shift and go to state 171
    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 170
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 127

    (79) data_collection_type -> LSQUAREBRACKET INTEGER . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 172


state 128

    (80) data_collection_type -> LSQUAREBRACKET STRING . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 173


state 129

    (81) data_collection_type -> LSQUAREBRACKET BOOLEAN . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 174


state 130

    (82) data_collection_type -> LSQUAREBRACKET DOUBLE . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 175


state 131

    (83) data_collection_type -> LSQUAREBRACKET INT . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 176


state 132

    (84) data_collection_type -> LSQUAREBRACKET DICTIONARYTYPE . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 177


state 133

    (91) expression -> expression PLUS expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 91 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 91 (expression -> expression PLUS expression .)
    IF              reduce using rule 91 (expression -> expression PLUS expression .)
    INIT            reduce using rule 91 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 91 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 91 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 91 (expression -> expression PLUS expression .)
    IMPORT          reduce using rule 91 (expression -> expression PLUS expression .)
    FOR             reduce using rule 91 (expression -> expression PLUS expression .)
    COMMENT         reduce using rule 91 (expression -> expression PLUS expression .)
    LET             reduce using rule 91 (expression -> expression PLUS expression .)
    VAR             reduce using rule 91 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 91 (expression -> expression PLUS expression .)
    $end            reduce using rule 91 (expression -> expression PLUS expression .)
    RBRACES         reduce using rule 91 (expression -> expression PLUS expression .)
    DEFAULT         reduce using rule 91 (expression -> expression PLUS expression .)
    CASE            reduce using rule 91 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 91 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 91 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 91 (expression -> expression PLUS expression .) ]
  ! COLON           [ reduce using rule 91 (expression -> expression PLUS expression .) ]


state 134

    (92) expression -> expression MINUS expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 92 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 92 (expression -> expression MINUS expression .)
    IF              reduce using rule 92 (expression -> expression MINUS expression .)
    INIT            reduce using rule 92 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 92 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 92 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 92 (expression -> expression MINUS expression .)
    IMPORT          reduce using rule 92 (expression -> expression MINUS expression .)
    FOR             reduce using rule 92 (expression -> expression MINUS expression .)
    COMMENT         reduce using rule 92 (expression -> expression MINUS expression .)
    LET             reduce using rule 92 (expression -> expression MINUS expression .)
    VAR             reduce using rule 92 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 92 (expression -> expression MINUS expression .)
    $end            reduce using rule 92 (expression -> expression MINUS expression .)
    RBRACES         reduce using rule 92 (expression -> expression MINUS expression .)
    DEFAULT         reduce using rule 92 (expression -> expression MINUS expression .)
    CASE            reduce using rule 92 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 92 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 92 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! NOTEQUALS       [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 92 (expression -> expression MINUS expression .) ]
  ! COLON           [ reduce using rule 92 (expression -> expression MINUS expression .) ]


state 135

    (93) expression -> expression MULTIPLY expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 93 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 93 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 93 (expression -> expression MULTIPLY expression .)
    INIT            reduce using rule 93 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 93 (expression -> expression MULTIPLY expression .)
    REPEAT          reduce using rule 93 (expression -> expression MULTIPLY expression .)
    SWITCH          reduce using rule 93 (expression -> expression MULTIPLY expression .)
    IMPORT          reduce using rule 93 (expression -> expression MULTIPLY expression .)
    FOR             reduce using rule 93 (expression -> expression MULTIPLY expression .)
    COMMENT         reduce using rule 93 (expression -> expression MULTIPLY expression .)
    LET             reduce using rule 93 (expression -> expression MULTIPLY expression .)
    VAR             reduce using rule 93 (expression -> expression MULTIPLY expression .)
    FUNC            reduce using rule 93 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 93 (expression -> expression MULTIPLY expression .)
    RBRACES         reduce using rule 93 (expression -> expression MULTIPLY expression .)
    DEFAULT         reduce using rule 93 (expression -> expression MULTIPLY expression .)
    CASE            reduce using rule 93 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 93 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 93 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUALS       [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]
  ! COLON           [ reduce using rule 93 (expression -> expression MULTIPLY expression .) ]


state 136

    (94) expression -> expression DIVIDE expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 94 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 94 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 94 (expression -> expression DIVIDE expression .)
    INIT            reduce using rule 94 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 94 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 94 (expression -> expression DIVIDE expression .)
    SWITCH          reduce using rule 94 (expression -> expression DIVIDE expression .)
    IMPORT          reduce using rule 94 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 94 (expression -> expression DIVIDE expression .)
    COMMENT         reduce using rule 94 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 94 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 94 (expression -> expression DIVIDE expression .)
    FUNC            reduce using rule 94 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 94 (expression -> expression DIVIDE expression .)
    RBRACES         reduce using rule 94 (expression -> expression DIVIDE expression .)
    DEFAULT         reduce using rule 94 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 94 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 94 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 94 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUALS       [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]
  ! COLON           [ reduce using rule 94 (expression -> expression DIVIDE expression .) ]


state 137

    (95) expression -> expression GREATERTHAN expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    PRINT           reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    IF              reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    INIT            reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    WHILE           reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    REPEAT          reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    SWITCH          reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    IMPORT          reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    FOR             reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    COMMENT         reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    LET             reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    VAR             reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    FUNC            reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    $end            reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    RBRACES         reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    DEFAULT         reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    CASE            reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    RETURN          reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 95 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! EQUALS          [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]
  ! COLON           [ reduce using rule 95 (expression -> expression GREATERTHAN expression .) ]


state 138

    (96) expression -> expression LESSTHAN expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 96 (expression -> expression LESSTHAN expression .)
    PRINT           reduce using rule 96 (expression -> expression LESSTHAN expression .)
    IF              reduce using rule 96 (expression -> expression LESSTHAN expression .)
    INIT            reduce using rule 96 (expression -> expression LESSTHAN expression .)
    WHILE           reduce using rule 96 (expression -> expression LESSTHAN expression .)
    REPEAT          reduce using rule 96 (expression -> expression LESSTHAN expression .)
    SWITCH          reduce using rule 96 (expression -> expression LESSTHAN expression .)
    IMPORT          reduce using rule 96 (expression -> expression LESSTHAN expression .)
    FOR             reduce using rule 96 (expression -> expression LESSTHAN expression .)
    COMMENT         reduce using rule 96 (expression -> expression LESSTHAN expression .)
    LET             reduce using rule 96 (expression -> expression LESSTHAN expression .)
    VAR             reduce using rule 96 (expression -> expression LESSTHAN expression .)
    FUNC            reduce using rule 96 (expression -> expression LESSTHAN expression .)
    $end            reduce using rule 96 (expression -> expression LESSTHAN expression .)
    RBRACES         reduce using rule 96 (expression -> expression LESSTHAN expression .)
    DEFAULT         reduce using rule 96 (expression -> expression LESSTHAN expression .)
    CASE            reduce using rule 96 (expression -> expression LESSTHAN expression .)
    RETURN          reduce using rule 96 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 96 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! EQUALS          [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUALS       [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]
  ! COLON           [ reduce using rule 96 (expression -> expression LESSTHAN expression .) ]


state 139

    (97) expression -> expression EQUALS expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 97 (expression -> expression EQUALS expression .)
    PRINT           reduce using rule 97 (expression -> expression EQUALS expression .)
    IF              reduce using rule 97 (expression -> expression EQUALS expression .)
    INIT            reduce using rule 97 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 97 (expression -> expression EQUALS expression .)
    REPEAT          reduce using rule 97 (expression -> expression EQUALS expression .)
    SWITCH          reduce using rule 97 (expression -> expression EQUALS expression .)
    IMPORT          reduce using rule 97 (expression -> expression EQUALS expression .)
    FOR             reduce using rule 97 (expression -> expression EQUALS expression .)
    COMMENT         reduce using rule 97 (expression -> expression EQUALS expression .)
    LET             reduce using rule 97 (expression -> expression EQUALS expression .)
    VAR             reduce using rule 97 (expression -> expression EQUALS expression .)
    FUNC            reduce using rule 97 (expression -> expression EQUALS expression .)
    $end            reduce using rule 97 (expression -> expression EQUALS expression .)
    RBRACES         reduce using rule 97 (expression -> expression EQUALS expression .)
    DEFAULT         reduce using rule 97 (expression -> expression EQUALS expression .)
    CASE            reduce using rule 97 (expression -> expression EQUALS expression .)
    RETURN          reduce using rule 97 (expression -> expression EQUALS expression .)
    RPAREN          reduce using rule 97 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! COMMA           [ reduce using rule 97 (expression -> expression EQUALS expression .) ]
  ! COLON           [ reduce using rule 97 (expression -> expression EQUALS expression .) ]


state 140

    (98) expression -> expression NOTEQUALS expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    PRINT           reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    IF              reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    INIT            reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    WHILE           reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    REPEAT          reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    SWITCH          reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    IMPORT          reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    FOR             reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    COMMENT         reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    LET             reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    VAR             reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    FUNC            reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    $end            reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    RBRACES         reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    DEFAULT         reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    CASE            reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    RETURN          reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    RPAREN          reduce using rule 98 (expression -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! MINUS           [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! GREATERTHAN     [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! LESSTHAN        [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! EQUALS          [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! NOTEQUALS       [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! AND             [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! OR              [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! COMMA           [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]
  ! COLON           [ reduce using rule 98 (expression -> expression NOTEQUALS expression .) ]


state 141

    (99) expression -> expression AND expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 99 (expression -> expression AND expression .)
    PRINT           reduce using rule 99 (expression -> expression AND expression .)
    IF              reduce using rule 99 (expression -> expression AND expression .)
    INIT            reduce using rule 99 (expression -> expression AND expression .)
    WHILE           reduce using rule 99 (expression -> expression AND expression .)
    REPEAT          reduce using rule 99 (expression -> expression AND expression .)
    SWITCH          reduce using rule 99 (expression -> expression AND expression .)
    IMPORT          reduce using rule 99 (expression -> expression AND expression .)
    FOR             reduce using rule 99 (expression -> expression AND expression .)
    COMMENT         reduce using rule 99 (expression -> expression AND expression .)
    LET             reduce using rule 99 (expression -> expression AND expression .)
    VAR             reduce using rule 99 (expression -> expression AND expression .)
    FUNC            reduce using rule 99 (expression -> expression AND expression .)
    $end            reduce using rule 99 (expression -> expression AND expression .)
    RBRACES         reduce using rule 99 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 99 (expression -> expression AND expression .)
    CASE            reduce using rule 99 (expression -> expression AND expression .)
    RETURN          reduce using rule 99 (expression -> expression AND expression .)
    RPAREN          reduce using rule 99 (expression -> expression AND expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! NOTEQUALS       [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 99 (expression -> expression AND expression .) ]
  ! COLON           [ reduce using rule 99 (expression -> expression AND expression .) ]


state 142

    (100) expression -> expression OR expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 100 (expression -> expression OR expression .)
    PRINT           reduce using rule 100 (expression -> expression OR expression .)
    IF              reduce using rule 100 (expression -> expression OR expression .)
    INIT            reduce using rule 100 (expression -> expression OR expression .)
    WHILE           reduce using rule 100 (expression -> expression OR expression .)
    REPEAT          reduce using rule 100 (expression -> expression OR expression .)
    SWITCH          reduce using rule 100 (expression -> expression OR expression .)
    IMPORT          reduce using rule 100 (expression -> expression OR expression .)
    FOR             reduce using rule 100 (expression -> expression OR expression .)
    COMMENT         reduce using rule 100 (expression -> expression OR expression .)
    LET             reduce using rule 100 (expression -> expression OR expression .)
    VAR             reduce using rule 100 (expression -> expression OR expression .)
    FUNC            reduce using rule 100 (expression -> expression OR expression .)
    $end            reduce using rule 100 (expression -> expression OR expression .)
    RBRACES         reduce using rule 100 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 100 (expression -> expression OR expression .)
    CASE            reduce using rule 100 (expression -> expression OR expression .)
    RETURN          reduce using rule 100 (expression -> expression OR expression .)
    RPAREN          reduce using rule 100 (expression -> expression OR expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! NOTEQUALS       [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 100 (expression -> expression OR expression .) ]
  ! COLON           [ reduce using rule 100 (expression -> expression OR expression .) ]


state 143

    (101) expression -> expression COMMA expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 101 (expression -> expression COMMA expression .)
    PRINT           reduce using rule 101 (expression -> expression COMMA expression .)
    IF              reduce using rule 101 (expression -> expression COMMA expression .)
    INIT            reduce using rule 101 (expression -> expression COMMA expression .)
    WHILE           reduce using rule 101 (expression -> expression COMMA expression .)
    REPEAT          reduce using rule 101 (expression -> expression COMMA expression .)
    SWITCH          reduce using rule 101 (expression -> expression COMMA expression .)
    IMPORT          reduce using rule 101 (expression -> expression COMMA expression .)
    FOR             reduce using rule 101 (expression -> expression COMMA expression .)
    COMMENT         reduce using rule 101 (expression -> expression COMMA expression .)
    LET             reduce using rule 101 (expression -> expression COMMA expression .)
    VAR             reduce using rule 101 (expression -> expression COMMA expression .)
    FUNC            reduce using rule 101 (expression -> expression COMMA expression .)
    $end            reduce using rule 101 (expression -> expression COMMA expression .)
    RBRACES         reduce using rule 101 (expression -> expression COMMA expression .)
    DEFAULT         reduce using rule 101 (expression -> expression COMMA expression .)
    CASE            reduce using rule 101 (expression -> expression COMMA expression .)
    RETURN          reduce using rule 101 (expression -> expression COMMA expression .)
    RPAREN          reduce using rule 101 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! NOTEQUALS       [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 101 (expression -> expression COMMA expression .) ]
  ! COLON           [ reduce using rule 101 (expression -> expression COMMA expression .) ]


state 144

    (102) expression -> expression COLON expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    VARIABLE        reduce using rule 102 (expression -> expression COLON expression .)
    PRINT           reduce using rule 102 (expression -> expression COLON expression .)
    IF              reduce using rule 102 (expression -> expression COLON expression .)
    INIT            reduce using rule 102 (expression -> expression COLON expression .)
    WHILE           reduce using rule 102 (expression -> expression COLON expression .)
    REPEAT          reduce using rule 102 (expression -> expression COLON expression .)
    SWITCH          reduce using rule 102 (expression -> expression COLON expression .)
    IMPORT          reduce using rule 102 (expression -> expression COLON expression .)
    FOR             reduce using rule 102 (expression -> expression COLON expression .)
    COMMENT         reduce using rule 102 (expression -> expression COLON expression .)
    LET             reduce using rule 102 (expression -> expression COLON expression .)
    VAR             reduce using rule 102 (expression -> expression COLON expression .)
    FUNC            reduce using rule 102 (expression -> expression COLON expression .)
    $end            reduce using rule 102 (expression -> expression COLON expression .)
    RBRACES         reduce using rule 102 (expression -> expression COLON expression .)
    DEFAULT         reduce using rule 102 (expression -> expression COLON expression .)
    CASE            reduce using rule 102 (expression -> expression COLON expression .)
    RETURN          reduce using rule 102 (expression -> expression COLON expression .)
    RPAREN          reduce using rule 102 (expression -> expression COLON expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! PLUS            [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! MINUS           [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! GREATERTHAN     [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! LESSTHAN        [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! AND             [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! OR              [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! COMMA           [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! COLON           [ reduce using rule 102 (expression -> expression COLON expression .) ]


state 145

    (103) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    COMMENT         reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 103 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 103 (expression -> LPAREN expression RPAREN .)


state 146

    (119) function_arguments -> function_arguments COMMA expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 119 (function_arguments -> function_arguments COMMA expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! COMMA           [ reduce using rule 119 (function_arguments -> function_arguments COMMA expression .) ]


state 147

    (50) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES
    (51) if_statement -> IF LPAREN expression RPAREN LBRACES . statements RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 178
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 148

    (69) function_init -> INIT LPAREN function_parameters RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 179
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 149

    (63) function_parameters -> function_parameters COMMA VARIABLE . COLON data_type

    COLON           shift and go to state 180


state 150

    (70) function_init -> INIT LPAREN empty RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 181
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 151

    (64) function_parameters -> VARIABLE COLON data_type .

    RPAREN          reduce using rule 64 (function_parameters -> VARIABLE COLON data_type .)
    COMMA           reduce using rule 64 (function_parameters -> VARIABLE COLON data_type .)


state 152

    (52) while_statement -> WHILE LPAREN expression RPAREN LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 182
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 153

    (53) while_statement -> REPEAT LBRACES statements RBRACES WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 183


state 154

    (54) switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .

    VARIABLE        reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    PRINT           reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IF              reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    INIT            reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    WHILE           reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    REPEAT          reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    SWITCH          reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    IMPORT          reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FOR             reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    COMMENT         reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    LET             reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    VAR             reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    FUNC            reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    $end            reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RBRACES         reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    DEFAULT         reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    CASE            reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)
    RETURN          reduce using rule 54 (switch_statement -> SWITCH VARIABLE LBRACES caso RBRACES .)


state 155

    (55) caso -> CASE expression . COLON cuerpo_caso caso
    (56) caso -> CASE expression . COLON cuerpo_caso DEFAULT COLON cuerpo_caso
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    COLON           shift and go to state 184
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100


state 156

    (45) for_statement -> FOR VARIABLE IN VARIABLE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 185
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 157

    (44) for_statement -> FOR VARIABLE IN NUMBER RANGE . NUMBER LBRACES statements RBRACES

    NUMBER          shift and go to state 186


state 158

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN . function_return_type LBRACES functionstatements return_statement RBRACES
    (65) function_return_type -> . ARROW data_type
    (66) function_return_type -> . ARROW LPAREN function_parameters RPAREN
    (67) function_return_type -> . empty
    (122) empty -> .

    ARROW           shift and go to state 188
    LBRACES         reduce using rule 122 (empty -> .)

    function_return_type           shift and go to state 187
    empty                          shift and go to state 189

state 159

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN . function_return_type LBRACES functionstatements return_statement RBRACES
    (65) function_return_type -> . ARROW data_type
    (66) function_return_type -> . ARROW LPAREN function_parameters RPAREN
    (67) function_return_type -> . empty
    (122) empty -> .

    ARROW           shift and go to state 188
    LBRACES         reduce using rule 122 (empty -> .)

    empty                          shift and go to state 189
    function_return_type           shift and go to state 190

state 160

    (30) assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .

    VARIABLE        reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    PRINT           reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IF              reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    INIT            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    WHILE           reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    REPEAT          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    SWITCH          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    IMPORT          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FOR             reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    COMMENT         reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    LET             reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    VAR             reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    FUNC            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    $end            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RBRACES         reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    DEFAULT         reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    CASE            reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)
    RETURN          reduce using rule 30 (assignment_statement -> variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block .)


state 161

    (48) collection_block -> LSQUAREBRACKET . types RSQUAREBRACKET
    (108) types -> . types COMMA type
    (109) types -> . key_value COMMA types
    (110) types -> . key_value
    (111) types -> . type
    (117) key_value -> . type COLON type
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    types                          shift and go to state 191
    type                           shift and go to state 192
    key_value                      shift and go to state 193

state 162

    (31) assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN . collection_block
    (48) collection_block -> . LSQUAREBRACKET types RSQUAREBRACKET

    LSQUAREBRACKET  shift and go to state 161

    collection_block               shift and go to state 194

state 163

    (32) assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .

    VARIABLE        reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    PRINT           reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    IF              reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    INIT            reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    WHILE           reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    REPEAT          reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    SWITCH          reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    IMPORT          reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    FOR             reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    COMMENT         reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    LET             reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    VAR             reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    FUNC            reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    $end            reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    RBRACES         reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    DEFAULT         reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    CASE            reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)
    RETURN          reduce using rule 32 (assignment_statement -> variable_declarator VARIABLE COLON SET ASSIGN collection_block .)


state 164

    (85) data_diamond_type -> LESSTHAN INTEGER . GREATERTHAN

    GREATERTHAN     shift and go to state 195


state 165

    (86) data_diamond_type -> LESSTHAN STRING . GREATERTHAN

    GREATERTHAN     shift and go to state 196


state 166

    (87) data_diamond_type -> LESSTHAN BOOLEAN . GREATERTHAN

    GREATERTHAN     shift and go to state 197


state 167

    (88) data_diamond_type -> LESSTHAN DOUBLE . GREATERTHAN

    GREATERTHAN     shift and go to state 198


state 168

    (89) data_diamond_type -> LESSTHAN INT . GREATERTHAN

    GREATERTHAN     shift and go to state 199


state 169

    (33) assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .

    VARIABLE        reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    PRINT           reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    IF              reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    INIT            reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    WHILE           reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    REPEAT          reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    SWITCH          reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    IMPORT          reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    FOR             reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    COMMENT         reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    LET             reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    VAR             reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    FUNC            reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    $end            reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    RBRACES         reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    DEFAULT         reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    CASE            reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)
    RETURN          reduce using rule 33 (assignment_statement -> variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block .)


state 170

    (39) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    VARIABLE        reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    PRINT           reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    IF              reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    INIT            reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    WHILE           reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    REPEAT          reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    SWITCH          reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    IMPORT          reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    FOR             reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    COMMENT         reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    LET             reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    VAR             reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    FUNC            reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    $end            reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    RBRACES         reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    DEFAULT         reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    CASE            reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    RETURN          reduce using rule 39 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 171

    (40) assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .

    VARIABLE        reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    PRINT           reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    IF              reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    INIT            reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    WHILE           reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    REPEAT          reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    SWITCH          reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    IMPORT          reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    FOR             reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    COMMENT         reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    LET             reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    VAR             reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    FUNC            reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    $end            reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    RBRACES         reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    DEFAULT         reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    CASE            reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)
    RETURN          reduce using rule 40 (assignment_statement_type -> variable_declarator VARIABLE COLON data_type ASSIGN READLN .)


state 172

    (79) data_collection_type -> LSQUAREBRACKET INTEGER RSQUAREBRACKET .

    ASSIGN          reduce using rule 79 (data_collection_type -> LSQUAREBRACKET INTEGER RSQUAREBRACKET .)


state 173

    (80) data_collection_type -> LSQUAREBRACKET STRING RSQUAREBRACKET .

    ASSIGN          reduce using rule 80 (data_collection_type -> LSQUAREBRACKET STRING RSQUAREBRACKET .)


state 174

    (81) data_collection_type -> LSQUAREBRACKET BOOLEAN RSQUAREBRACKET .

    ASSIGN          reduce using rule 81 (data_collection_type -> LSQUAREBRACKET BOOLEAN RSQUAREBRACKET .)


state 175

    (82) data_collection_type -> LSQUAREBRACKET DOUBLE RSQUAREBRACKET .

    ASSIGN          reduce using rule 82 (data_collection_type -> LSQUAREBRACKET DOUBLE RSQUAREBRACKET .)


state 176

    (83) data_collection_type -> LSQUAREBRACKET INT RSQUAREBRACKET .

    ASSIGN          reduce using rule 83 (data_collection_type -> LSQUAREBRACKET INT RSQUAREBRACKET .)


state 177

    (84) data_collection_type -> LSQUAREBRACKET DICTIONARYTYPE RSQUAREBRACKET .

    ASSIGN          reduce using rule 84 (data_collection_type -> LSQUAREBRACKET DICTIONARYTYPE RSQUAREBRACKET .)


state 178

    (50) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES
    (51) if_statement -> IF LPAREN expression RPAREN LBRACES statements . RBRACES ELSE LBRACES statements RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 200
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 179

    (69) function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 201
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 180

    (63) function_parameters -> function_parameters COMMA VARIABLE COLON . data_type
    (73) data_type -> . INTEGER
    (74) data_type -> . STRING
    (75) data_type -> . BOOLEAN
    (76) data_type -> . DOUBLE
    (77) data_type -> . FLOAT
    (78) data_type -> . INT

    INTEGER         shift and go to state 82
    STRING          shift and go to state 83
    BOOLEAN         shift and go to state 84
    DOUBLE          shift and go to state 85
    FLOAT           shift and go to state 87
    INT             shift and go to state 86

    data_type                      shift and go to state 202

state 181

    (70) function_init -> INIT LPAREN empty RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 203
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 182

    (52) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 204
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 183

    (53) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN . expression RPAREN
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 205
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 184

    (55) caso -> CASE expression COLON . cuerpo_caso caso
    (56) caso -> CASE expression COLON . cuerpo_caso DEFAULT COLON cuerpo_caso
    (102) expression -> expression COLON . expression
    (57) cuerpo_caso -> . expression
    (58) cuerpo_caso -> . statement
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 209
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    expression                     shift and go to state 206
    cuerpo_caso                    shift and go to state 207
    statement                      shift and go to state 208
    type                           shift and go to state 55
    function_call                  shift and go to state 210
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 185

    (45) for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 211
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 186

    (44) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER . LBRACES statements RBRACES

    LBRACES         shift and go to state 212


state 187

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type . LBRACES functionstatements return_statement RBRACES

    LBRACES         shift and go to state 213


state 188

    (65) function_return_type -> ARROW . data_type
    (66) function_return_type -> ARROW . LPAREN function_parameters RPAREN
    (73) data_type -> . INTEGER
    (74) data_type -> . STRING
    (75) data_type -> . BOOLEAN
    (76) data_type -> . DOUBLE
    (77) data_type -> . FLOAT
    (78) data_type -> . INT

    LPAREN          shift and go to state 215
    INTEGER         shift and go to state 82
    STRING          shift and go to state 83
    BOOLEAN         shift and go to state 84
    DOUBLE          shift and go to state 85
    FLOAT           shift and go to state 87
    INT             shift and go to state 86

    data_type                      shift and go to state 214

state 189

    (67) function_return_type -> empty .

    LBRACES         reduce using rule 67 (function_return_type -> empty .)


state 190

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type . LBRACES functionstatements return_statement RBRACES

    LBRACES         shift and go to state 216


state 191

    (48) collection_block -> LSQUAREBRACKET types . RSQUAREBRACKET
    (108) types -> types . COMMA type

    RSQUAREBRACKET  shift and go to state 217
    COMMA           shift and go to state 218


state 192

    (111) types -> type .
    (117) key_value -> type . COLON type

    RSQUAREBRACKET  reduce using rule 111 (types -> type .)
    COMMA           reduce using rule 111 (types -> type .)
    COLON           shift and go to state 219


state 193

    (109) types -> key_value . COMMA types
    (110) types -> key_value .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 220
    RSQUAREBRACKET  reduce using rule 110 (types -> key_value .)

  ! COMMA           [ reduce using rule 110 (types -> key_value .) ]


state 194

    (31) assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .

    VARIABLE        reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    PRINT           reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    IF              reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    INIT            reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    WHILE           reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    REPEAT          reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    SWITCH          reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    IMPORT          reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    FOR             reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    COMMENT         reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    LET             reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    VAR             reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    FUNC            reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    $end            reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    RBRACES         reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    DEFAULT         reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    CASE            reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)
    RETURN          reduce using rule 31 (assignment_statement -> variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block .)


state 195

    (85) data_diamond_type -> LESSTHAN INTEGER GREATERTHAN .

    ASSIGN          reduce using rule 85 (data_diamond_type -> LESSTHAN INTEGER GREATERTHAN .)


state 196

    (86) data_diamond_type -> LESSTHAN STRING GREATERTHAN .

    ASSIGN          reduce using rule 86 (data_diamond_type -> LESSTHAN STRING GREATERTHAN .)


state 197

    (87) data_diamond_type -> LESSTHAN BOOLEAN GREATERTHAN .

    ASSIGN          reduce using rule 87 (data_diamond_type -> LESSTHAN BOOLEAN GREATERTHAN .)


state 198

    (88) data_diamond_type -> LESSTHAN DOUBLE GREATERTHAN .

    ASSIGN          reduce using rule 88 (data_diamond_type -> LESSTHAN DOUBLE GREATERTHAN .)


state 199

    (89) data_diamond_type -> LESSTHAN INT GREATERTHAN .

    ASSIGN          reduce using rule 89 (data_diamond_type -> LESSTHAN INT GREATERTHAN .)


state 200

    (50) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .
    (51) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES . ELSE LBRACES statements RBRACES

    VARIABLE        reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    COMMENT         reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    RETURN          reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES .)
    ELSE            shift and go to state 221


state 201

    (69) function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .

    VARIABLE        reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    COMMENT         reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 69 (function_init -> INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES .)


state 202

    (63) function_parameters -> function_parameters COMMA VARIABLE COLON data_type .

    RPAREN          reduce using rule 63 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)
    COMMA           reduce using rule 63 (function_parameters -> function_parameters COMMA VARIABLE COLON data_type .)


state 203

    (70) function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .

    VARIABLE        reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    COMMENT         reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 70 (function_init -> INIT LPAREN empty RPAREN LBRACES statements RBRACES .)


state 204

    (52) while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .

    VARIABLE        reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    PRINT           reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IF              reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    INIT            reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    WHILE           reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    REPEAT          reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    SWITCH          reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    IMPORT          reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FOR             reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    COMMENT         reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    LET             reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    VAR             reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    FUNC            reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    $end            reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RBRACES         reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    CASE            reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)
    RETURN          reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACES statements RBRACES .)


state 205

    (53) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression . RPAREN
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RPAREN          shift and go to state 222
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 206

    (102) expression -> expression COLON expression .
    (57) cuerpo_caso -> expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    DEFAULT         reduce using rule 57 (cuerpo_caso -> expression .)
    CASE            reduce using rule 57 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101

  ! COLON           [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! PLUS            [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! MINUS           [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! GREATERTHAN     [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! LESSTHAN        [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! AND             [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! OR              [ reduce using rule 102 (expression -> expression COLON expression .) ]
  ! COMMA           [ reduce using rule 102 (expression -> expression COLON expression .) ]


state 207

    (55) caso -> CASE expression COLON cuerpo_caso . caso
    (56) caso -> CASE expression COLON cuerpo_caso . DEFAULT COLON cuerpo_caso
    (55) caso -> . CASE expression COLON cuerpo_caso caso
    (56) caso -> . CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso

    DEFAULT         shift and go to state 224
    CASE            shift and go to state 115

    caso                           shift and go to state 223

state 208

    (58) cuerpo_caso -> statement .

    DEFAULT         reduce using rule 58 (cuerpo_caso -> statement .)
    CASE            reduce using rule 58 (cuerpo_caso -> statement .)
    RBRACES         reduce using rule 58 (cuerpo_caso -> statement .)


state 209

    (105) expression -> VARIABLE .
    (118) function_call -> VARIABLE . LPAREN function_arguments RPAREN
    (34) assignment_statement -> VARIABLE . ASSIGN expression
    (35) assignment_statement -> VARIABLE . ASSIGN READLN

    PLUS            reduce using rule 105 (expression -> VARIABLE .)
    MINUS           reduce using rule 105 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 105 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 105 (expression -> VARIABLE .)
    GREATERTHAN     reduce using rule 105 (expression -> VARIABLE .)
    LESSTHAN        reduce using rule 105 (expression -> VARIABLE .)
    EQUALS          reduce using rule 105 (expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 105 (expression -> VARIABLE .)
    AND             reduce using rule 105 (expression -> VARIABLE .)
    OR              reduce using rule 105 (expression -> VARIABLE .)
    COMMA           reduce using rule 105 (expression -> VARIABLE .)
    COLON           reduce using rule 105 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 105 (expression -> VARIABLE .)
    CASE            reduce using rule 105 (expression -> VARIABLE .)
    RBRACES         reduce using rule 105 (expression -> VARIABLE .)
    LPAREN          shift and go to state 36
    ASSIGN          shift and go to state 35


state 210

    (107) expression -> function_call .
    (9) statement -> function_call .

  ! reduce/reduce conflict for DEFAULT resolved using rule 9 (statement -> function_call .)
  ! reduce/reduce conflict for CASE resolved using rule 9 (statement -> function_call .)
  ! reduce/reduce conflict for RBRACES resolved using rule 9 (statement -> function_call .)
    PLUS            reduce using rule 107 (expression -> function_call .)
    MINUS           reduce using rule 107 (expression -> function_call .)
    MULTIPLY        reduce using rule 107 (expression -> function_call .)
    DIVIDE          reduce using rule 107 (expression -> function_call .)
    GREATERTHAN     reduce using rule 107 (expression -> function_call .)
    LESSTHAN        reduce using rule 107 (expression -> function_call .)
    EQUALS          reduce using rule 107 (expression -> function_call .)
    NOTEQUALS       reduce using rule 107 (expression -> function_call .)
    AND             reduce using rule 107 (expression -> function_call .)
    OR              reduce using rule 107 (expression -> function_call .)
    COMMA           reduce using rule 107 (expression -> function_call .)
    COLON           reduce using rule 107 (expression -> function_call .)
    DEFAULT         reduce using rule 9 (statement -> function_call .)
    CASE            reduce using rule 9 (statement -> function_call .)
    RBRACES         reduce using rule 9 (statement -> function_call .)

  ! DEFAULT         [ reduce using rule 107 (expression -> function_call .) ]
  ! CASE            [ reduce using rule 107 (expression -> function_call .) ]
  ! RBRACES         [ reduce using rule 107 (expression -> function_call .) ]


state 211

    (45) for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .

    VARIABLE        reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    PRINT           reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    IF              reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    INIT            reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    WHILE           reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    REPEAT          reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    IMPORT          reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    FOR             reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    COMMENT         reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    LET             reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    VAR             reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    FUNC            reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    $end            reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    CASE            reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)
    RETURN          reduce using rule 45 (for_statement -> FOR VARIABLE IN VARIABLE LBRACES statements RBRACES .)


state 212

    (44) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 225
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 213

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES . functionstatements return_statement RBRACES
    (16) functionstatements -> . functionstatements functionbody
    (17) functionstatements -> . functionbody
    (18) functionbody -> . assignment_statement
    (19) functionbody -> . assignment_statement_type
    (20) functionbody -> . print_statement
    (21) functionbody -> . if_statement
    (22) functionbody -> . while_statement
    (23) functionbody -> . switch_statement
    (24) functionbody -> . import_statement
    (25) functionbody -> . for_statement
    (26) functionbody -> . empty
    (27) functionbody -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (122) empty -> .
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    VARIABLE        shift and go to state 226
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    RETURN          reduce using rule 122 (empty -> .)
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30

  ! VARIABLE        [ reduce using rule 122 (empty -> .) ]
  ! PRINT           [ reduce using rule 122 (empty -> .) ]
  ! IF              [ reduce using rule 122 (empty -> .) ]
  ! WHILE           [ reduce using rule 122 (empty -> .) ]
  ! REPEAT          [ reduce using rule 122 (empty -> .) ]
  ! SWITCH          [ reduce using rule 122 (empty -> .) ]
  ! IMPORT          [ reduce using rule 122 (empty -> .) ]
  ! FOR             [ reduce using rule 122 (empty -> .) ]
  ! COMMENT         [ reduce using rule 122 (empty -> .) ]
  ! LET             [ reduce using rule 122 (empty -> .) ]
  ! VAR             [ reduce using rule 122 (empty -> .) ]

    functionstatements             shift and go to state 227
    functionbody                   shift and go to state 228
    assignment_statement           shift and go to state 229
    assignment_statement_type      shift and go to state 230
    print_statement                shift and go to state 231
    if_statement                   shift and go to state 232
    while_statement                shift and go to state 233
    switch_statement               shift and go to state 234
    import_statement               shift and go to state 235
    for_statement                  shift and go to state 236
    empty                          shift and go to state 237
    comment                        shift and go to state 238
    variable_declarator            shift and go to state 16

state 214

    (65) function_return_type -> ARROW data_type .

    LBRACES         reduce using rule 65 (function_return_type -> ARROW data_type .)


state 215

    (66) function_return_type -> ARROW LPAREN . function_parameters RPAREN
    (63) function_parameters -> . function_parameters COMMA VARIABLE COLON data_type
    (64) function_parameters -> . VARIABLE COLON data_type

    VARIABLE        shift and go to state 69

    function_parameters            shift and go to state 239

state 216

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES . functionstatements return_statement RBRACES
    (16) functionstatements -> . functionstatements functionbody
    (17) functionstatements -> . functionbody
    (18) functionbody -> . assignment_statement
    (19) functionbody -> . assignment_statement_type
    (20) functionbody -> . print_statement
    (21) functionbody -> . if_statement
    (22) functionbody -> . while_statement
    (23) functionbody -> . switch_statement
    (24) functionbody -> . import_statement
    (25) functionbody -> . for_statement
    (26) functionbody -> . empty
    (27) functionbody -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (122) empty -> .
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    VARIABLE        shift and go to state 226
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    RETURN          reduce using rule 122 (empty -> .)
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30

  ! VARIABLE        [ reduce using rule 122 (empty -> .) ]
  ! PRINT           [ reduce using rule 122 (empty -> .) ]
  ! IF              [ reduce using rule 122 (empty -> .) ]
  ! WHILE           [ reduce using rule 122 (empty -> .) ]
  ! REPEAT          [ reduce using rule 122 (empty -> .) ]
  ! SWITCH          [ reduce using rule 122 (empty -> .) ]
  ! IMPORT          [ reduce using rule 122 (empty -> .) ]
  ! FOR             [ reduce using rule 122 (empty -> .) ]
  ! COMMENT         [ reduce using rule 122 (empty -> .) ]
  ! LET             [ reduce using rule 122 (empty -> .) ]
  ! VAR             [ reduce using rule 122 (empty -> .) ]

    empty                          shift and go to state 237
    functionstatements             shift and go to state 240
    functionbody                   shift and go to state 228
    assignment_statement           shift and go to state 229
    assignment_statement_type      shift and go to state 230
    print_statement                shift and go to state 231
    if_statement                   shift and go to state 232
    while_statement                shift and go to state 233
    switch_statement               shift and go to state 234
    import_statement               shift and go to state 235
    for_statement                  shift and go to state 236
    comment                        shift and go to state 238
    variable_declarator            shift and go to state 16

state 217

    (48) collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .

    VARIABLE        reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    PRINT           reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    IF              reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    INIT            reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    WHILE           reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    REPEAT          reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    SWITCH          reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    IMPORT          reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    FOR             reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    COMMENT         reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    LET             reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    VAR             reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    FUNC            reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    $end            reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    RBRACES         reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    DEFAULT         reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    CASE            reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)
    RETURN          reduce using rule 48 (collection_block -> LSQUAREBRACKET types RSQUAREBRACKET .)


state 218

    (108) types -> types COMMA . type
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    type                           shift and go to state 241

state 219

    (117) key_value -> type COLON . type
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    type                           shift and go to state 242

state 220

    (109) types -> key_value COMMA . types
    (108) types -> . types COMMA type
    (109) types -> . key_value COMMA types
    (110) types -> . key_value
    (111) types -> . type
    (117) key_value -> . type COLON type
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    key_value                      shift and go to state 193
    types                          shift and go to state 243
    type                           shift and go to state 192

state 221

    (51) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE . LBRACES statements RBRACES

    LBRACES         shift and go to state 244


state 222

    (53) while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .

    VARIABLE        reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    PRINT           reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    REPEAT          reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    COMMENT         reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    LET             reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    FUNC            reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    RBRACES         reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 53 (while_statement -> REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN .)


state 223

    (55) caso -> CASE expression COLON cuerpo_caso caso .

    RBRACES         reduce using rule 55 (caso -> CASE expression COLON cuerpo_caso caso .)


state 224

    (56) caso -> CASE expression COLON cuerpo_caso DEFAULT . COLON cuerpo_caso

    COLON           shift and go to state 245


state 225

    (44) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 246
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 226

    (34) assignment_statement -> VARIABLE . ASSIGN expression
    (35) assignment_statement -> VARIABLE . ASSIGN READLN

    ASSIGN          shift and go to state 35


state 227

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements . return_statement RBRACES
    (16) functionstatements -> functionstatements . functionbody
    (68) return_statement -> . RETURN expression
    (18) functionbody -> . assignment_statement
    (19) functionbody -> . assignment_statement_type
    (20) functionbody -> . print_statement
    (21) functionbody -> . if_statement
    (22) functionbody -> . while_statement
    (23) functionbody -> . switch_statement
    (24) functionbody -> . import_statement
    (25) functionbody -> . for_statement
    (26) functionbody -> . empty
    (27) functionbody -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (122) empty -> .
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          shift and go to state 249
    VARIABLE        shift and go to state 226
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30

  ! RETURN          [ reduce using rule 122 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 122 (empty -> .) ]
  ! PRINT           [ reduce using rule 122 (empty -> .) ]
  ! IF              [ reduce using rule 122 (empty -> .) ]
  ! WHILE           [ reduce using rule 122 (empty -> .) ]
  ! REPEAT          [ reduce using rule 122 (empty -> .) ]
  ! SWITCH          [ reduce using rule 122 (empty -> .) ]
  ! IMPORT          [ reduce using rule 122 (empty -> .) ]
  ! FOR             [ reduce using rule 122 (empty -> .) ]
  ! COMMENT         [ reduce using rule 122 (empty -> .) ]
  ! LET             [ reduce using rule 122 (empty -> .) ]
  ! VAR             [ reduce using rule 122 (empty -> .) ]

    return_statement               shift and go to state 247
    functionbody                   shift and go to state 248
    assignment_statement           shift and go to state 229
    assignment_statement_type      shift and go to state 230
    print_statement                shift and go to state 231
    if_statement                   shift and go to state 232
    while_statement                shift and go to state 233
    switch_statement               shift and go to state 234
    import_statement               shift and go to state 235
    for_statement                  shift and go to state 236
    empty                          shift and go to state 237
    comment                        shift and go to state 238
    variable_declarator            shift and go to state 16

state 228

    (17) functionstatements -> functionbody .

    RETURN          reduce using rule 17 (functionstatements -> functionbody .)
    VARIABLE        reduce using rule 17 (functionstatements -> functionbody .)
    PRINT           reduce using rule 17 (functionstatements -> functionbody .)
    IF              reduce using rule 17 (functionstatements -> functionbody .)
    WHILE           reduce using rule 17 (functionstatements -> functionbody .)
    REPEAT          reduce using rule 17 (functionstatements -> functionbody .)
    SWITCH          reduce using rule 17 (functionstatements -> functionbody .)
    IMPORT          reduce using rule 17 (functionstatements -> functionbody .)
    FOR             reduce using rule 17 (functionstatements -> functionbody .)
    COMMENT         reduce using rule 17 (functionstatements -> functionbody .)
    LET             reduce using rule 17 (functionstatements -> functionbody .)
    VAR             reduce using rule 17 (functionstatements -> functionbody .)


state 229

    (18) functionbody -> assignment_statement .

    RETURN          reduce using rule 18 (functionbody -> assignment_statement .)
    VARIABLE        reduce using rule 18 (functionbody -> assignment_statement .)
    PRINT           reduce using rule 18 (functionbody -> assignment_statement .)
    IF              reduce using rule 18 (functionbody -> assignment_statement .)
    WHILE           reduce using rule 18 (functionbody -> assignment_statement .)
    REPEAT          reduce using rule 18 (functionbody -> assignment_statement .)
    SWITCH          reduce using rule 18 (functionbody -> assignment_statement .)
    IMPORT          reduce using rule 18 (functionbody -> assignment_statement .)
    FOR             reduce using rule 18 (functionbody -> assignment_statement .)
    COMMENT         reduce using rule 18 (functionbody -> assignment_statement .)
    LET             reduce using rule 18 (functionbody -> assignment_statement .)
    VAR             reduce using rule 18 (functionbody -> assignment_statement .)


state 230

    (19) functionbody -> assignment_statement_type .

    RETURN          reduce using rule 19 (functionbody -> assignment_statement_type .)
    VARIABLE        reduce using rule 19 (functionbody -> assignment_statement_type .)
    PRINT           reduce using rule 19 (functionbody -> assignment_statement_type .)
    IF              reduce using rule 19 (functionbody -> assignment_statement_type .)
    WHILE           reduce using rule 19 (functionbody -> assignment_statement_type .)
    REPEAT          reduce using rule 19 (functionbody -> assignment_statement_type .)
    SWITCH          reduce using rule 19 (functionbody -> assignment_statement_type .)
    IMPORT          reduce using rule 19 (functionbody -> assignment_statement_type .)
    FOR             reduce using rule 19 (functionbody -> assignment_statement_type .)
    COMMENT         reduce using rule 19 (functionbody -> assignment_statement_type .)
    LET             reduce using rule 19 (functionbody -> assignment_statement_type .)
    VAR             reduce using rule 19 (functionbody -> assignment_statement_type .)


state 231

    (20) functionbody -> print_statement .

    RETURN          reduce using rule 20 (functionbody -> print_statement .)
    VARIABLE        reduce using rule 20 (functionbody -> print_statement .)
    PRINT           reduce using rule 20 (functionbody -> print_statement .)
    IF              reduce using rule 20 (functionbody -> print_statement .)
    WHILE           reduce using rule 20 (functionbody -> print_statement .)
    REPEAT          reduce using rule 20 (functionbody -> print_statement .)
    SWITCH          reduce using rule 20 (functionbody -> print_statement .)
    IMPORT          reduce using rule 20 (functionbody -> print_statement .)
    FOR             reduce using rule 20 (functionbody -> print_statement .)
    COMMENT         reduce using rule 20 (functionbody -> print_statement .)
    LET             reduce using rule 20 (functionbody -> print_statement .)
    VAR             reduce using rule 20 (functionbody -> print_statement .)


state 232

    (21) functionbody -> if_statement .

    RETURN          reduce using rule 21 (functionbody -> if_statement .)
    VARIABLE        reduce using rule 21 (functionbody -> if_statement .)
    PRINT           reduce using rule 21 (functionbody -> if_statement .)
    IF              reduce using rule 21 (functionbody -> if_statement .)
    WHILE           reduce using rule 21 (functionbody -> if_statement .)
    REPEAT          reduce using rule 21 (functionbody -> if_statement .)
    SWITCH          reduce using rule 21 (functionbody -> if_statement .)
    IMPORT          reduce using rule 21 (functionbody -> if_statement .)
    FOR             reduce using rule 21 (functionbody -> if_statement .)
    COMMENT         reduce using rule 21 (functionbody -> if_statement .)
    LET             reduce using rule 21 (functionbody -> if_statement .)
    VAR             reduce using rule 21 (functionbody -> if_statement .)


state 233

    (22) functionbody -> while_statement .

    RETURN          reduce using rule 22 (functionbody -> while_statement .)
    VARIABLE        reduce using rule 22 (functionbody -> while_statement .)
    PRINT           reduce using rule 22 (functionbody -> while_statement .)
    IF              reduce using rule 22 (functionbody -> while_statement .)
    WHILE           reduce using rule 22 (functionbody -> while_statement .)
    REPEAT          reduce using rule 22 (functionbody -> while_statement .)
    SWITCH          reduce using rule 22 (functionbody -> while_statement .)
    IMPORT          reduce using rule 22 (functionbody -> while_statement .)
    FOR             reduce using rule 22 (functionbody -> while_statement .)
    COMMENT         reduce using rule 22 (functionbody -> while_statement .)
    LET             reduce using rule 22 (functionbody -> while_statement .)
    VAR             reduce using rule 22 (functionbody -> while_statement .)


state 234

    (23) functionbody -> switch_statement .

    RETURN          reduce using rule 23 (functionbody -> switch_statement .)
    VARIABLE        reduce using rule 23 (functionbody -> switch_statement .)
    PRINT           reduce using rule 23 (functionbody -> switch_statement .)
    IF              reduce using rule 23 (functionbody -> switch_statement .)
    WHILE           reduce using rule 23 (functionbody -> switch_statement .)
    REPEAT          reduce using rule 23 (functionbody -> switch_statement .)
    SWITCH          reduce using rule 23 (functionbody -> switch_statement .)
    IMPORT          reduce using rule 23 (functionbody -> switch_statement .)
    FOR             reduce using rule 23 (functionbody -> switch_statement .)
    COMMENT         reduce using rule 23 (functionbody -> switch_statement .)
    LET             reduce using rule 23 (functionbody -> switch_statement .)
    VAR             reduce using rule 23 (functionbody -> switch_statement .)


state 235

    (24) functionbody -> import_statement .

    RETURN          reduce using rule 24 (functionbody -> import_statement .)
    VARIABLE        reduce using rule 24 (functionbody -> import_statement .)
    PRINT           reduce using rule 24 (functionbody -> import_statement .)
    IF              reduce using rule 24 (functionbody -> import_statement .)
    WHILE           reduce using rule 24 (functionbody -> import_statement .)
    REPEAT          reduce using rule 24 (functionbody -> import_statement .)
    SWITCH          reduce using rule 24 (functionbody -> import_statement .)
    IMPORT          reduce using rule 24 (functionbody -> import_statement .)
    FOR             reduce using rule 24 (functionbody -> import_statement .)
    COMMENT         reduce using rule 24 (functionbody -> import_statement .)
    LET             reduce using rule 24 (functionbody -> import_statement .)
    VAR             reduce using rule 24 (functionbody -> import_statement .)


state 236

    (25) functionbody -> for_statement .

    RETURN          reduce using rule 25 (functionbody -> for_statement .)
    VARIABLE        reduce using rule 25 (functionbody -> for_statement .)
    PRINT           reduce using rule 25 (functionbody -> for_statement .)
    IF              reduce using rule 25 (functionbody -> for_statement .)
    WHILE           reduce using rule 25 (functionbody -> for_statement .)
    REPEAT          reduce using rule 25 (functionbody -> for_statement .)
    SWITCH          reduce using rule 25 (functionbody -> for_statement .)
    IMPORT          reduce using rule 25 (functionbody -> for_statement .)
    FOR             reduce using rule 25 (functionbody -> for_statement .)
    COMMENT         reduce using rule 25 (functionbody -> for_statement .)
    LET             reduce using rule 25 (functionbody -> for_statement .)
    VAR             reduce using rule 25 (functionbody -> for_statement .)


state 237

    (26) functionbody -> empty .

    RETURN          reduce using rule 26 (functionbody -> empty .)
    VARIABLE        reduce using rule 26 (functionbody -> empty .)
    PRINT           reduce using rule 26 (functionbody -> empty .)
    IF              reduce using rule 26 (functionbody -> empty .)
    WHILE           reduce using rule 26 (functionbody -> empty .)
    REPEAT          reduce using rule 26 (functionbody -> empty .)
    SWITCH          reduce using rule 26 (functionbody -> empty .)
    IMPORT          reduce using rule 26 (functionbody -> empty .)
    FOR             reduce using rule 26 (functionbody -> empty .)
    COMMENT         reduce using rule 26 (functionbody -> empty .)
    LET             reduce using rule 26 (functionbody -> empty .)
    VAR             reduce using rule 26 (functionbody -> empty .)


state 238

    (27) functionbody -> comment .

    RETURN          reduce using rule 27 (functionbody -> comment .)
    VARIABLE        reduce using rule 27 (functionbody -> comment .)
    PRINT           reduce using rule 27 (functionbody -> comment .)
    IF              reduce using rule 27 (functionbody -> comment .)
    WHILE           reduce using rule 27 (functionbody -> comment .)
    REPEAT          reduce using rule 27 (functionbody -> comment .)
    SWITCH          reduce using rule 27 (functionbody -> comment .)
    IMPORT          reduce using rule 27 (functionbody -> comment .)
    FOR             reduce using rule 27 (functionbody -> comment .)
    COMMENT         reduce using rule 27 (functionbody -> comment .)
    LET             reduce using rule 27 (functionbody -> comment .)
    VAR             reduce using rule 27 (functionbody -> comment .)


state 239

    (66) function_return_type -> ARROW LPAREN function_parameters . RPAREN
    (63) function_parameters -> function_parameters . COMMA VARIABLE COLON data_type

    RPAREN          shift and go to state 250
    COMMA           shift and go to state 109


state 240

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements . return_statement RBRACES
    (16) functionstatements -> functionstatements . functionbody
    (68) return_statement -> . RETURN expression
    (18) functionbody -> . assignment_statement
    (19) functionbody -> . assignment_statement_type
    (20) functionbody -> . print_statement
    (21) functionbody -> . if_statement
    (22) functionbody -> . while_statement
    (23) functionbody -> . switch_statement
    (24) functionbody -> . import_statement
    (25) functionbody -> . for_statement
    (26) functionbody -> . empty
    (27) functionbody -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (122) empty -> .
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          shift and go to state 249
    VARIABLE        shift and go to state 226
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30

  ! RETURN          [ reduce using rule 122 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 122 (empty -> .) ]
  ! PRINT           [ reduce using rule 122 (empty -> .) ]
  ! IF              [ reduce using rule 122 (empty -> .) ]
  ! WHILE           [ reduce using rule 122 (empty -> .) ]
  ! REPEAT          [ reduce using rule 122 (empty -> .) ]
  ! SWITCH          [ reduce using rule 122 (empty -> .) ]
  ! IMPORT          [ reduce using rule 122 (empty -> .) ]
  ! FOR             [ reduce using rule 122 (empty -> .) ]
  ! COMMENT         [ reduce using rule 122 (empty -> .) ]
  ! LET             [ reduce using rule 122 (empty -> .) ]
  ! VAR             [ reduce using rule 122 (empty -> .) ]

    empty                          shift and go to state 237
    return_statement               shift and go to state 251
    functionbody                   shift and go to state 248
    assignment_statement           shift and go to state 229
    assignment_statement_type      shift and go to state 230
    print_statement                shift and go to state 231
    if_statement                   shift and go to state 232
    while_statement                shift and go to state 233
    switch_statement               shift and go to state 234
    import_statement               shift and go to state 235
    for_statement                  shift and go to state 236
    comment                        shift and go to state 238
    variable_declarator            shift and go to state 16

state 241

    (108) types -> types COMMA type .

    RSQUAREBRACKET  reduce using rule 108 (types -> types COMMA type .)
    COMMA           reduce using rule 108 (types -> types COMMA type .)


state 242

    (117) key_value -> type COLON type .

    COMMA           reduce using rule 117 (key_value -> type COLON type .)
    RSQUAREBRACKET  reduce using rule 117 (key_value -> type COLON type .)


state 243

    (109) types -> key_value COMMA types .
    (108) types -> types . COMMA type

  ! shift/reduce conflict for COMMA resolved as shift
    RSQUAREBRACKET  reduce using rule 109 (types -> key_value COMMA types .)
    COMMA           shift and go to state 218

  ! COMMA           [ reduce using rule 109 (types -> key_value COMMA types .) ]


state 244

    (51) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES . statements RBRACES
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statements                     shift and go to state 252
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 245

    (56) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON . cuerpo_caso
    (57) cuerpo_caso -> . expression
    (58) cuerpo_caso -> . statement
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 209
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    expression                     shift and go to state 253
    cuerpo_caso                    shift and go to state 254
    statement                      shift and go to state 208
    type                           shift and go to state 55
    function_call                  shift and go to state 210
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 246

    (44) for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .

    VARIABLE        reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    PRINT           reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    IF              reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    INIT            reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    WHILE           reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    REPEAT          reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    SWITCH          reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    IMPORT          reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    FOR             reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    COMMENT         reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    LET             reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    VAR             reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    FUNC            reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    $end            reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    RBRACES         reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    CASE            reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)
    RETURN          reduce using rule 44 (for_statement -> FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES .)


state 247

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement . RBRACES

    RBRACES         shift and go to state 255


state 248

    (16) functionstatements -> functionstatements functionbody .

    RETURN          reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    VARIABLE        reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    PRINT           reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    IF              reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    WHILE           reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    REPEAT          reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    SWITCH          reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    IMPORT          reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    FOR             reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    COMMENT         reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    LET             reduce using rule 16 (functionstatements -> functionstatements functionbody .)
    VAR             reduce using rule 16 (functionstatements -> functionstatements functionbody .)


state 249

    (68) return_statement -> RETURN . expression
    (91) expression -> . expression PLUS expression
    (92) expression -> . expression MINUS expression
    (93) expression -> . expression MULTIPLY expression
    (94) expression -> . expression DIVIDE expression
    (95) expression -> . expression GREATERTHAN expression
    (96) expression -> . expression LESSTHAN expression
    (97) expression -> . expression EQUALS expression
    (98) expression -> . expression NOTEQUALS expression
    (99) expression -> . expression AND expression
    (100) expression -> . expression OR expression
    (101) expression -> . expression COMMA expression
    (102) expression -> . expression COLON expression
    (103) expression -> . LPAREN expression RPAREN
    (104) expression -> . NOT expression
    (105) expression -> . VARIABLE
    (106) expression -> . type
    (107) expression -> . function_call
    (112) type -> . TRUE
    (113) type -> . FALSE
    (114) type -> . DECIMAL
    (115) type -> . WSTRING
    (116) type -> . NUMBER
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN

    LPAREN          shift and go to state 53
    NOT             shift and go to state 54
    VARIABLE        shift and go to state 50
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    DECIMAL         shift and go to state 59
    WSTRING         shift and go to state 60
    NUMBER          shift and go to state 61

    expression                     shift and go to state 256
    type                           shift and go to state 55
    function_call                  shift and go to state 56

state 250

    (66) function_return_type -> ARROW LPAREN function_parameters RPAREN .

    LBRACES         reduce using rule 66 (function_return_type -> ARROW LPAREN function_parameters RPAREN .)


state 251

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement . RBRACES

    RBRACES         shift and go to state 257


state 252

    (51) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements . RBRACES
    (2) statements -> statements . statement
    (4) statement -> . assignment_statement
    (5) statement -> . assignment_statement_type
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . function_general
    (9) statement -> . function_call
    (10) statement -> . function_init
    (11) statement -> . while_statement
    (12) statement -> . switch_statement
    (13) statement -> . import_statement
    (14) statement -> . for_statement
    (15) statement -> . comment
    (28) assignment_statement -> . variable_declarator VARIABLE ASSIGN expression
    (29) assignment_statement -> . variable_declarator VARIABLE ASSIGN READLN
    (30) assignment_statement -> . variable_declarator VARIABLE COLON data_collection_type ASSIGN collection_block
    (31) assignment_statement -> . variable_declarator VARIABLE COLON SET data_diamond_type ASSIGN collection_block
    (32) assignment_statement -> . variable_declarator VARIABLE COLON SET ASSIGN collection_block
    (33) assignment_statement -> . variable_declarator VARIABLE COLON DICTIONARYTYPE ASSIGN collection_block
    (34) assignment_statement -> . VARIABLE ASSIGN expression
    (35) assignment_statement -> . VARIABLE ASSIGN READLN
    (36) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type
    (37) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type OPTIONALVARIABLE
    (38) assignment_statement_type -> . variable_declarator multiple_variables COLON data_type
    (39) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN expression
    (40) assignment_statement_type -> . variable_declarator VARIABLE COLON data_type ASSIGN READLN
    (49) print_statement -> . PRINT LPAREN expression RPAREN
    (50) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES
    (59) function_general -> . function_declaration
    (60) function_general -> . function_declaration_empty
    (118) function_call -> . VARIABLE LPAREN function_arguments RPAREN
    (69) function_init -> . INIT LPAREN function_parameters RPAREN LBRACES statements RBRACES
    (70) function_init -> . INIT LPAREN empty RPAREN LBRACES statements RBRACES
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACES statements RBRACES
    (53) while_statement -> . REPEAT LBRACES statements RBRACES WHILE LPAREN expression RPAREN
    (54) switch_statement -> . SWITCH VARIABLE LBRACES caso RBRACES
    (43) import_statement -> . IMPORT VARIABLE
    (44) for_statement -> . FOR VARIABLE IN NUMBER RANGE NUMBER LBRACES statements RBRACES
    (45) for_statement -> . FOR VARIABLE IN VARIABLE LBRACES statements RBRACES
    (123) comment -> . COMMENT
    (71) variable_declarator -> . LET
    (72) variable_declarator -> . VAR
    (61) function_declaration -> . FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES
    (62) function_declaration_empty -> . FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES

    RBRACES         shift and go to state 258
    VARIABLE        shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    INIT            shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    SWITCH          shift and go to state 25
    IMPORT          shift and go to state 26
    FOR             shift and go to state 27
    COMMENT         shift and go to state 28
    LET             shift and go to state 29
    VAR             shift and go to state 30
    FUNC            shift and go to state 31

    statement                      shift and go to state 32
    assignment_statement           shift and go to state 4
    assignment_statement_type      shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    function_general               shift and go to state 8
    function_call                  shift and go to state 9
    function_init                  shift and go to state 10
    while_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    import_statement               shift and go to state 13
    for_statement                  shift and go to state 14
    comment                        shift and go to state 15
    variable_declarator            shift and go to state 16
    function_declaration           shift and go to state 20
    function_declaration_empty     shift and go to state 21

state 253

    (57) cuerpo_caso -> expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RBRACES         reduce using rule 57 (cuerpo_caso -> expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 254

    (56) caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .

    RBRACES         reduce using rule 56 (caso -> CASE expression COLON cuerpo_caso DEFAULT COLON cuerpo_caso .)


state 255

    (61) function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .

    VARIABLE        reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    PRINT           reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IF              reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    INIT            reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    WHILE           reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    REPEAT          reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    SWITCH          reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IMPORT          reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FOR             reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    COMMENT         reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    LET             reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VAR             reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FUNC            reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    $end            reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    RBRACES         reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    DEFAULT         reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    CASE            reduce using rule 61 (function_declaration -> FUNC VARIABLE LPAREN function_parameters RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)


state 256

    (68) return_statement -> RETURN expression .
    (91) expression -> expression . PLUS expression
    (92) expression -> expression . MINUS expression
    (93) expression -> expression . MULTIPLY expression
    (94) expression -> expression . DIVIDE expression
    (95) expression -> expression . GREATERTHAN expression
    (96) expression -> expression . LESSTHAN expression
    (97) expression -> expression . EQUALS expression
    (98) expression -> expression . NOTEQUALS expression
    (99) expression -> expression . AND expression
    (100) expression -> expression . OR expression
    (101) expression -> expression . COMMA expression
    (102) expression -> expression . COLON expression

    RBRACES         reduce using rule 68 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    MULTIPLY        shift and go to state 92
    DIVIDE          shift and go to state 93
    GREATERTHAN     shift and go to state 94
    LESSTHAN        shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99
    COMMA           shift and go to state 100
    COLON           shift and go to state 101


state 257

    (62) function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .

    VARIABLE        reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    PRINT           reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IF              reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    INIT            reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    WHILE           reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    REPEAT          reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    SWITCH          reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    IMPORT          reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FOR             reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    COMMENT         reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    LET             reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    VAR             reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    FUNC            reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    $end            reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    RBRACES         reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    DEFAULT         reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)
    CASE            reduce using rule 62 (function_declaration_empty -> FUNC VARIABLE LPAREN empty RPAREN function_return_type LBRACES functionstatements return_statement RBRACES .)


state 258

    (51) if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .

    VARIABLE        reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    PRINT           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IF              reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    INIT            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    WHILE           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    REPEAT          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    SWITCH          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    IMPORT          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FOR             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    COMMENT         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    LET             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    VAR             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    FUNC            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    $end            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RBRACES         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    DEFAULT         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    CASE            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)
    RETURN          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACES statements RBRACES ELSE LBRACES statements RBRACES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 103 resolved as shift
WARNING: shift/reduce conflict for COLON in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 133 resolved as shift
WARNING: shift/reduce conflict for COLON in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 134 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 134 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 134 resolved as shift
WARNING: shift/reduce conflict for COLON in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 135 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 135 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 135 resolved as shift
WARNING: shift/reduce conflict for COLON in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 136 resolved as shift
WARNING: shift/reduce conflict for COLON in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 137 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 137 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 137 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 137 resolved as shift
WARNING: shift/reduce conflict for COLON in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 138 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 138 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 138 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 138 resolved as shift
WARNING: shift/reduce conflict for COLON in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 139 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 139 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 139 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 139 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 139 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 139 resolved as shift
WARNING: shift/reduce conflict for COLON in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 140 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 140 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 140 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 140 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 140 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 140 resolved as shift
WARNING: shift/reduce conflict for COLON in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 141 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 141 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 141 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 141 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 141 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 141 resolved as shift
WARNING: shift/reduce conflict for AND in state 141 resolved as shift
WARNING: shift/reduce conflict for OR in state 141 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 141 resolved as shift
WARNING: shift/reduce conflict for COLON in state 141 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 142 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 142 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 142 resolved as shift
WARNING: shift/reduce conflict for COLON in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 143 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 143 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 143 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 143 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 143 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 143 resolved as shift
WARNING: shift/reduce conflict for AND in state 143 resolved as shift
WARNING: shift/reduce conflict for OR in state 143 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 143 resolved as shift
WARNING: shift/reduce conflict for COLON in state 143 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 144 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 144 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 144 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 144 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 144 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 144 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 144 resolved as shift
WARNING: shift/reduce conflict for AND in state 144 resolved as shift
WARNING: shift/reduce conflict for OR in state 144 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 144 resolved as shift
WARNING: shift/reduce conflict for COLON in state 144 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 146 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 193 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 206 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 206 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 206 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 206 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 206 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 206 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 206 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 206 resolved as shift
WARNING: shift/reduce conflict for AND in state 206 resolved as shift
WARNING: shift/reduce conflict for OR in state 206 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 206 resolved as shift
WARNING: shift/reduce conflict for COLON in state 206 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 213 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 213 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 213 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 213 resolved as shift
WARNING: shift/reduce conflict for LET in state 213 resolved as shift
WARNING: shift/reduce conflict for VAR in state 213 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 216 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 216 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 216 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 216 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 216 resolved as shift
WARNING: shift/reduce conflict for FOR in state 216 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 216 resolved as shift
WARNING: shift/reduce conflict for LET in state 216 resolved as shift
WARNING: shift/reduce conflict for VAR in state 216 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 227 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 227 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 227 resolved as shift
WARNING: shift/reduce conflict for IF in state 227 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 227 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 227 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 227 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 227 resolved as shift
WARNING: shift/reduce conflict for FOR in state 227 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 227 resolved as shift
WARNING: shift/reduce conflict for LET in state 227 resolved as shift
WARNING: shift/reduce conflict for VAR in state 227 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 240 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 240 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 240 resolved as shift
WARNING: shift/reduce conflict for IF in state 240 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 240 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 240 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 240 resolved as shift
WARNING: shift/reduce conflict for FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 240 resolved as shift
WARNING: shift/reduce conflict for LET in state 240 resolved as shift
WARNING: shift/reduce conflict for VAR in state 240 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 243 resolved as shift
WARNING: reduce/reduce conflict in state 210 resolved using rule (statement -> function_call)
WARNING: rejected rule (expression -> function_call) in state 210
